{"version":3,"file":"static/js/176.2c7f0c21.chunk.js","mappings":"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","sources":["../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/tweetnacl/nacl-fast.js"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase,\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (typeof require !== 'undefined') {\n    // Node.js.\n    crypto = require('crypto');\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n"],"names":["toBuffer","arr","Buffer","assert","val","msg","Error","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","toString","endian","start","end","len","k","m","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","f","g","T1","T2","SHA224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","exports","sha","ripemd","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","Uint8Array","hex","JSON","stringify","reason","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","Map","MAX_SEED_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","bs58","byteLength","equals","publicKey","eq","toBase58","toBytes","toArrayLike","zeroPad","buffer","fromPublicKey","programId","seeds","seed","TypeError","publicKeyBytes","is_on_curve","nonce","seedsWithNonce","address","createProgramAddress","err","pubkey","default","fields","naclLowLevel","nacl","chk","den","den2","den4","den6","neq25519","gf1","I","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","str","chars","decodeLength","size","elem","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","set","isAccountSigner","index","isAccountWritable","numRequiredSignatures","isProgramId","has","programIds","nonProgramIds","filter","_","numKeys","keyCount","shortvec","map","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","transaction","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","item","compileMessage","accountMetas","accountMeta","isSigner","isWritable","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","findIndex","sigpair","verifySignatures","_verifySignatures","config","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","connection","status","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","alloc","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","typeIndex","instructionTypeLayout","ixType","layout","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","lamports","toPubkey","basePubkey","space","accountPubkey","authorized","noncePubkey","newAuthorizedPubkey","SystemProgram","expectedLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","base","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","balanceNeeded","programInfo","program","payer","dataLayout","chunkSize","offset","transactions","REQUESTS_PER_SECOND","BPF_LOADER_PROGRAM_ID","BpfLoader","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","test","normalizeValue","iteratorFor","iterator","next","shift","done","undefined","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","decode","json","parse","oldValue","hasOwnProperty","callback","thisArg","values","entries","methods","Request","input","url","credentials","method","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","module","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","executable","owner","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcEndpoint","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","URL","client","commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","endpoint","useHttps","Number","makeWebsocketUrl","fetchWithMiddleware","too_many_requests_retries","waitTime","createRpcClient","requests","batch","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","_wsOnOpen","bind","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","configArg","tokenMintAddress","tokenAddress","_args","ownerAddress","arg","mintAddress","getAccountInfoAndContext","publicKeys","extra","configOrCommitment","encoding","decodedSignature","Date","subscriptionCommitment","confirmPromise","subscriptionId","onSignature","timeoutMs","timeoutPromise","timeoutId","clearTimeout","promiseTimeout","duration","startSlot","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","limit","getRecentBlockhashAndContext","_buildArgsAtLeastConfirmed","getBlock","endSlot","transactionDetails","getTransaction","methodName","firstAvailableBlock","block","getConfirmedBlockSignatures","highestConfirmedRoot","getSlot","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","getNonceAndContext","to","disableCache","expired","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","_recentBlockhash","includes","encodedTransaction","traceIndent","logTrace","sendRawTransaction","sendEncodedTransaction","setInterval","clearInterval","sub","rpcMethod","unsubscribeId","_resetSubscriptions","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","filters","mentions","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","encoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","lockup","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","stakeAuthorizationType","o","authorityOwner","authorityBase","authoritySeed","splitStakePubkey","sourceStakePubKey","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","custodianPubkey","newAuthorized","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","ethAddress","rawAddress","ethAddressInstructionIndex","recoveryId","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","alphabet","caseChanged","isNum","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","div","yL","qc","q","more","xL","xi","remL","rem","yz","yc0","rem0","prodL","prod","subtract","round","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","ye","xe","xLTy","reverse","normalise","xcL","ycL","zc","sqrtBase","ylo","yhi","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","pow","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","assign","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","floor","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","toFixed","precision","_result$split2","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","isNegative","characteristicLength","currentAbbreviations","_data","_result$toString$spli2","currentCharacteristic","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","getByteUnit","getBinaryByteUnit","getDecimalByteUnit","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","validator","loader","unformatter","formatter","manipulate","Numbro","_classCallCheck","normalizeInput","unformat","isNaN","NaN","object","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_toConsumableArray","reduce","acc","validInput","isFormatValid","gf","Float64Array","randombytes","_0","_9","gf0","_121665","D2","X","Y","ts64","vn","yi","crypto_verify_16","crypto_verify_32","crypto_core_salsa20","inp","u","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","core_salsa20","crypto_core_hsalsa20","core_hsalsa20","sigma","crypto_stream_salsa20_xor","cpos","mpos","crypto_stream_salsa20","crypto_stream","sn","crypto_stream_xor","poly1305","t0","t1","t2","t3","t4","t5","t6","t7","Uint16Array","pad","leftover","fin","crypto_onetimeauth","outpos","finish","crypto_onetimeauth_verify","hpos","crypto_secretbox","crypto_secretbox_open","set25519","car25519","sel25519","pack25519","par25519","unpack25519","Z","M","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","S","inv25519","pow2523","crypto_scalarmult","x32","subarray","x16","crypto_scalarmult_base","crypto_box_keypair","crypto_box_beforenm","blocks","d3","d4","d5","d6","d7","d8","d9","hibit","h0","h1","h2","h3","h4","h5","h6","h7","h8","h9","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","mac","macpos","mask","want","crypto_box_afternm","crypto_box_open_afternm","crypto_hashblocks_hl","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","th","tl","wh","Int32Array","wl","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","al0","al1","al2","al3","al4","al5","al6","al7","crypto_hash","cswap","pack","tx","ty","zi","scalarmult","scalarbase","crypto_sign_keypair","pk","sk","seeded","L","modL","crypto_sign","sm","smlen","crypto_sign_open","unpackneg","crypto_secretbox_BOXZEROBYTES","crypto_sign_BYTES","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","checkLengths","checkArrayTypes","cleanup","lowlevel","crypto_box","crypto_box_open","crypto_secretbox_KEYBYTES","crypto_secretbox_NONCEBYTES","crypto_secretbox_ZEROBYTES","crypto_scalarmult_BYTES","crypto_scalarmult_SCALARBYTES","crypto_box_PUBLICKEYBYTES","crypto_box_SECRETKEYBYTES","crypto_box_BEFORENMBYTES","crypto_box_NONCEBYTES","crypto_box_ZEROBYTES","crypto_box_BOXZEROBYTES","crypto_sign_SEEDBYTES","crypto_hash_BYTES","randomBytes","secretbox","box","keyLength","nonceLength","overheadLength","scalarMult","scalarLength","groupElementLength","before","checkBoxLengths","after","keyPair","fromSecretKey","publicKeyLength","secretKeyLength","sharedKeyLength","signedMsg","tmp","mlen","detached","sig","verify","fromSeed","seedLength","signatureLength","hashLength","setPRNG","fn","msCrypto","getRandomValues"],"sourceRoot":""}