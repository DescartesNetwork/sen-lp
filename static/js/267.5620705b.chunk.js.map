{"version":3,"file":"static/js/267.5620705b.chunk.js","mappings":"0dAMc,MAAOA,UAAeC,KAalCC,YAAYC,EAA2BC,GAErC,GADA,QADqC,gBAV/B,gBAA+B,KAC/B,YAAwB,KACxB,oBAAgB,EAChB,oBAAiB,EACjB,mBAAe,EACf,uBAGJ,IAAIC,IAmBR,mBACEC,I,MAWA,GACG,KAAKC,mBAAqBD,EAAEE,SAAWC,QACvCH,EAAEI,UAA4B,QAAjB,OAAKC,oBAAYC,IAAAA,OAAA,EAAAA,EAAEF,SAAUJ,EAAEE,SAAW,KAAKK,OAE7D,GAAsB,cAAlBP,EAAEQ,KAAKC,OAAwB,CACjC,MAAMC,EAAe,IAAIC,EAAAA,UAAUX,EAAEQ,KAAKI,OAAOC,WAC5C,KAAKC,YAAe,KAAKA,WAAWC,OAAOL,KAC1C,KAAKI,aAAe,KAAKA,WAAWC,OAAOL,IAC7C,KAAKM,mBAEP,KAAKF,WAAaJ,EAClB,KAAKO,eAAiBjB,EAAEQ,KAAKI,OAAOM,YACpC,KAAKC,KAAK,UAAW,KAAKL,kBAEvB,GAAsB,iBAAlBd,EAAEQ,KAAKC,OAChB,KAAKO,wBACA,GAAIhB,EAAEQ,KAAKY,QAAUpB,EAAEQ,KAAKa,MAAO,CACxC,MAAMC,EAAW,KAAKC,kBAAkBC,IAAIxB,EAAEQ,KAAKiB,IACnD,GAAIH,EAAU,CACZ,MAAOI,EAASC,GAAUL,EACtBtB,EAAEQ,KAAKY,OACTM,EAAQ1B,EAAEQ,KAAKY,QAEfO,EAAO,IAAIC,MAAM5B,EAAEQ,KAAKa,WAgH1B,mBAAgB,KACjB,KAAKQ,cA6Ed,SAAkBC,GAChB,MAAoB,kBAANA,GAAwB,OAANA,EAL9BC,CAFwBD,EA1ODjC,IA4OR,gBAAiBiC,GAA8B,oBAAlBA,EAAEE,YA3O5C,KAAK/B,kBAAoBJ,MACpB,KAoOX,SAAkBiC,GAChB,MAAoB,kBAANA,EArODG,CAASpC,GAOlB,MAAM,IAAI+B,MACR,oEAPF,KAAKvB,aAAe,IAAI6B,IAAIrC,GAC5B,KAAKQ,aAAa8B,KAAO,IAAIC,gBAAgB,CAC3ChC,OAAQD,OAAOkC,SAASjC,OACxBkC,QAAS,KAAKxC,WACbyC,WAmOT,IAA4BT,EAjLlBU,gB,MAMN,OALK,KAAKC,gBACR,KAAKA,eAAgB,EACrBtC,OAAOuC,iBAAiB,UAAW,KAAKC,eACxCxC,OAAOuC,iBAAiB,eAAgB,KAAKE,gBAE3C,KAAK3C,kBACA,IAAI4C,SAAenB,IACnB,KAAKoB,YAAY,UAAW,IACjCpB,QAGFvB,OAAO4C,KAAO,SACd,KAAKxC,OAASJ,OAAO6C,KACF,QAAjB,OAAK3C,oBAAYC,IAAAA,OAAA,EAAAA,EAAEiC,WACnB,SACA,2CAEK,IAAIM,SAASnB,IAClB,KAAKuB,KAAK,UAAWvB,OAKnBV,mBACF,KAAKyB,gBACP,KAAKA,eAAgB,EACrBtC,OAAO+C,oBAAoB,UAAW,KAAKP,eAC3CxC,OAAO+C,oBAAoB,eAAgB,KAAKN,gBAE9C,KAAK9B,aACP,KAAKA,WAAa,KAClB,KAAKK,KAAK,eAEZ,KAAKI,kBAAkB4B,SAAQ,GAAa1B,KAAM,IAAlB,CAAGE,GAAe,EAChD,KAAKJ,kBAAkB6B,OAAO3B,GAC9BE,EAAO,IAAIC,MAAM,2BAIPkB,YAAYrC,EAAgBG,G,yCACxC,GAAe,YAAXH,IAAyB,KAAK4C,UAChC,MAAM,IAAIzB,MAAM,wBAElB,MAAM0B,EAAY,KAAKC,eAEvB,QADE,KAAKA,eACA,IAAIV,SAAQ,CAACnB,EAASC,K,YAC3B,KAAKJ,kBAAkBiC,IAAIF,EAAW,CAAC5B,EAASC,IAC5C,KAAK1B,kBACP,KAAKA,kBAAkB+B,YAAY,CACjCyB,QAAS,MACThC,GAAI6B,EACJ7C,OAAAA,EACAG,OAAM,eACJ0B,QAAS,KAAKxC,UACXc,MAII,QAAX,OAAKL,cAAMD,IAAAA,GAAAA,EAAE0B,YACX,CACEyB,QAAS,MACThC,GAAI6B,EACJ7C,OAAAA,EACAG,OAAAA,GAEuB,QAAzB,EAAiB,QAAjB,OAAKP,oBAAYqD,IAAAA,OAAA,EAAAA,EAAEtD,cAAMuD,IAAAA,EAAAA,EAAI,IAG1B,KAAKzC,aACG,QAAX,OAAKX,cAAMqD,IAAAA,GAAAA,EAAEC,eAMjBhD,gBACF,OAAO,KAAKC,WAGVuC,gBACF,OAA2B,OAApB,KAAKvC,WAGVI,kBACF,OAAO,KAAKD,aAGR6C,U,yCACA,KAAKvD,QACP,KAAKA,OAAOwD,cAER,KAAKvB,mBAGPX,a,yCACA,KAAK5B,0BACD,KAAK6C,YAAY,aAAc,KAEnC,KAAKvC,QACP,KAAKA,OAAOwD,QAEd,KAAK/C,sBAODgD,KACJxD,EACAyD,G,yCAKA,KAAMzD,aAAgB0D,YACpB,MAAM,IAAItC,MAAM,0CAGlB,MAAMuC,QAAkB,KAAKrB,YAAY,OAAQ,CAC/CtC,KAAAA,EACAyD,QAAAA,IAIF,MAAO,CACLG,UAHgBC,IAAAA,OAAYF,EAASC,WAIrCvD,UAHgB,IAAIF,EAAAA,UAAUwD,EAAStD,eAOrCyD,gBAAgBC,G,yCACpB,MAAMJ,QAAkB,KAAKrB,YAAY,kBAAmB,CAC1D0B,QAASH,IAAAA,OAAYE,EAAYE,sBAE7BL,EAAYC,IAAAA,OAAYF,EAASC,WACjCvD,EAAY,IAAIF,EAAAA,UAAUwD,EAAStD,WAEzC,OADA0D,EAAYG,aAAa7D,EAAWuD,GAC7BG,KAGHI,oBACJC,G,yCAEA,MAAMT,QAAkB,KAAKrB,YAAY,sBAAuB,CAC9D+B,SAAUD,EAAaE,KAAKC,GAAOV,IAAAA,OAAYU,EAAGN,wBAE9CO,EAAab,EAASa,WAAWF,KAAKG,GAAMZ,IAAAA,OAAYY,KACxDpE,EAAY,IAAIF,EAAAA,UAAUwD,EAAStD,WAKzC,OAJA+D,EAAeA,EAAaE,KAAI,CAACC,EAAIG,KACnCH,EAAGL,aAAa7D,EAAWmE,EAAWE,IAC/BH,QAKLI,cACJtE,G,yCAEA,KAAMA,aAAqBqD,YACzB,MAAM,IAAItC,MAAM,0CAQlB,aANwB,KAAKkB,YAAY,gBAAiB,CACxDjC,UAAAA,U,orDChPC,MAAMuE,EAAYC,GACnBC,EAAAA,OAAAA,SAAgBD,GACXA,EACEA,aAAenB,WACjBoB,EAAAA,OAAAA,KAAYD,EAAIE,OAAQF,EAAIG,WAAYH,EAAII,YAE5CH,EAAAA,OAAAA,KAAYD,G,qQCRvBK,EAAiBC,EAEjB,SAASA,EAAOC,EAAKC,GACnB,IAAKD,EACH,MAAM,IAAIhE,MAAMiE,GAAO,oBAG3BF,EAAOG,MAAQ,SAAqBC,EAAGC,EAAGH,GACxC,GAAIE,GAAKC,EACP,MAAM,IAAIpE,MAAMiE,GAAQ,qBAAuBE,EAAI,OAASC,I,mBCTnC,oBAAlBC,OAAOC,OAEhBC,EAAAA,QAAiB,SAAkBC,EAAMC,GACnCA,IACFD,EAAKE,OAASD,EACdD,EAAKG,UAAYN,OAAOC,OAAOG,EAAUE,UAAW,CAClD3G,YAAa,CACX4G,MAAOJ,EACPK,YAAY,EACZC,UAAU,EACVC,cAAc,OAOtBR,EAAAA,QAAiB,SAAkBC,EAAMC,GACvC,GAAIA,EAAW,CACbD,EAAKE,OAASD,EACd,IAAIO,EAAW,aACfA,EAASL,UAAYF,EAAUE,UAC/BH,EAAKG,UAAY,IAAIK,EACrBR,EAAKG,UAAU3G,YAAcwG,ICrBnC,IAAIT,EAASkB,EACTC,EAAWC,EAAAA,QAIf,SAASC,EAAgBnB,EAAKoB,GAC5B,OAAqC,SAAZ,MAApBpB,EAAIqB,WAAWD,QAGhBA,EAAI,GAAKA,EAAI,GAAKpB,EAAIsB,SAGkB,SAAZ,MAAxBtB,EAAIqB,WAAWD,EAAI,KA0D7B,SAASG,EAAMC,GAKb,OAJWA,IAAM,GACLA,IAAM,EAAK,MACXA,GAAK,EAAK,UACN,IAAJA,IAAa,MACV,EAgBjB,SAASC,EAAMC,GACb,OAAoB,IAAhBA,EAAKJ,OACA,IAAMI,EAENA,EAIX,SAASC,EAAMD,GACb,OAAoB,IAAhBA,EAAKJ,OACA,IAAMI,EACU,IAAhBA,EAAKJ,OACL,KAAOI,EACS,IAAhBA,EAAKJ,OACL,MAAQI,EACQ,IAAhBA,EAAKJ,OACL,OAASI,EACO,IAAhBA,EAAKJ,OACL,QAAUI,EACM,IAAhBA,EAAKJ,OACL,SAAWI,EACK,IAAhBA,EAAKJ,OACL,UAAYI,EAEZA,EAhHKE,EAAAA,SAAGX,EAyDJW,EAAAA,QA7Cf,SAAiB5B,EAAK6B,GACpB,GAAIC,MAAMC,QAAQ/B,GAChB,OAAOA,EAAIgC,QACb,IAAKhC,EACH,MAAO,GACT,IAAIiC,EAAM,GACV,GAAmB,kBAARjC,EACT,GAAK6B,GAyBE,GAAY,QAARA,EAIT,KAHA7B,EAAMA,EAAIkC,QAAQ,eAAgB,KAC1BZ,OAAS,IAAM,IACrBtB,EAAM,IAAMA,GACToB,EAAI,EAAGA,EAAIpB,EAAIsB,OAAQF,GAAK,EAC/Ba,EAAIE,KAAKC,SAASpC,EAAIoB,GAAKpB,EAAIoB,EAAI,GAAI,UAxBzC,IADA,IAAIiB,EAAI,EACCjB,EAAI,EAAGA,EAAIpB,EAAIsB,OAAQF,IAAK,CACnC,IAAIkB,EAAItC,EAAIqB,WAAWD,GACnBkB,EAAI,IACNL,EAAII,KAAOC,EACFA,EAAI,MACbL,EAAII,KAAQC,GAAK,EAAK,IACtBL,EAAII,KAAY,GAAJC,EAAU,KACbnB,EAAgBnB,EAAKoB,IAC9BkB,EAAI,QAAgB,KAAJA,IAAe,KAA6B,KAAtBtC,EAAIqB,aAAaD,IACvDa,EAAII,KAAQC,GAAK,GAAM,IACvBL,EAAII,KAASC,GAAK,GAAM,GAAM,IAC9BL,EAAII,KAASC,GAAK,EAAK,GAAM,IAC7BL,EAAII,KAAY,GAAJC,EAAU,MAEtBL,EAAII,KAAQC,GAAK,GAAM,IACvBL,EAAII,KAASC,GAAK,EAAK,GAAM,IAC7BL,EAAII,KAAY,GAAJC,EAAU,UAW5B,IAAKlB,EAAI,EAAGA,EAAIpB,EAAIsB,OAAQF,IAC1Ba,EAAIb,GAAc,EAATpB,EAAIoB,GAEjB,OAAOa,GAUIL,EAAAA,MANb,SAAe5B,GAEb,IADA,IAAIiC,EAAM,GACDb,EAAI,EAAGA,EAAIpB,EAAIsB,OAAQF,IAC9Ba,GAAOR,EAAMzB,EAAIoB,GAAG1E,SAAS,KAC/B,OAAOuF,GAWIL,EAAAA,MAAGL,EAYDK,EAAAA,QAVf,SAAiB5B,EAAKuC,GAEpB,IADA,IAAIN,EAAM,GACDb,EAAI,EAAGA,EAAIpB,EAAIsB,OAAQF,IAAK,CACnC,IAAII,EAAIxB,EAAIoB,GACG,WAAXmB,IACFf,EAAID,EAAMC,IACZS,GAAON,EAAMH,EAAE9E,SAAS,KAE1B,OAAOuF,GAUIL,EAAAA,MAAGH,EAoBHG,EAAAA,MAAGD,EAgBFC,EAAAA,OAdd,SAAgB5B,EAAKwC,EAAOC,EAAKF,GAC/B,IAAIG,EAAMD,EAAMD,EAChB1C,EAAO4C,EAAM,IAAM,GAEnB,IADA,IAAIT,EAAM,IAAIH,MAAMY,EAAM,GACjBtB,EAAI,EAAGuB,EAAIH,EAAOpB,EAAIa,EAAIX,OAAQF,IAAKuB,GAAK,EAAG,CACtD,IAAInB,EAEFA,EADa,QAAXe,EACGvC,EAAI2C,IAAM,GAAO3C,EAAI2C,EAAI,IAAM,GAAO3C,EAAI2C,EAAI,IAAM,EAAK3C,EAAI2C,EAAI,GAEjE3C,EAAI2C,EAAI,IAAM,GAAO3C,EAAI2C,EAAI,IAAM,GAAO3C,EAAI2C,EAAI,IAAM,EAAK3C,EAAI2C,GACxEV,EAAIb,GAAKI,IAAM,EAEjB,OAAOS,GAsBML,EAAAA,QAlBf,SAAiB5B,EAAKuC,GAEpB,IADA,IAAIN,EAAM,IAAIH,MAAmB,EAAb9B,EAAIsB,QACfF,EAAI,EAAGuB,EAAI,EAAGvB,EAAIpB,EAAIsB,OAAQF,IAAKuB,GAAK,EAAG,CAClD,IAAIC,EAAI5C,EAAIoB,GACG,QAAXmB,GACFN,EAAIU,GAAKC,IAAM,GACfX,EAAIU,EAAI,GAAMC,IAAM,GAAM,IAC1BX,EAAIU,EAAI,GAAMC,IAAM,EAAK,IACzBX,EAAIU,EAAI,GAAS,IAAJC,IAEbX,EAAIU,EAAI,GAAKC,IAAM,GACnBX,EAAIU,EAAI,GAAMC,IAAM,GAAM,IAC1BX,EAAIU,EAAI,GAAMC,IAAM,EAAK,IACzBX,EAAIU,GAAS,IAAJC,GAGb,OAAOX,GAOKL,EAAAA,OAHd,SAAgBJ,EAAGqB,GACjB,OAAQrB,IAAMqB,EAAMrB,GAAM,GAAKqB,GAOnBjB,EAAAA,OAHd,SAAgBJ,EAAGqB,GACjB,OAAQrB,GAAKqB,EAAMrB,IAAO,GAAKqB,GAOpBjB,EAAAA,MAHb,SAAe3F,EAAG4G,GAChB,OAAQ5G,EAAI4G,IAAO,GAONjB,EAAAA,QAHf,SAAiB3F,EAAG4G,EAAGP,GACrB,OAAQrG,EAAI4G,EAAIP,IAAO,GAOVV,EAAAA,QAHf,SAAiB3F,EAAG4G,EAAGP,EAAGQ,GACxB,OAAQ7G,EAAI4G,EAAIP,EAAIQ,IAAO,GAOdlB,EAAAA,QAHf,SAAiB3F,EAAG4G,EAAGP,EAAGQ,EAAG3I,GAC3B,OAAQ8B,EAAI4G,EAAIP,EAAIQ,EAAI3I,IAAO,GAapByH,EAAAA,MATb,SAAemB,EAAKC,EAAKC,EAAIC,GAC3B,IAAIC,EAAKJ,EAAIC,GAGTI,EAAMF,EAFDH,EAAIC,EAAM,KAEI,EACnBK,GAAMD,EAAKF,EAAK,EAAI,GAAKD,EAAKE,EAClCJ,EAAIC,GAAOK,IAAO,EAClBN,EAAIC,EAAM,GAAKI,GASDxB,EAAAA,SALhB,SAAkBqB,EAAIC,EAAIC,EAAIG,GAG5B,OAFUJ,EAAKI,IAAQ,EACRJ,EAAK,EAAI,GAAKD,EAAKE,IACpB,GAQAvB,EAAAA,SAJhB,SAAkBqB,EAAIC,EAAIC,EAAIG,GAE5B,OADSJ,EAAKI,IACA,GAiBE1B,EAAAA,WAblB,SAAoBqB,EAAIC,EAAIC,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,GAC9C,IAAIC,EAAQ,EACRP,EAAKF,EAST,OAPAS,IADAP,EAAMA,EAAKE,IAAQ,GACLJ,EAAK,EAAI,EAEvBS,IADAP,EAAMA,EAAKI,IAAQ,GACLA,EAAK,EAAI,EAIdP,EAAKE,EAAKI,EAAKE,GAFxBE,IADAP,EAAMA,EAAKM,IAAQ,GACLA,EAAK,EAAI,KAGT,GAQE9B,EAAAA,WAJlB,SAAoBqB,EAAIC,EAAIC,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,GAE9C,OADSR,EAAKI,EAAKE,EAAKE,IACV,GAmBE9B,EAAAA,WAflB,SAAoBqB,EAAIC,EAAIC,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIE,EAAIC,GACtD,IAAIF,EAAQ,EACRP,EAAKF,EAWT,OATAS,IADAP,EAAMA,EAAKE,IAAQ,GACLJ,EAAK,EAAI,EAEvBS,IADAP,EAAMA,EAAKI,IAAQ,GACLA,EAAK,EAAI,EAEvBG,IADAP,EAAMA,EAAKM,IAAQ,GACLA,EAAK,EAAI,EAIdT,EAAKE,EAAKI,EAAKE,EAAKG,GAF7BD,IADAP,EAAMA,EAAKS,IAAQ,GACLA,EAAK,EAAI,KAGT,GASEjC,EAAAA,WALlB,SAAoBqB,EAAIC,EAAIC,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIE,EAAIC,GAGtD,OAFSX,EAAKI,EAAKE,EAAKE,EAAKG,IAEf,GAQCjC,EAAAA,UAJjB,SAAmBqB,EAAIC,EAAIY,GAEzB,OADSZ,GAAO,GAAKY,EAASb,IAAOa,KACxB,GAQElC,EAAAA,UAJjB,SAAmBqB,EAAIC,EAAIY,GAEzB,OADSb,GAAO,GAAKa,EAASZ,IAAOY,KACxB,GAOClC,EAAAA,SAHhB,SAAkBqB,EAAIC,EAAIY,GACxB,OAAOb,IAAOa,GAQhBlC,EAAAA,SAJA,SAAkBqB,EAAIC,EAAIY,GAExB,OADSb,GAAO,GAAKa,EAASZ,IAAOY,KACxB,G,SCjRXlC,EAAQZ,EACRlB,EAASoB,EAEb,SAAS6C,IACPC,KAAKC,QAAU,KACfD,KAAKE,aAAe,EACpBF,KAAKG,UAAYH,KAAKjK,YAAYoK,UAClCH,KAAKI,QAAUJ,KAAKjK,YAAYqK,QAChCJ,KAAKK,aAAeL,KAAKjK,YAAYsK,aACrCL,KAAKM,UAAYN,KAAKjK,YAAYuK,UAAY,EAC9CN,KAAKzB,OAAS,MAEdyB,KAAKO,QAAUP,KAAKG,UAAY,EAChCH,KAAKQ,SAAWR,KAAKG,UAAY,GAElBM,EAAAA,UAAGV,EAEpBA,EAAUrD,UAAUgE,OAAS,SAAgB1E,EAAK6B,GAUhD,GARA7B,EAAM4B,EAAM+C,QAAQ3E,EAAK6B,GACpBmC,KAAKC,QAGRD,KAAKC,QAAUD,KAAKC,QAAQW,OAAO5E,GAFnCgE,KAAKC,QAAUjE,EAGjBgE,KAAKE,cAAgBlE,EAAIsB,OAGrB0C,KAAKC,QAAQ3C,QAAU0C,KAAKO,QAAS,CAIvC,IAAIpE,GAHJH,EAAMgE,KAAKC,SAGC3C,OAAS0C,KAAKO,QAC1BP,KAAKC,QAAUjE,EAAIgC,MAAMhC,EAAIsB,OAASnB,EAAGH,EAAIsB,QACjB,IAAxB0C,KAAKC,QAAQ3C,SACf0C,KAAKC,QAAU,MAEjBjE,EAAM4B,EAAMiD,OAAO7E,EAAK,EAAGA,EAAIsB,OAASnB,EAAG6D,KAAKzB,QAChD,IAAK,IAAInB,EAAI,EAAGA,EAAIpB,EAAIsB,OAAQF,GAAK4C,KAAKQ,SACxCR,KAAKc,QAAQ9E,EAAKoB,EAAGA,EAAI4C,KAAKQ,UAGlC,OAAOR,MAGTD,EAAUrD,UAAUqE,OAAS,SAAgBlD,GAI3C,OAHAmC,KAAKU,OAAOV,KAAKgB,QACjBlF,EAAwB,OAAjBkE,KAAKC,SAELD,KAAKiB,QAAQpD,IAGtBkC,EAAUrD,UAAUsE,KAAO,WACzB,IAAItC,EAAMsB,KAAKE,aACXgB,EAAQlB,KAAKO,QACb5B,EAAIuC,GAAUxC,EAAMsB,KAAKM,WAAaY,EACtCjD,EAAM,IAAIH,MAAMa,EAAIqB,KAAKM,WAC7BrC,EAAI,GAAK,IACT,IAAK,IAAIb,EAAI,EAAGA,EAAIuB,EAAGvB,IACrBa,EAAIb,GAAK,EAIX,GADAsB,IAAQ,EACY,QAAhBsB,KAAKzB,OAAkB,CACzB,IAAK,IAAI4C,EAAI,EAAGA,EAAInB,KAAKM,UAAWa,IAClClD,EAAIb,KAAO,EAEba,EAAIb,KAAO,EACXa,EAAIb,KAAO,EACXa,EAAIb,KAAO,EACXa,EAAIb,KAAO,EACXa,EAAIb,KAAQsB,IAAQ,GAAM,IAC1BT,EAAIb,KAAQsB,IAAQ,GAAM,IAC1BT,EAAIb,KAAQsB,IAAQ,EAAK,IACzBT,EAAIb,KAAa,IAANsB,OAWX,IATAT,EAAIb,KAAa,IAANsB,EACXT,EAAIb,KAAQsB,IAAQ,EAAK,IACzBT,EAAIb,KAAQsB,IAAQ,GAAM,IAC1BT,EAAIb,KAAQsB,IAAQ,GAAM,IAC1BT,EAAIb,KAAO,EACXa,EAAIb,KAAO,EACXa,EAAIb,KAAO,EACXa,EAAIb,KAAO,EAEN+D,EAAI,EAAGA,EAAInB,KAAKM,UAAWa,IAC9BlD,EAAIb,KAAO,EAGf,OAAOa,G,cCvFLmD,EADQpE,EACOoE,OAYnB,SAASC,EAAKC,EAAGC,EAAGC,GAClB,OAAQF,EAAIC,GAAQD,EAAKE,EAI3B,SAASC,EAAMH,EAAGC,EAAGC,GACnB,OAAQF,EAAIC,EAAMD,EAAIE,EAAMD,EAAIC,EAIlC,SAASE,EAAIJ,EAAGC,EAAGC,GACjB,OAAOF,EAAIC,EAAIC,EAbLf,EAAAA,KARZ,SAAcrF,EAAGkG,EAAGC,EAAGC,GACrB,OAAU,IAANpG,EACKiG,EAAKC,EAAGC,EAAGC,GACV,IAANpG,GAAiB,IAANA,EACNsG,EAAIJ,EAAGC,EAAGC,GACT,IAANpG,EACKqG,EAAMH,EAAGC,EAAGC,QADrB,GAQUf,EAAAA,KAAGY,EAKFZ,EAAAA,MAAGgB,EAKLhB,EAAAA,IAAGiB,EAKAjB,EAAAA,OAHd,SAAgBa,GACd,OAAOF,EAAOE,EAAG,GAAKF,EAAOE,EAAG,IAAMF,EAAOE,EAAG,KAOpCb,EAAAA,OAHd,SAAgBa,GACd,OAAOF,EAAOE,EAAG,GAAKF,EAAOE,EAAG,IAAMF,EAAOE,EAAG,KAOpCb,EAAAA,OAHd,SAAgBa,GACd,OAAOF,EAAOE,EAAG,GAAKF,EAAOE,EAAG,IAAOA,IAAM,GAO/Cb,EAAAA,OAHA,SAAgBa,GACd,OAAOF,EAAOE,EAAG,IAAMF,EAAOE,EAAG,IAAOA,IAAM,IC5ChD,IAAI1D,EAAQZ,EACRyD,EAASvD,EACTyE,EAAYC,EAEZC,EAASjE,EAAMiE,OACfC,EAAQlE,EAAMkE,MACdC,EAAUnE,EAAMmE,QAChBC,EAAOL,EAAUK,KACjBjC,EAAYU,EAAOV,UAEnBkC,EAAS,CACX,WAAY,WACZ,WAAY,YAGd,SAASC,IACP,KAAMlC,gBAAgBkC,GACpB,OAAO,IAAIA,EAEbnC,EAAUoC,KAAKnC,MACfA,KAAKoC,EAAI,CACP,WAAY,WAAY,WACxB,UAAY,YACdpC,KAAKqC,EAAI,IAAIvE,MAAM,IAGrBF,EAAMX,SAASiF,EAAMnC,G,IACrBuC,GAAiBJ,EAEjBA,EAAK/B,UAAY,IACjB+B,EAAK9B,QAAU,IACf8B,EAAK7B,aAAe,GACpB6B,EAAK5B,UAAY,GAEjB4B,EAAKxF,UAAUoE,QAAU,SAAiB9E,EAAKwC,GAG7C,IAFA,IAAI6D,EAAIrC,KAAKqC,EAEJjF,EAAI,EAAGA,EAAI,GAAIA,IACtBiF,EAAEjF,GAAKpB,EAAIwC,EAAQpB,GAErB,KAAMA,EAAIiF,EAAE/E,OAAQF,IAClBiF,EAAEjF,GAAKyE,EAAOQ,EAAEjF,EAAI,GAAKiF,EAAEjF,EAAI,GAAKiF,EAAEjF,EAAI,IAAMiF,EAAEjF,EAAI,IAAK,GAE7D,IAAInF,EAAI+H,KAAKoC,EAAE,GACXvD,EAAImB,KAAKoC,EAAE,GACX9D,EAAI0B,KAAKoC,EAAE,GACXtD,EAAIkB,KAAKoC,EAAE,GACXjM,EAAI6J,KAAKoC,EAAE,GAEf,IAAKhF,EAAI,EAAGA,EAAIiF,EAAE/E,OAAQF,IAAK,CAC7B,IAAIhC,KAAOgC,EAAI,IACX+D,EAAIY,EAAQF,EAAO5J,EAAG,GAAI+J,EAAK5G,EAAGyD,EAAGP,EAAGQ,GAAI3I,EAAGkM,EAAEjF,GAAI6E,EAAO7G,IAChEjF,EAAI2I,EACJA,EAAIR,EACJA,EAAIuD,EAAOhD,EAAG,IACdA,EAAI5G,EACJA,EAAIkJ,EAGNnB,KAAKoC,EAAE,GAAKN,EAAM9B,KAAKoC,EAAE,GAAInK,GAC7B+H,KAAKoC,EAAE,GAAKN,EAAM9B,KAAKoC,EAAE,GAAIvD,GAC7BmB,KAAKoC,EAAE,GAAKN,EAAM9B,KAAKoC,EAAE,GAAI9D,GAC7B0B,KAAKoC,EAAE,GAAKN,EAAM9B,KAAKoC,EAAE,GAAItD,GAC7BkB,KAAKoC,EAAE,GAAKN,EAAM9B,KAAKoC,EAAE,GAAIjM,IAG/B+L,EAAKxF,UAAUuE,QAAU,SAAgBpD,GACvC,MAAY,QAARA,EACKD,EAAM2E,QAAQvC,KAAKoC,EAAG,OAEtBxE,EAAM4E,QAAQxC,KAAKoC,EAAG,QCtEjC,IAAIxE,GAAQZ,EACRyD,GAASvD,EACTyE,GAAYC,EACZ9F,GAAS2G,EAETX,GAAQlE,GAAMkE,MACdY,GAAU9E,GAAM8E,QAChBX,GAAUnE,GAAMmE,QAChBV,GAAOM,GAAUN,KACjBI,GAAQE,GAAUF,MAClBkB,GAAShB,GAAUgB,OACnBC,GAASjB,GAAUiB,OACnBC,GAASlB,GAAUkB,OACnBC,GAASnB,GAAUmB,OAEnB/C,GAAYU,GAAOV,UAEnBgD,GAAW,CACb,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,UAAY,UAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,YAGtC,SAASC,KACP,KAAMhD,gBAAgBgD,IACpB,OAAO,IAAIA,GAEbjD,GAAUoC,KAAKnC,MACfA,KAAKoC,EAAI,CACP,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,YAEtCpC,KAAKrB,EAAIoE,GACT/C,KAAKqC,EAAI,IAAIvE,MAAM,IAErBF,GAAMX,SAAS+F,GAAQjD,I,IACvBkD,GAAiBD,GAEjBA,GAAO7C,UAAY,IACnB6C,GAAO5C,QAAU,IACjB4C,GAAO3C,aAAe,IACtB2C,GAAO1C,UAAY,GAEnB0C,GAAOtG,UAAUoE,QAAU,SAAiB9E,EAAKwC,GAG/C,IAFA,IAAI6D,EAAIrC,KAAKqC,EAEJjF,EAAI,EAAGA,EAAI,GAAIA,IACtBiF,EAAEjF,GAAKpB,EAAIwC,EAAQpB,GACrB,KAAOA,EAAIiF,EAAE/E,OAAQF,IACnBiF,EAAEjF,GAAKsF,GAAQI,GAAOT,EAAEjF,EAAI,IAAKiF,EAAEjF,EAAI,GAAIyF,GAAOR,EAAEjF,EAAI,KAAMiF,EAAEjF,EAAI,KAEtE,IAAInF,EAAI+H,KAAKoC,EAAE,GACXvD,EAAImB,KAAKoC,EAAE,GACX9D,EAAI0B,KAAKoC,EAAE,GACXtD,EAAIkB,KAAKoC,EAAE,GACXjM,EAAI6J,KAAKoC,EAAE,GACXc,EAAIlD,KAAKoC,EAAE,GACXe,EAAInD,KAAKoC,EAAE,GACXA,EAAIpC,KAAKoC,EAAE,GAGf,IADAtG,GAAOkE,KAAKrB,EAAErB,SAAW+E,EAAE/E,QACtBF,EAAI,EAAGA,EAAIiF,EAAE/E,OAAQF,IAAK,CAC7B,IAAIgG,EAAKrB,GAAQK,EAAGQ,GAAOzM,GAAIkL,GAAKlL,EAAG+M,EAAGC,GAAInD,KAAKrB,EAAEvB,GAAIiF,EAAEjF,IACvDiG,EAAKvB,GAAMa,GAAO1K,GAAIwJ,GAAMxJ,EAAG4G,EAAGP,IACtC8D,EAAIe,EACJA,EAAID,EACJA,EAAI/M,EACJA,EAAI2L,GAAMhD,EAAGsE,GACbtE,EAAIR,EACJA,EAAIO,EACJA,EAAI5G,EACJA,EAAI6J,GAAMsB,EAAIC,GAGhBrD,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAInK,GAC7B+H,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAIvD,GAC7BmB,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAI9D,GAC7B0B,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAItD,GAC7BkB,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAIjM,GAC7B6J,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAIc,GAC7BlD,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAIe,GAC7BnD,KAAKoC,EAAE,GAAKN,GAAM9B,KAAKoC,EAAE,GAAIA,IAG/BY,GAAOtG,UAAUuE,QAAU,SAAgBpD,GACzC,MAAY,QAARA,EACKD,GAAM2E,QAAQvC,KAAKoC,EAAG,OAEtBxE,GAAM4E,QAAQxC,KAAKoC,EAAG,QCrGjC,IAAIxE,GAAQZ,EACRgG,GAAS9F,GAEb,SAASoG,KACP,KAAMtD,gBAAgBsD,IACpB,OAAO,IAAIA,GAEbN,GAAOb,KAAKnC,MACZA,KAAKoC,EAAI,CACP,WAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,YAExCxE,GAAMX,SAASqG,GAAQN,I,IACvBO,GAAiBD,GAEjBA,GAAOnD,UAAY,IACnBmD,GAAOlD,QAAU,IACjBkD,GAAOjD,aAAe,IACtBiD,GAAOhD,UAAY,GAEnBgD,GAAO5G,UAAUuE,QAAU,SAAgBpD,GAEzC,MAAY,QAARA,EACKD,GAAM2E,QAAQvC,KAAKoC,EAAEpE,MAAM,EAAG,GAAI,OAElCJ,GAAM4E,QAAQxC,KAAKoC,EAAEpE,MAAM,EAAG,GAAI,QCzB7C,IAAIJ,GAAQZ,EACRyD,GAASvD,EACTpB,GAAS8F,EAET4B,GAAY5F,GAAM4F,UAClBC,GAAY7F,GAAM6F,UAClBC,GAAW9F,GAAM8F,SACjBC,GAAW/F,GAAM+F,SACjBC,GAAQhG,GAAMgG,MACdC,GAAWjG,GAAMiG,SACjBC,GAAWlG,GAAMkG,SACjBC,GAAanG,GAAMmG,WACnBC,GAAapG,GAAMoG,WACnBC,GAAarG,GAAMqG,WACnBC,GAAatG,GAAMsG,WAEnBnE,GAAYU,GAAOV,UAEnBoE,GAAW,CACb,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,UAAY,UACpC,UAAY,WAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,UAAY,WACpC,UAAY,WAAY,UAAY,UACpC,UAAY,UAAY,UAAY,WACpC,WAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,UAAY,WAAY,YAGtC,SAASC,KACP,KAAMpE,gBAAgBoE,IACpB,OAAO,IAAIA,GAEbrE,GAAUoC,KAAKnC,MACfA,KAAKoC,EAAI,CACP,WAAY,WACZ,WAAY,WACZ,WAAY,WACZ,WAAY,WACZ,WAAY,WACZ,WAAY,UACZ,UAAY,WACZ,WAAY,WACdpC,KAAKrB,EAAIwF,GACTnE,KAAKqC,EAAI,IAAIvE,MAAM,KAErBF,GAAMX,SAASmH,GAAQrE,I,IACvBsE,GAAiBD,GAsIjB,SAASE,GAAQC,EAAIC,EAAIC,EAAIC,EAAIC,GAC/B,IAAIxI,EAAKoI,EAAKE,GAASF,EAAMI,EAG7B,OAFIxI,EAAI,IACNA,GAAK,YACAA,EAGT,SAASyI,GAAQL,EAAIC,EAAIC,EAAIC,EAAIC,EAAIE,GACnC,IAAI1I,EAAKqI,EAAKE,GAASF,EAAMK,EAG7B,OAFI1I,EAAI,IACNA,GAAK,YACAA,EAGT,SAAS2I,GAASP,EAAIC,EAAIC,EAAIC,EAAIC,GAChC,IAAIxI,EAAKoI,EAAKE,EAAOF,EAAKI,EAAOF,EAAKE,EAGtC,OAFIxI,EAAI,IACNA,GAAK,YACAA,EAGT,SAAS4I,GAASR,EAAIC,EAAIC,EAAIC,EAAIC,EAAIE,GACpC,IAAI1I,EAAKqI,EAAKE,EAAOF,EAAKK,EAAOH,EAAKG,EAGtC,OAFI1I,EAAI,IACNA,GAAK,YACAA,EAGT,SAAS6I,GAAUT,EAAIC,GACrB,IAIIrI,EAJQqH,GAAUe,EAAIC,EAAI,IAClBhB,GAAUgB,EAAID,EAAI,GAClBf,GAAUgB,EAAID,EAAI,GAK9B,OAFIpI,EAAI,IACNA,GAAK,YACAA,EAGT,SAAS8I,GAAUV,EAAIC,GACrB,IAIIrI,EAJQsH,GAAUc,EAAIC,EAAI,IAClBf,GAAUe,EAAID,EAAI,GAClBd,GAAUe,EAAID,EAAI,GAK9B,OAFIpI,EAAI,IACNA,GAAK,YACAA,EAGT,SAAS+I,GAAUX,EAAIC,GACrB,IAIIrI,EAJQqH,GAAUe,EAAIC,EAAI,IAClBhB,GAAUe,EAAIC,EAAI,IAClBhB,GAAUgB,EAAID,EAAI,GAK9B,OAFIpI,EAAI,IACNA,GAAK,YACAA,EAGT,SAASgJ,GAAUZ,EAAIC,GACrB,IAIIrI,EAJQsH,GAAUc,EAAIC,EAAI,IAClBf,GAAUc,EAAIC,EAAI,IAClBf,GAAUe,EAAID,EAAI,GAK9B,OAFIpI,EAAI,IACNA,GAAK,YACAA,EAGT,SAASiJ,GAAUb,EAAIC,GACrB,IAIIrI,EAJQqH,GAAUe,EAAIC,EAAI,GAClBhB,GAAUe,EAAIC,EAAI,GAClBd,GAASa,EAAIC,EAAI,GAK7B,OAFIrI,EAAI,IACNA,GAAK,YACAA,EAGT,SAASkJ,GAAUd,EAAIC,GACrB,IAIIrI,EAJQsH,GAAUc,EAAIC,EAAI,GAClBf,GAAUc,EAAIC,EAAI,GAClBb,GAASY,EAAIC,EAAI,GAK7B,OAFIrI,EAAI,IACNA,GAAK,YACAA,EAGT,SAASmJ,GAAUf,EAAIC,GACrB,IAIIrI,EAJQqH,GAAUe,EAAIC,EAAI,IAClBhB,GAAUgB,EAAID,EAAI,IAClBb,GAASa,EAAIC,EAAI,GAK7B,OAFIrI,EAAI,IACNA,GAAK,YACAA,EAGT,SAASoJ,GAAUhB,EAAIC,GACrB,IAIIrI,EAJQsH,GAAUc,EAAIC,EAAI,IAClBf,GAAUe,EAAID,EAAI,IAClBZ,GAASY,EAAIC,EAAI,GAK7B,OAFIrI,EAAI,IACNA,GAAK,YACAA,EArPTiI,GAAOjE,UAAY,KACnBiE,GAAOhE,QAAU,IACjBgE,GAAO/D,aAAe,IACtB+D,GAAO9D,UAAY,IAEnB8D,GAAO1H,UAAU8I,cAAgB,SAAuBxJ,EAAKwC,GAI3D,IAHA,IAAI6D,EAAIrC,KAAKqC,EAGJjF,EAAI,EAAGA,EAAI,GAAIA,IACtBiF,EAAEjF,GAAKpB,EAAIwC,EAAQpB,GACrB,KAAOA,EAAIiF,EAAE/E,OAAQF,GAAK,EAAG,CAC3B,IAAIqI,EAAQH,GAAUjD,EAAEjF,EAAI,GAAIiF,EAAEjF,EAAI,IAClCsI,EAAQH,GAAUlD,EAAEjF,EAAI,GAAIiF,EAAEjF,EAAI,IAClCuI,EAAQtD,EAAEjF,EAAI,IACdwI,EAAQvD,EAAEjF,EAAI,IACdyI,EAAQT,GAAU/C,EAAEjF,EAAI,IAAKiF,EAAEjF,EAAI,KACnC0I,EAAQT,GAAUhD,EAAEjF,EAAI,IAAKiF,EAAEjF,EAAI,KACnC2I,EAAQ1D,EAAEjF,EAAI,IACd4I,EAAQ3D,EAAEjF,EAAI,IAElBiF,EAAEjF,GAAK2G,GACL0B,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,GACT3D,EAAEjF,EAAI,GAAK4G,GACTyB,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,KAIb5B,GAAO1H,UAAUoE,QAAU,SAAiB9E,EAAKwC,GAC/CwB,KAAKwF,cAAcxJ,EAAKwC,GAExB,IAAI6D,EAAIrC,KAAKqC,EAETpD,EAAKe,KAAKoC,EAAE,GACZlD,EAAKc,KAAKoC,EAAE,GACZjD,EAAKa,KAAKoC,EAAE,GACZ9C,EAAKU,KAAKoC,EAAE,GACZ7C,EAAKS,KAAKoC,EAAE,GACZ5C,EAAKQ,KAAKoC,EAAE,GACZ3C,EAAKO,KAAKoC,EAAE,GACZ1C,EAAKM,KAAKoC,EAAE,GACZxC,EAAKI,KAAKoC,EAAE,GACZvC,EAAKG,KAAKoC,EAAE,GACZ6D,EAAKjG,KAAKoC,EAAE,IACZ8D,EAAKlG,KAAKoC,EAAE,IACZ+D,EAAKnG,KAAKoC,EAAE,IACZgE,EAAKpG,KAAKoC,EAAE,IACZiE,EAAKrG,KAAKoC,EAAE,IACZkE,EAAKtG,KAAKoC,EAAE,IAEhBtG,GAAOkE,KAAKrB,EAAErB,SAAW+E,EAAE/E,QAC3B,IAAK,IAAIF,EAAI,EAAGA,EAAIiF,EAAE/E,OAAQF,GAAK,EAAG,CACpC,IAAIqI,EAAQY,EACRX,EAAQY,EACRX,EAAQT,GAAUtF,EAAIC,GACtB+F,EAAQT,GAAUvF,EAAIC,GACtBgG,EAAQvB,GAAQ1E,EAAIC,EAAIoG,EAAIC,EAAIC,GAChCL,EAAQlB,GAAQhF,EAAIC,EAAIoG,EAAIC,EAAIC,EAAIC,GACpCL,EAAQ/F,KAAKrB,EAAEvB,GACf4I,EAAQhG,KAAKrB,EAAEvB,EAAI,GACnBmJ,EAAQlE,EAAEjF,GACVoJ,EAAQnE,EAAEjF,EAAI,GAEdqJ,EAAQxC,GACVwB,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPO,EAAOC,GACLE,EAAQxC,GACVuB,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPC,EAAOC,EACPO,EAAOC,GAETf,EAAQT,GAAU/F,EAAIC,GACtBwG,EAAQT,GAAUhG,EAAIC,GACtByG,EAAQb,GAAS7F,EAAIC,EAAIC,EAAIG,EAAIC,GACjCqG,EAAQb,GAAS9F,EAAIC,EAAIC,EAAIG,EAAIC,EAAIC,GAErC,IAAImH,EAAQ9C,GAAS4B,EAAOC,EAAOC,EAAOC,GACtCgB,EAAQ9C,GAAS2B,EAAOC,EAAOC,EAAOC,GAE1CS,EAAKF,EACLG,EAAKF,EAELD,EAAKF,EACLG,EAAKF,EAELD,EAAKrG,EACLsG,EAAKrG,EAELD,EAAKiE,GAASpE,EAAIC,EAAI+G,EAAOC,GAC7B7G,EAAKiE,GAASpE,EAAIA,EAAI+G,EAAOC,GAE7BjH,EAAKF,EACLG,EAAKF,EAELD,EAAKJ,EACLK,EAAKF,EAELH,EAAKF,EACLK,EAAKJ,EAELD,EAAK4E,GAAS4C,EAAOC,EAAOC,EAAOC,GACnC1H,EAAK4E,GAAS2C,EAAOC,EAAOC,EAAOC,GAGrChD,GAAM5D,KAAKoC,EAAG,EAAGnD,EAAIC,GACrB0E,GAAM5D,KAAKoC,EAAG,EAAGjD,EAAIG,GACrBsE,GAAM5D,KAAKoC,EAAG,EAAG7C,EAAIC,GACrBoE,GAAM5D,KAAKoC,EAAG,EAAG3C,EAAIC,GACrBkE,GAAM5D,KAAKoC,EAAG,EAAGxC,EAAIC,GACrB+D,GAAM5D,KAAKoC,EAAG,GAAI6D,EAAIC,GACtBtC,GAAM5D,KAAKoC,EAAG,GAAI+D,EAAIC,GACtBxC,GAAM5D,KAAKoC,EAAG,GAAIiE,EAAIC,IAGxBlC,GAAO1H,UAAUuE,QAAU,SAAgBpD,GACzC,MAAY,QAARA,EACKD,GAAM2E,QAAQvC,KAAKoC,EAAG,OAEtBxE,GAAM4E,QAAQxC,KAAKoC,EAAG,QClNjC,IAAIxE,GAAQZ,EAERoH,GAASlH,GAEb,SAAS2J,KACP,KAAM7G,gBAAgB6G,IACpB,OAAO,IAAIA,GAEbzC,GAAOjC,KAAKnC,MACZA,KAAKoC,EAAI,CACP,WAAY,WACZ,WAAY,UACZ,WAAY,UACZ,UAAY,WACZ,WAAY,WACZ,WAAY,WACZ,WAAY,WACZ,WAAY,YAEhBxE,GAAMX,SAAS4J,GAAQzC,I,IACvB0C,GAAiBD,GAEjBA,GAAO1G,UAAY,KACnB0G,GAAOzG,QAAU,IACjByG,GAAOxG,aAAe,IACtBwG,GAAOvG,UAAY,IAEnBuG,GAAOnK,UAAUuE,QAAU,SAAgBpD,GACzC,MAAY,QAARA,EACKD,GAAM2E,QAAQvC,KAAKoC,EAAEpE,MAAM,EAAG,IAAK,OAEnCJ,GAAM4E,QAAQxC,KAAKoC,EAAEpE,MAAM,EAAG,IAAK,QC/BlC+I,EAAAA,KAAG/J,GACD+J,EAAAA,OAAG7J,GACH6J,EAAAA,OAAGnF,GACHmF,EAAAA,OAAGtE,GACjBsE,EAAAA,OAAiBC,G,UCJbpJ,GAAQZ,EACRyD,GAASvD,EAET2E,GAASjE,GAAMiE,OACfC,GAAQlE,GAAMkE,MACdmF,GAAUrJ,GAAMqJ,QAChBvE,GAAU9E,GAAM8E,QAChB3C,GAAYU,GAAOV,UAEvB,SAASmH,KACP,KAAMlH,gBAAgBkH,IACpB,OAAO,IAAIA,GAEbnH,GAAUoC,KAAKnC,MAEfA,KAAKoC,EAAI,CAAE,WAAY,WAAY,WAAY,UAAY,YAC3DpC,KAAKzB,OAAS,SA0DhB,SAAS2E,GAAEiE,EAAG7F,EAAGC,EAAGC,GAClB,OAAI2F,GAAK,GACA7F,EAAIC,EAAIC,EACR2F,GAAK,GACJ7F,EAAIC,GAAQD,EAAKE,EAClB2F,GAAK,IACJ7F,GAAMC,GAAMC,EACb2F,GAAK,GACJ7F,EAAIE,EAAMD,GAAMC,EAEjBF,GAAKC,GAAMC,GAGtB,SAAS4F,GAAED,GACT,OAAIA,GAAK,GACA,EACAA,GAAK,GACL,WACAA,GAAK,GACL,WACAA,GAAK,GACL,WAEA,WAGX,SAASE,GAAGF,GACV,OAAIA,GAAK,GACA,WACAA,GAAK,GACL,WACAA,GAAK,GACL,WACAA,GAAK,GACL,WAEA,EA5FXvJ,GAAMX,SAASiK,GAAWnH,IACTuH,GAAAA,UAAGJ,GAEpBA,GAAU/G,UAAY,IACtB+G,GAAU9G,QAAU,IACpB8G,GAAU7G,aAAe,IACzB6G,GAAU5G,UAAY,GAEtB4G,GAAUxK,UAAUoE,QAAU,SAAgB9E,EAAKwC,GAWjD,IAVA,IAAI+I,EAAIvH,KAAKoC,EAAE,GACXoF,EAAIxH,KAAKoC,EAAE,GACXqF,EAAIzH,KAAKoC,EAAE,GACXsF,EAAI1H,KAAKoC,EAAE,GACXuF,EAAI3H,KAAKoC,EAAE,GACXwF,EAAKL,EACLM,EAAKL,EACLM,EAAKL,EACLM,EAAKL,EACLM,EAAKL,EACAR,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIc,EAAInG,GACND,GACEa,GAAQ6E,EAAGrE,GAAEiE,EAAGK,EAAGC,EAAGC,GAAI1L,EAAIG,GAAEgL,GAAK3I,GAAQ4I,GAAED,IAC/C/L,GAAE+L,IACJQ,GACFJ,EAAII,EACJA,EAAID,EACJA,EAAI7F,GAAO4F,EAAG,IACdA,EAAID,EACJA,EAAIS,EACJA,EAAInG,GACFD,GACEa,GAAQkF,EAAI1E,GAAE,GAAKiE,EAAGU,EAAIC,EAAIC,GAAK/L,EAAIkM,GAAGf,GAAK3I,GAAQ6I,GAAGF,IAC1DgB,GAAGhB,IACLa,GACFJ,EAAKI,EACLA,EAAKD,EACLA,EAAKlG,GAAOiG,EAAI,IAChBA,EAAKD,EACLA,EAAKI,EAEPA,EAAIhB,GAAQjH,KAAKoC,EAAE,GAAIqF,EAAGM,GAC1B/H,KAAKoC,EAAE,GAAK6E,GAAQjH,KAAKoC,EAAE,GAAIsF,EAAGM,GAClChI,KAAKoC,EAAE,GAAK6E,GAAQjH,KAAKoC,EAAE,GAAIuF,EAAGC,GAClC5H,KAAKoC,EAAE,GAAK6E,GAAQjH,KAAKoC,EAAE,GAAImF,EAAGM,GAClC7H,KAAKoC,EAAE,GAAK6E,GAAQjH,KAAKoC,EAAE,GAAIoF,EAAGM,GAClC9H,KAAKoC,EAAE,GAAK6F,GAGdf,GAAUxK,UAAUuE,QAAU,SAAgBpD,GAC5C,MAAY,QAARA,EACKD,GAAM2E,QAAQvC,KAAKoC,EAAG,UAEtBxE,GAAM4E,QAAQxC,KAAKoC,EAAG,WA0CjC,IAAIjG,GAAI,CACN,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAClD,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EACnD,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAClD,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,IAGhD+L,GAAK,CACP,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAClD,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EACnD,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAClD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAClD,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,IAGhD9M,GAAI,CACN,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EACrD,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,GACpD,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EACrD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GACpD,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAGnD+M,GAAK,CACP,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EACrD,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GACpD,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,EACrD,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EACrD,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,IC9IlDvK,GAAQZ,EACRlB,GAASoB,EAEb,SAASkL,GAAK9P,EAAM+P,EAAKxK,GACvB,KAAMmC,gBAAgBoI,IACpB,OAAO,IAAIA,GAAK9P,EAAM+P,EAAKxK,GAC7BmC,KAAKsI,KAAOhQ,EACZ0H,KAAKG,UAAY7H,EAAK6H,UAAY,EAClCH,KAAKI,QAAU9H,EAAK8H,QAAU,EAC9BJ,KAAKuI,MAAQ,KACbvI,KAAKwI,MAAQ,KAEbxI,KAAKyI,MAAM7K,GAAM+C,QAAQ0H,EAAKxK,I,IAEhC6K,GAAiBN,GAEjBA,GAAK1L,UAAU+L,MAAQ,SAAcJ,GAE/BA,EAAI/K,OAAS0C,KAAKG,YACpBkI,GAAM,IAAIrI,KAAKsI,MAAO5H,OAAO2H,GAAKtH,UACpCjF,GAAOuM,EAAI/K,QAAU0C,KAAKG,WAG1B,IAAK,IAAI/C,EAAIiL,EAAI/K,OAAQF,EAAI4C,KAAKG,UAAW/C,IAC3CiL,EAAIlK,KAAK,GAEX,IAAKf,EAAI,EAAGA,EAAIiL,EAAI/K,OAAQF,IAC1BiL,EAAIjL,IAAM,GAIZ,IAHA4C,KAAKuI,OAAQ,IAAIvI,KAAKsI,MAAO5H,OAAO2H,GAG/BjL,EAAI,EAAGA,EAAIiL,EAAI/K,OAAQF,IAC1BiL,EAAIjL,IAAM,IACZ4C,KAAKwI,OAAQ,IAAIxI,KAAKsI,MAAO5H,OAAO2H,IAGtCD,GAAK1L,UAAUgE,OAAS,SAAgB1E,EAAK6B,GAE3C,OADAmC,KAAKuI,MAAM7H,OAAO1E,EAAK6B,GAChBmC,MAGToI,GAAK1L,UAAUqE,OAAS,SAAgBlD,GAEtC,OADAmC,KAAKwI,MAAM9H,OAAOV,KAAKuI,MAAMxH,UACtBf,KAAKwI,MAAMzH,OAAOlD,I,YC7C3B,IAAIvF,EAAOqQ,EAEXrQ,EAAKsF,MAAQZ,EACb1E,EAAKmI,OAASvD,EACd5E,EAAKyO,IAAMnF,EACXtJ,EAAKgP,OAAS7E,GACdnK,EAAKoQ,KAAO1B,GAGZ1O,EAAKsQ,KAAOtQ,EAAKyO,IAAI6B,KACrBtQ,EAAKuQ,OAASvQ,EAAKyO,IAAI8B,OACvBvQ,EAAKwQ,OAASxQ,EAAKyO,IAAI+B,OACvBxQ,EAAKyQ,OAASzQ,EAAKyO,IAAIgC,OACvBzQ,EAAK0Q,OAAS1Q,EAAKyO,IAAIiC,OACvB1Q,EAAK2Q,UAAY3Q,EAAKgP,OAAO2B,U,aCb7B,IAAIC,IAAyB,EACzBC,IAAgB,EACpB,MAAMC,GAAY,CAAEC,MAAO,EAAG,QAAW,EAAGC,KAAM,EAAGC,QAAS,EAAG/R,MAAO,EAAGgS,IAAK,GAChF,IAAIC,GAAYL,GAAS,QAErBM,GAAgB,KA4BpB,MAAMC,GA3BN,WACI,IACI,MAAMC,EAAU,GAahB,GAXA,CAAC,MAAO,MAAO,OAAQ,QAAQtQ,SAASuQ,IACpC,IACI,GAA+B,SAA3B,OAAOC,UAAUD,GACjB,MAAM,IAAI9R,MAAM,iBAIxB,MAAOP,GACHoS,EAAQzL,KAAK0L,OAGjBD,EAAQtM,OACR,MAAM,IAAIvF,MAAM,WAAa6R,EAAQG,KAAK,OAE9C,GAAIC,OAAOC,aAAa,KAAMH,UAAU,SAAWE,OAAOC,aAAa,IAAM,KACzE,MAAM,IAAIlS,MAAM,yBAGxB,MAAOP,GACH,OAAOA,EAAMmD,QAEjB,OAAO,KAEauP,GACjB,IAAIC,GAQAC,IAPX,SAAWD,GACPA,EAAQ,MAAY,QACpBA,EAAQ,KAAW,OACnBA,EAAQ,QAAc,UACtBA,EAAQ,MAAY,QACpBA,EAAQ,IAAU,MALtB,CAMGA,KAAaA,GAAW,KAE3B,SAAWC,GAIPA,EAAS,cAAoB,gBAE7BA,EAAS,gBAAsB,kBAG/BA,EAAS,sBAA4B,wBAGrCA,EAAS,cAAoB,gBAE7BA,EAAS,aAAmB,eAE5BA,EAAS,QAAc,UAIvBA,EAAS,eAAqB,iBAI9BA,EAAS,cAAoB,gBAK7BA,EAAS,YAAkB,cAI3BA,EAAS,iBAAuB,mBAIhCA,EAAS,iBAAuB,mBAIhCA,EAAS,oBAA0B,sBAWnCA,EAAS,eAAqB,iBAG9BA,EAAS,mBAAyB,qBAGlCA,EAAS,cAAoB,gBAG7BA,EAAS,wBAA8B,0BAGvCA,EAAS,wBAA8B,0BAOvCA,EAAS,qBAA2B,uBAvExC,CAwEGA,KAAcA,GAAY,KAE7B,MAAMC,GAAM,mBACL,MAAMC,GACTvU,YAAYwU,GACRnO,OAAOoO,eAAexK,KAAM,UAAW,CACnCpD,YAAY,EACZD,MAAO4N,EACP1N,UAAU,IAGlB4N,KAAKC,EAAUC,GACX,MAAMC,EAAQF,EAASG,cACC,MAApBzB,GAAUwB,IACV5K,KAAK8K,mBAAmB,yBAA0B,WAAYJ,GAE9DjB,GAAYL,GAAUwB,IAG1BG,QAAQC,IAAIC,MAAMF,QAASJ,GAE/BtB,QAAe,2BAANsB,EAAM,yBAANA,EAAM,gBACX3K,KAAKyK,KAAKH,GAAOY,OAAOC,MAAOR,GAEnCrB,OAAc,2BAANqB,EAAM,yBAANA,EAAM,gBACV3K,KAAKyK,KAAKH,GAAOY,OAAOE,KAAMT,GAElCU,OAAc,2BAANV,EAAM,yBAANA,EAAM,gBACV3K,KAAKyK,KAAKH,GAAOY,OAAOI,QAASX,GAErCY,UAAU5Q,EAAS6Q,EAAMzU,GAErB,GAAIoS,GACA,OAAOnJ,KAAKuL,UAAU,iBAAkBC,EAAM,IAE7CA,IACDA,EAAOlB,GAAOmB,OAAOC,eAEpB3U,IACDA,EAAS,IAEb,MAAM4U,EAAiB,GACvBvP,OAAOwP,KAAK7U,GAAQuC,SAAS+O,IACzB,MAAM1L,EAAQ5F,EAAOsR,GACrB,IACI,GAAI1L,aAAiBtC,WAAY,CAC7B,IAAIwR,EAAM,GACV,IAAK,IAAIzO,EAAI,EAAGA,EAAIT,EAAMW,OAAQF,IAC9ByO,GAAOxB,GAAI1N,EAAMS,IAAM,GACvByO,GAAOxB,GAAe,GAAX1N,EAAMS,IAErBuO,EAAexN,KAAKkK,EAAM,iBAAmBwD,EAAM,UAGnDF,EAAexN,KAAKkK,EAAM,IAAMyD,KAAKC,UAAUpP,IAGvD,MAAOnF,GACHmU,EAAexN,KAAKkK,EAAM,IAAMyD,KAAKC,UAAUhV,EAAOsR,GAAK3P,iBAGnEiT,EAAexN,KAAM,QAAOqN,KAC5BG,EAAexN,KAAM,WAAU6B,KAAKuK,WACpC,MAAMyB,EAASrR,EACf,IAAIsR,EAAM,GACV,OAAQT,GACJ,KAAKpB,GAAU8B,cAAe,CAC1BD,EAAM,gBACN,MAAME,EAAQxR,EACd,OAAQwR,GACJ,IAAK,WACL,IAAK,YACL,IAAK,mBACDF,GAAO,IAAME,EACb,MACJ,IAAK,iBACL,IAAK,iBACDF,GAAO,eACP,MACJ,IAAK,yBACDA,GAAO,kBAGf,MAEJ,KAAK7B,GAAUgC,eACf,KAAKhC,GAAUiC,mBACf,KAAKjC,GAAUkC,YACf,KAAKlC,GAAUmC,cACf,KAAKnC,GAAUoC,wBACf,KAAKpC,GAAUqC,qBACf,KAAKrC,GAAUsC,wBACXT,EAAMT,EAGVS,IACAtR,GAAW,8CAAiDsR,EAAM,MAElEN,EAAerO,SACf3C,GAAW,KAAOgR,EAAe5B,KAAK,MAAQ,KAGlD,MAAMvS,EAAQ,IAAIO,MAAM4C,GAMxB,OALAnD,EAAMwU,OAASA,EACfxU,EAAMgU,KAAOA,EACbpP,OAAOwP,KAAK7U,GAAQuC,SAAQ,SAAU+O,GAClC7Q,EAAM6Q,GAAOtR,EAAOsR,MAEjB7Q,EAEXmV,WAAWhS,EAAS6Q,EAAMzU,GACtB,MAAMiJ,KAAKuL,UAAU5Q,EAAS6Q,EAAMzU,GAExC+T,mBAAmBnQ,EAASzB,EAAMyD,GAC9B,OAAOqD,KAAK2M,WAAWhS,EAAS2P,GAAOmB,OAAOmB,iBAAkB,CAC5DC,SAAU3T,EACVyD,MAAOA,IAGfb,OAAOgR,EAAWnS,EAAS6Q,EAAMzU,GACvB+V,GAGN9M,KAAK2M,WAAWhS,EAAS6Q,EAAMzU,GAEnCgW,eAAeD,EAAWnS,EAASzB,EAAMyD,GAC/BmQ,GAGN9M,KAAK8K,mBAAmBnQ,EAASzB,EAAMyD,GAE3CqQ,eAAerS,GAIPgP,IACA3J,KAAK2M,WAAW,8CAA+CrC,GAAOmB,OAAOwB,sBAAuB,CAChGC,UAAW,6BAA8BrD,KAAMF,KAI3DwD,gBAAgBxQ,EAAOhC,GACI,kBAAXgC,IAGG,MAAXhC,IACAA,EAAU,mBAEVgC,EAAQ,GAAKA,GAAS,mBACtBqD,KAAK2M,WAAWhS,EAAS2P,GAAOmB,OAAOS,cAAe,CAClDgB,UAAW,mBACXf,MAAO,oBACPxP,MAAOA,IAGXA,EAAQ,GACRqD,KAAK2M,WAAWhS,EAAS2P,GAAOmB,OAAOS,cAAe,CAClDgB,UAAW,mBACXf,MAAO,cACPxP,MAAOA,KAInByQ,mBAAmBC,EAAOC,EAAe3S,GAEjCA,EADAA,EACU,KAAOA,EAGP,GAEV0S,EAAQC,GACRtN,KAAK2M,WAAW,mBAAqBhS,EAAS2P,GAAOmB,OAAO8B,iBAAkB,CAC1EF,MAAOA,EACPC,cAAeA,IAGnBD,EAAQC,GACRtN,KAAK2M,WAAW,qBAAuBhS,EAAS2P,GAAOmB,OAAO+B,oBAAqB,CAC/EH,MAAOA,EACPC,cAAeA,IAI3BG,SAASC,EAAQC,GACTD,IAAWtR,QAAoB,MAAVsR,GACrB1N,KAAK2M,WAAW,cAAerC,GAAOmB,OAAOa,YAAa,CAAEpT,KAAMyU,EAAKzU,OAG/E0U,cAAcF,EAAQC,GACdD,IAAWC,EACX3N,KAAK2M,WAAW,qCAAuCb,KAAKC,UAAU4B,EAAKzU,MAAQ,6BAA8BoR,GAAOmB,OAAOwB,sBAAuB,CAAE/T,KAAMwU,EAAOxU,KAAMgU,UAAW,QAEjLQ,IAAWtR,QAAoB,MAAVsR,GAC1B1N,KAAK2M,WAAW,cAAerC,GAAOmB,OAAOa,YAAa,CAAEpT,KAAMyU,EAAKzU,OAG5D,sBAIf,OAHKwQ,KACDA,GAAgB,IAAIY,GC1TT,iBD4TRZ,GAES,qBAACmE,EAAYC,GAM7B,IALKD,GAAcC,GACf9N,KAAK+N,eAAepB,WAAW,wCAAyCrC,GAAOmB,OAAOwB,sBAAuB,CACzGC,UAAW,kBAGfhE,GAAwB,CACxB,IAAK2E,EACD,OAEJ7N,KAAK+N,eAAepB,WAAW,6BAA8BrC,GAAOmB,OAAOwB,sBAAuB,CAC9FC,UAAW,kBAGnB/D,KAAkB0E,EAClB3E,KAA2B4E,EAEb,mBAACpD,GACf,MAAME,EAAQxB,GAAUsB,EAASG,eACpB,MAATD,EAIJnB,GAAYmB,EAHRN,GAAOyD,eAAe1C,KAAK,uBAAyBX,GAKjD,YAACH,GACR,OAAO,IAAID,GAAOC,IAG1BD,GAAOmB,OAASrB,GAChBE,GAAOY,OAASf,GE5VT,MCGD6D,GAAS,IAAI1D,GDHI,eCQvB,SAAS2D,GAASC,GACd,OAAIA,EAAMlQ,QAGVkQ,EAAMlQ,MAAQ,WACV,MAAM2M,EAAO7M,MAAMpB,UAAUsB,MAAMmE,KAAKgM,WACxC,OAAOF,GAAS,IAAI5T,WAAWyD,MAAMpB,UAAUsB,MAAMiN,MAAMiD,EAAOvD,OAJ3DuD,EAWf,SAASE,GAAUzR,GACf,MAA2B,kBAAXA,GAAuBA,GAASA,GAAUA,EAAQ,IAAO,EAuBtE,SAAS0R,GAAS1R,EAAO2R,GAI5B,GAHKA,IACDA,EAAU,IAES,kBAAX3R,EAAqB,CAC7BqR,GAAOb,gBAAgBxQ,EAAO,0BAC9B,MAAMpF,EAAS,GACf,KAAOoF,GACHpF,EAAOgX,QAAgB,IAAR5R,GACfA,EAAQyB,SAAS4L,OAAOrN,EAAQ,MAKpC,OAHsB,IAAlBpF,EAAO+F,QACP/F,EAAO4G,KAAK,GAET8P,GAAS,IAAI5T,WAAW9C,IAQnC,GANI+W,EAAQE,oBAAyC,kBAAX7R,GAAiD,OAA1BA,EAAM8R,UAAU,EAAG,KAChF9R,EAAQ,KAAOA,GAzDvB,SAAmBA,GACf,QAAUA,EAAM+R,YA0DZC,CAAUhS,KACVA,EAAQA,EAAM+R,eA6Df,SAAqB/R,EAAOW,GAC/B,GAAuB,kBAAXX,IAAwBA,EAAMiS,MAAM,oBAC5C,OAAO,EAEX,GAAItR,GAAUX,EAAMW,SAAW,EAAI,EAAIA,EACnC,OAAO,EAEX,OAAO,EAlEHuR,CAAYlS,GAAQ,CACpB,IAAIkP,EAAMlP,EAAM8R,UAAU,GACtB5C,EAAIvO,OAAS,IACU,SAAnBgR,EAAQQ,OACRjD,EAAM,MAAQA,EAAI4C,UAAU,GAEJ,UAAnBH,EAAQQ,OACbjD,GAAO,IAGPmC,GAAOlD,mBAAmB,yBAA0B,QAASnO,IAGrE,MAAMpF,EAAS,GACf,IAAK,IAAI6F,EAAI,EAAGA,EAAIyO,EAAIvO,OAAQF,GAAK,EACjC7F,EAAO4G,KAAKC,SAASyN,EAAI4C,UAAUrR,EAAGA,EAAI,GAAI,KAElD,OAAO6Q,GAAS,IAAI5T,WAAW9C,IAEnC,OA9DG,SAAiBoF,GACpB,GAAa,MAATA,EACA,OAAO,EAEX,GAAIA,EAAM5G,cAAgBsE,WACtB,OAAO,EAEX,GAAuB,kBAAXsC,EACR,OAAO,EAEX,IAAKyR,GAAUzR,EAAMW,SAAWX,EAAMW,OAAS,EAC3C,OAAO,EAEX,IAAK,IAAIF,EAAI,EAAGA,EAAIT,EAAMW,OAAQF,IAAK,CACnC,MAAM2R,EAAIpS,EAAMS,GAChB,IAAKgR,GAAUW,IAAMA,EAAI,GAAKA,GAAK,IAC/B,OAAO,EAGf,OAAO,EA2CHC,CAAQrS,GACDsR,GAAS,IAAI5T,WAAWsC,IAE5BqR,GAAOlD,mBAAmB,yBAA0B,QAASnO,GC9EjE,SAASkM,GAAOlS,GACnB,MAAO,KAAQ2B,GAAKuQ,SAASnI,OAAO2N,GAAS1X,IAAOoK,OAAO,OALhD,IAAIuJ,GCPI,cCIhB,MAAM2E,GACXlZ,YAAYmZ,GACV9S,OAAO+S,OAAOnP,KAAMkP,GAGtBE,SACS3T,OAAAA,EAAAA,OAAAA,MAAY4T,EAAAA,EAAAA,WAAUC,GAAetP,OAGjC,cAACrJ,GACZ,OAAO4Y,EAAAA,EAAAA,aAAYD,GAAetP,KAAMrJ,GAGpB,uBAACA,GACrB,OAAO6Y,EAAAA,EAAAA,sBAAqBF,GAAetP,KAAMrJ,IAM9C,MAAM8Y,WAAaR,GAExBlZ,YAAYmZ,GAEN9S,GADJsT,MAAMR,GAFRS,KAAAA,KAAe,GAG0B,IAAnCvT,OAAOwP,KAAKsD,GAAY5R,OAC1B,MAAM,IAAIvF,MAAM,mCAElBqE,OAAOwP,KAAKsD,GAAYjU,KAAIoN,IACrBsH,KAAAA,KAAOtH,MAKLiH,MAAAA,GAAoC,IAAIpZ,ICzBxC0Z,GAAkB,GA4BxB,MAAM9Y,WAAkBmY,GAQ7BlZ,YAAY4G,GAEV,GADA+S,MAAM,IAD8B,KANtCG,SAMsC,EAfxC,SAAyBlT,GACvB,YAAwCmT,IAAhCnT,EAAwBkT,IAgB1BE,CAAgBpT,GAClBqD,KAAK6P,IAAMlT,EAAMkT,QACZ,CACL,GAAqB,kBAAVlT,EAAoB,CAE7B,MAAMqT,EAAUxV,IAAAA,OAAYmC,GAC5B,GAAsB,IAAlBqT,EAAQ1S,OACV,MAAM,IAAIvF,MAAO,4BAEnBiI,KAAK6P,IAAM,IAAII,IAAJ,CAAOD,QAElBhQ,KAAK6P,IAAM,IAAII,IAAJ,CAAOtT,GAGpB,GAAIqD,KAAK6P,IAAIjU,aAAe,GAC1B,MAAM,IAAI7D,MAAO,6BAavBb,OAAOF,GACE,OAAAgJ,KAAK6P,IAAIK,GAAGlZ,EAAU6Y,KAM/BM,WACE,OAAO3V,IAAAA,OAAYwF,KAAKoQ,WAG1BC,SACS,OAAArQ,KAAKmQ,WAMdC,UACS,OAAApQ,KAAKzE,WAMdA,WACQsD,MAAAA,EAAImB,KAAK6P,IAAIS,YAAY7U,EAAAA,QAC/B,GAAiB,KAAboD,EAAEvB,OACJ,OAAOuB,EAGT,MAAM0R,EAAU9U,EAAAA,OAAAA,MAAa,IAE7B,OADAoD,EAAE2R,KAAKD,EAAS,GAAK1R,EAAEvB,QAChBiT,EAMT7X,WACS,OAAAsH,KAAKmQ,WASa,4BACzBM,EACAC,EACAC,GAEMjV,MAAAA,EAASD,EAAAA,OAAAA,OAAc,CAC3BgV,EAAclV,WACdE,EAAAA,OAAAA,KAAYiV,GACZC,EAAUpV,aAENjD,EAAOuQ,GAAO,IAAIxO,WAAWqB,IAASsC,MAAM,GAC3C,WAAIlH,GAAU2E,EAAAA,OAAAA,KAAYnD,EAAM,QAOV,gCAC7BsY,EACAD,GAEA,IAAIjV,EAASD,EAAAA,OAAAA,MAAa,GAC1BmV,EAAMtX,SAAQ,SAAUoX,GACtB,GAAIA,EAAKpT,OAASsS,GAChB,MAAM,IAAIiB,UAAW,4BAEvBnV,EAASD,EAAAA,OAAAA,OAAc,CAACC,EAAQH,EAASmV,QAE3ChV,EAASD,EAAAA,OAAAA,OAAc,CACrBC,EACAiV,EAAUpV,WACVE,EAAAA,OAAAA,KAAY,2BAEd,IAAInD,EAAOuQ,GAAO,IAAIxO,WAAWqB,IAASsC,MAAM,GAC5C8S,EAAiB,IAAIb,IAAJ,CAAO3X,EAAM,IAAIqI,aAAQmP,EAAW,IACzD,GAAIiB,GAAYD,GACd,MAAM,IAAI/Y,MAAO,kDAEnB,OAAO,IAAIjB,GAAUga,GAQU,kCAC/BF,EACAD,GAEA,OAAO3Q,KAAKgR,yBAAyBJ,EAAOD,GAUjB,8BAC3BC,EACAD,GAEIM,IACAC,EADAD,EAAQ,IAELA,KAAS,GAATA,GAAY,CACb,IACF,MAAME,EAAiBP,EAAMhQ,OAAOnF,EAAAA,OAAAA,KAAY,CAACwV,KACjDC,EAAUlR,KAAKgR,yBAAyBG,EAAgBR,GACxD,MAAOS,GACHA,GAAAA,aAAeP,UACjB,MAAMO,EAERH,IACA,SAEF,MAAO,CAACC,EAASD,GAEnB,MAAM,IAAIlZ,MAAO,iDAOY,gCAC7B6Y,EACAD,GAEA,OAAO3Q,KAAKqR,uBAAuBT,EAAOD,GAM5B,iBAACW,GAERP,OAAiC,GAAjCA,GADQ,IAAIja,GAAUwa,GACHlB,YA1LjBtZ,GAiCJya,QAAqB,IAAIza,GAAU,oCA6J5CwY,GAAc3V,IAAI7C,GAAW,CAC3B6W,KAAM,SACN6D,OAAQ,CAAC,CAAC,MAAO,WAInB,IAAIC,GAAeC,IAAAA,SAKnB,SAASX,GAAY1S,GACflC,IAAAA,EAAI,CACNsV,GAAaE,KACbF,GAAaE,KACbF,GAAaE,KACbF,GAAaE,MAGXxQ,EAAIsQ,GAAaE,KACnBC,EAAMH,GAAaE,KACnB7R,EAAM2R,GAAaE,KACnBE,EAAMJ,GAAaE,KACnBG,EAAOL,GAAaE,KACpBI,EAAON,GAAaE,KACpBK,EAAOP,GAAaE,KA2BlBM,OAzBJR,GAAaS,SAAS/V,EAAE,GAAIgW,IAC5BV,GAAaW,YAAYjW,EAAE,GAAIkC,GAC/BoT,GAAaY,EAAEvS,EAAK3D,EAAE,IACtBsV,GAAaa,EAAET,EAAK/R,EAAK2R,GAAa/J,GACtC+J,GAAac,EAAEzS,EAAKA,EAAK3D,EAAE,IAC3BsV,GAAalK,EAAEsK,EAAK1V,EAAE,GAAI0V,GAE1BJ,GAAaY,EAAEP,EAAMD,GACrBJ,GAAaY,EAAEN,EAAMD,GACrBL,GAAaa,EAAEN,EAAMD,EAAMD,GAC3BL,GAAaa,EAAEnR,EAAG6Q,EAAMlS,GACxB2R,GAAaa,EAAEnR,EAAGA,EAAG0Q,GAErBJ,GAAae,QAAQrR,EAAGA,GACxBsQ,GAAaa,EAAEnR,EAAGA,EAAGrB,GACrB2R,GAAaa,EAAEnR,EAAGA,EAAG0Q,GACrBJ,GAAaa,EAAEnR,EAAGA,EAAG0Q,GACrBJ,GAAaa,EAAEnW,EAAE,GAAIgF,EAAG0Q,GAExBJ,GAAaY,EAAET,EAAKzV,EAAE,IACtBsV,GAAaa,EAAEV,EAAKA,EAAKC,GACrBI,GAASL,EAAK9R,IAAM2R,GAAaa,EAAEnW,EAAE,GAAIA,EAAE,GAAIsW,IAEnDhB,GAAaY,EAAET,EAAKzV,EAAE,IACtBsV,GAAaa,EAAEV,EAAKA,EAAKC,GACrBI,GAASL,EAAK9R,GAAa,EACxB,EAET,IAAIqS,GAAMV,GAAaE,GAAG,CAAC,IACvBc,GAAIhB,GAAaE,GAAG,CACtB,MAAQ,MAAQ,KAAQ,MAAQ,MAAQ,MAAQ,KAAQ,MAAQ,MAChE,MAAQ,IAAQ,MAAQ,MAAQ,MAAQ,KAAQ,QAElD,SAASM,GAASha,EAAQ4G,GACxB,IAAIP,EAAI,IAAIjE,WAAW,IACrByE,EAAI,IAAIzE,WAAW,IAGdoX,OAFPA,GAAaiB,UAAUpU,EAAGrG,GAC1BwZ,GAAaiB,UAAU5T,EAAGD,GACnB4S,GAAakB,iBAAiBrU,EAAG,EAAGQ,EAAG,GC3RzC,MAAM8T,GAYX7c,YAAY8c,GAAiD,KAV7DC,cAU6D,EAEzD9S,KAAK8S,SADHD,EACcnB,IAAAA,KAAAA,QAAAA,cAAgCnW,EAASsX,IAEzCnB,IAAAA,KAAAA,UAOhB1a,gBACF,OAAO,IAAIF,GAAUkJ,KAAK8S,SAAS9b,WAMjC6b,gBACF,OAAOtX,EAASyE,KAAK8S,SAASD,Y,MCzCrBE,GAAmC,IAAIjc,GAClD,+CCIWkc,GAAmB,KAEnBC,GAA4B,GCH5Bjc,GAAY,WAAoC,IAAnCkc,EAAmC,uDAAhB,YAC3C,OAAOC,EAAAA,GAAkB,GAAID,IA8BlBE,GAAa,WAEQ,IADhCF,EACgC,uDADb,SAEnB,MAAMG,EAAMF,EAAAA,GAOV,CACEA,EAAAA,GAAiB,UACjBA,EAAAA,GAAiB,iBACjBA,EAAAA,GAAkBA,EAAAA,GAAoBA,EAAAA,MAAqB,GAAI,UAEjED,GAEII,EAAUD,EAAIE,OAAOC,KAAKH,GAC1BI,EAAUJ,EAAIjE,OAAOoE,KAAKH,GAE1BK,EAAUL,EAsBhB,OApBAK,EAAQH,OAAS,CAAC1U,EAAe8U,IAClBL,EAAQzU,EAAG8U,GACb,MAAUjb,WAGvBgb,EAAQtE,OAAS,CAACwE,EAAa/U,EAAe8U,KAC5C,MAAMhd,EAAO,CACXkd,MAAOpY,EAAAA,OAAAA,KAAYmY,EAAK,SAE1B,OAAOH,EAAQ9c,EAAMkI,EAAG8U,IAG1BD,EAAQI,MAASF,GAEbT,EAAAA,KAAmBY,KACnBZ,EAAAA,KAAmBY,KACnBtY,EAAAA,OAAAA,KAAYmY,EAAK,QAAQtW,OAItBoW,GC/EF,SAASM,GAAa9S,GACvBxC,IAAAA,EAAM,EACNuV,EAAO,EACF,QACP,IAAIC,EAAOhT,EAAMiT,QAGjB,GAFAzV,IAAe,IAAPwV,IAAwB,EAAPD,EACzBA,GAAQ,EACc,KAAV,IAAPC,GACH,MAGJ,OAAOxV,EAGF,SAAS0V,GAAalT,EAAsBxC,GAC7C2V,IAAAA,EAAU3V,EACL,QACP,IAAIwV,EAAiB,IAAVG,EAEPA,GADJA,IAAY,EACG,GAAXA,EAAc,CAChBnT,EAAM/C,KAAK+V,GACX,MAEAA,GAAQ,IACRhT,EAAM/C,KAAK+V,ICqCV,MAAMI,GAWXve,YAAY4U,GAAmB,KAV/B4J,YAU+B,OAT/BC,iBAS+B,OAR/BC,qBAQ+B,OAP/BC,kBAO+B,OALvBC,kBAA4C,IAAIze,IAMtD8J,KAAKuU,OAAS5J,EAAK4J,OACnBvU,KAAKwU,YAAc7J,EAAK6J,YAAYvZ,KAAI2Z,GAAW,IAAI9d,GAAU8d,KACjE5U,KAAKyU,gBAAkB9J,EAAK8J,gBAC5BzU,KAAK0U,aAAe/J,EAAK+J,aACpBA,KAAAA,aAAapb,SAAQub,GACxB7U,KAAK2U,kBAAkBhb,IACrBkb,EAAGC,eACH9U,KAAKwU,YAAYK,EAAGC,mBAK1BC,gBAAgBC,GACd,OAAOA,EAAQhV,KAAKuU,OAAOU,sBAG7BC,kBAAkBF,GAChB,OACEA,EACEhV,KAAKuU,OAAOU,sBACVjV,KAAKuU,OAAOY,2BACfH,GAAShV,KAAKuU,OAAOU,uBACpBD,EACEhV,KAAKwU,YAAYlX,OAAS0C,KAAKuU,OAAOa,4BAI9CC,YAAYL,GACV,OAAOhV,KAAK2U,kBAAkBW,IAAIN,GAGpCO,aACE,MAAO,IAAIvV,KAAK2U,kBAAkBa,UAGpCC,gBACE,OAAOzV,KAAKwU,YAAYkB,QAAO,CAACC,EAAGX,KAAWhV,KAAKqV,YAAYL,KAGjE3F,YACE,MAAMuG,EAAU5V,KAAKwU,YAAYlX,OAE7BuY,IAAAA,EAAqB,GACzBC,GAAsBD,EAAUD,GAE1BlB,MAAAA,EAAe1U,KAAK0U,aAAazZ,KAAI8a,IACnC,eAACC,EAAD,eAAWlB,GAAkBiB,EAC7Bpf,EAAOmH,MAAMmY,KAAKzb,IAAAA,OAAYub,EAAYpf,OAE5Cuf,IAAAA,EAA4B,GAChCJ,GAAsBI,EAAiBF,EAAS1Y,QAE5C6Y,IAAAA,EAAsB,GAGnB,OAFPL,GAAsBK,EAAWxf,EAAK2G,QAE/B,CACLwX,eAAAA,EACAoB,gBAAiBza,EAAAA,OAAAA,KAAYya,GAC7BE,WAAYJ,EACZK,WAAY5a,EAAAA,OAAAA,KAAY0a,GACxBxf,KAAAA,MAIA2f,IAAAA,EAA6B,GACjCR,GAAsBQ,EAAkB5B,EAAapX,QACrD,IAAIiZ,EAAoB9a,EAAAA,OAAAA,MAAauX,IACrCvX,EAAAA,OAAAA,KAAY6a,GAAkB9F,KAAK+F,GACnC,IAAIC,EAA0BF,EAAiBhZ,OAE/CoX,EAAapb,SAAQyc,IACnB,MA2BMzY,EA3BoB6V,EAAAA,GAQxB,CACAA,EAAAA,GAAgB,kBAEhBA,EAAAA,GACE4C,EAAYG,gBAAgB5Y,OAC5B,mBAEF6V,EAAAA,GACEA,EAAAA,GAAgB,YAChB4C,EAAYK,WAAW9Y,OACvB,cAEF6V,EAAAA,GAAkB4C,EAAYM,WAAW/Y,OAAQ,cACjD6V,EAAAA,GACEA,EAAAA,GAAgB,aAChB4C,EAAYpf,KAAK2G,OACjB,UAG6B8R,OAC/B2G,EACAQ,EACAC,GAEFA,GAA2BlZ,KAE7BiZ,EAAoBA,EAAkBvY,MAAM,EAAGwY,GAE/C,MAAMC,EAAiBtD,EAAAA,GASrB,CACAA,EAAAA,GAAkB,EAAG,yBACrBA,EAAAA,GAAkB,EAAG,6BACrBA,EAAAA,GAAkB,EAAG,+BACrBA,EAAAA,GAAkB0C,EAASvY,OAAQ,YACnC6V,EAAAA,GAAiBuD,GAAiB,OAAQd,EAAS,QACnDc,GAAiB,qBAGbhc,EAAc,CAClBua,sBAAuBxZ,EAAAA,OAAAA,KAAY,CAACuE,KAAKuU,OAAOU,wBAChDE,0BAA2B1Z,EAAAA,OAAAA,KAAY,CACrCuE,KAAKuU,OAAOY,4BAEdC,4BAA6B3Z,EAAAA,OAAAA,KAAY,CACvCuE,KAAKuU,OAAOa,8BAEdS,SAAUpa,EAAAA,OAAAA,KAAYoa,GACtBjK,KAAM5L,KAAKwU,YAAYvZ,KAAIoN,GAAO9M,EAAS8M,EAAI+H,aAC/CqE,gBAAiBja,IAAAA,OAAYwF,KAAKyU,kBAGpC,IAAIkC,EAAWlb,EAAAA,OAAAA,MAAa,MACtB6B,MAAAA,EAASmZ,EAAerH,OAAO1U,EAAaic,GAE3CA,OADPJ,EAAkB/F,KAAKmG,EAAUrZ,GAC1BqZ,EAAS3Y,MAAM,EAAGV,EAASiZ,EAAkBjZ,QAM3C,YAAC5B,GAEV,IAAIkb,EAAY,IAAIlb,GAEpB,MAAMuZ,EAAwB2B,EAAUzC,QAClCgB,EAA4ByB,EAAUzC,QACtCiB,EAA8BwB,EAAUzC,QAExC0C,EAAef,GAAsBc,GACvCpC,IAAAA,EAAc,GACb,QAAIpX,EAAI,EAAGA,EAAIyZ,EAAczZ,IAAK,CAC/BwX,MAAAA,EAAUgC,EAAU5Y,MAAM,EA/KhB,IAgLhB4Y,EAAYA,EAAU5Y,MAhLN,IAiLhBwW,EAAYrW,KAAK3D,IAAAA,OAAYiB,EAAAA,OAAAA,KAAYmZ,KAGrCH,MAAAA,EAAkBmC,EAAU5Y,MAAM,EApLtB,IAqLlB4Y,EAAYA,EAAU5Y,MArLJ,IAuLlB,MAAMsY,EAAmBR,GAAsBc,GAC3ClC,IAAAA,EAAsC,GACrC,QAAItX,EAAI,EAAGA,EAAIkZ,EAAkBlZ,IAAK,CACzC,MAAM0X,EAAiB8B,EAAUzC,QAC3B0C,EAAef,GAAsBc,GACrCZ,EAAWY,EAAU5Y,MAAM,EAAG6Y,GACpCD,EAAYA,EAAU5Y,MAAM6Y,GAC5B,MAAMR,EAAaP,GAAsBc,GACnCE,EAAYF,EAAU5Y,MAAM,EAAGqY,GAC/B1f,EAAO6D,IAAAA,OAAYiB,EAAAA,OAAAA,KAAYqb,IACrCF,EAAYA,EAAU5Y,MAAMqY,GAC5B3B,EAAavW,KAAK,CAChB2W,eAAAA,EACAkB,SAAAA,EACArf,KAAAA,IAIJ,MAAMogB,EAAc,CAClBxC,OAAQ,CACNU,sBAAAA,EACAE,0BAAAA,EACAC,4BAAAA,GAEFX,gBAAiBja,IAAAA,OAAYiB,EAAAA,OAAAA,KAAYgZ,IACzCD,YAAAA,EACAE,aAAAA,GAGF,OAAO,IAAIJ,GAAQyC,IC5QR,SAAS,GACtBjK,EACAnS,GAEI,IAACmS,EACH,MAAM,IAAI/U,MAAM4C,GAAW,oBCqB/B,MAAMqc,GAAoBvb,EAAAA,OAAAA,MAAawX,IAA2BgE,KAAK,GAiDhE,MAAMC,GAiBXnhB,YAAYohB,GAAwC,KAZpDvL,UAYoD,OAPpD+E,eAOoD,OAFpDha,KAAe8E,EAAAA,OAAAA,MAAa,GAG1BuE,KAAK2Q,UAAYwG,EAAKxG,UACtB3Q,KAAK4L,KAAOuL,EAAKvL,KACbuL,EAAKxgB,OACPqJ,KAAKrJ,KAAOwgB,EAAKxgB,MAOrB0Z,SACS,OACLzE,KAAM5L,KAAK4L,KAAK3Q,KAAI,QAAC,OAACmc,EAAD,SAASC,EAAT,WAAmBC,GAApB,QAAqC,CACvDF,OAAQA,EAAO/G,SACfgH,SAAAA,EACAC,WAAAA,MAEF3G,UAAW3Q,KAAK2Q,UAAUN,SAC1B1Z,KAAM,IAAIqJ,KAAKrJ,QAuDd,MAAM4gB,GAUPhd,gBACF,OAAIyF,KAAK7E,WAAWmC,OAAS,EACpB0C,KAAK7E,WAAW,GAAGZ,UAErB,KAqCTxE,YAAYohB,GA9CZhc,KAAAA,WAAyC,GA8CC,KA/B1Cqc,cA+B0C,EA1B1C9C,KAAAA,aAA8C,GA0BJ,KArB1CD,qBAqB0C,OAf1CgD,eAe0C,OAV1CC,cAU0C,OAL1CC,WAK0C,EACxCR,GAAQ/a,OAAO+S,OAAOnP,KAAMmX,GAM9B9G,SACS,OACLoE,gBAAiBzU,KAAKyU,iBAAmB,KACzC+C,SAAUxX,KAAKwX,SAAWxX,KAAKwX,SAASnH,SAAW,KACnDoH,UAAWzX,KAAKyX,UACZ,CACExG,MAAOjR,KAAKyX,UAAUxG,MACtB2G,iBAAkB5X,KAAKyX,UAAUG,iBAAiBvH,UAEpD,KACJqE,aAAc1U,KAAK0U,aAAazZ,KAAI8a,GAAeA,EAAY1F,WAC/DwH,QAAS7X,KAAK7E,WAAWF,KAAI,IAAiB,IAAhB,UAACjE,GAAe,EACrCA,OAAAA,EAAUqZ,aAQvByH,MAIe,2BAHVC,EAGU,yBAHVA,EAGU,gBACb,GAAqB,IAAjBA,EAAMza,OACR,MAAM,IAAIvF,MAAM,mBAYlB,OATAggB,EAAMze,SAAS0e,IACT,iBAAkBA,EACftD,KAAAA,aAAe1U,KAAK0U,aAAa9T,OAAOoX,EAAKtD,cACzC,SAAUsD,GAAQ,cAAeA,GAAQ,SAAUA,EAC5DhY,KAAK0U,aAAavW,KAAK6Z,GAElBtD,KAAAA,aAAavW,KAAK,IAAI+Y,GAAuBc,OAG/ChY,KAMTiY,iBACM,GAAAjY,KAAK0X,SAAU,CACjB,GAAI5L,KAAKC,UAAU/L,KAAKqQ,YAAcvE,KAAKC,UAAU/L,KAAK2X,OACxD,MAAM,IAAI5f,MACR,kEAGJ,OAAOiI,KAAK0X,SAGR,gBAACD,GAAazX,KAChByX,GAAazX,KAAK0U,aAAa,IAAM+C,EAAUG,mBACjD5X,KAAKyU,gBAAkBgD,EAAUxG,MACjCjR,KAAK0U,aAAanG,QAAQkJ,EAAUG,mBAEhC,sBAACnD,GAAmBzU,KACtB,IAACyU,EACH,MAAM,IAAI1c,MAAM,wCAOlB,IAAIyf,EACA,GALAxX,KAAK0U,aAAapX,OAAS,GAC7ByN,QAAQM,KAAK,4BAIXrL,KAAKwX,SACPA,EAAWxX,KAAKwX,aACX,MAAIxX,KAAK7E,WAAWmC,OAAS,GAAK0C,KAAK7E,WAAW,GAAGnE,WAI1D,MAAM,IAAIe,MAAM,kCAFhByf,EAAWxX,KAAK7E,WAAW,GAAGnE,UAKhC,IAAK,IAAIoG,EAAI,EAAGA,EAAI4C,KAAK0U,aAAapX,OAAQF,IACxC,QAAmC0S,IAAnC9P,KAAK0U,aAAatX,GAAGuT,UACvB,MAAM,IAAI5Y,MACyBqF,iCAAAA,8BAKjCmY,MAAAA,EAAuB,GACvB2C,EAA8B,GACpClY,KAAK0U,aAAapb,SAAQyc,IACxBA,EAAYnK,KAAKtS,SAAQ6e,IACvBD,EAAa/Z,KAAK,IAAIga,OAGxB,MAAMxH,EAAYoF,EAAYpF,UAAUjY,WACnC6c,EAAW6C,SAASzH,IACvB4E,EAAWpX,KAAKwS,MAKpB4E,EAAWjc,SAAQqX,IACjBuH,EAAa/Z,KAAK,CAChBiZ,OAAQ,IAAItgB,GAAU6Z,GACtB0G,UAAU,EACVC,YAAY,OAKhBY,EAAaG,MAAK,SAAU/W,EAAGC,GAC7B,MAAM+W,EAAgBhX,EAAE8V,OACrBjH,WACAoI,cAAchX,EAAE6V,OAAOjH,YACpBqI,EAAclX,EAAE+V,WAAa9V,EAAE8V,SAAW,EAAI/V,EAAE+V,UAAY,EAAI,EAChEoB,EACJnX,EAAEgW,aAAe/V,EAAE+V,WAAagB,EAAgBhX,EAAEgW,YAAc,EAAI,EAC/DkB,OAAAA,GAAeC,KAIlBC,MAAAA,EAA6B,GACnCR,EAAa5e,SAAQ6e,IACnB,MAAMQ,EAAeR,EAAYf,OAAO1e,WAClCkgB,EAAcF,EAAYG,WAAUvX,GACjCA,EAAE8V,OAAO1e,aAAeigB,IAE7BC,GAAe,EACjBF,EAAYE,GAAatB,WACvBoB,EAAYE,GAAatB,YAAca,EAAYb,WAErDoB,EAAYva,KAAKga,MAKrB,MAAMW,EAAgBJ,EAAYG,WAAUvX,GACnCA,EAAE8V,OAAOlgB,OAAOsgB,KAEzB,GAAIsB,GAAiB,EAAG,CAChB,MAACC,GAAaL,EAAYM,OAAOF,EAAe,GACtDC,EAAU1B,UAAW,EACrB0B,EAAUzB,YAAa,EACvBoB,EAAYnK,QAAQwK,QAEpBL,EAAYnK,QAAQ,CAClB6I,OAAQI,EACRH,UAAU,EACVC,YAAY,IAKhB,IAAK,MAAM/c,KAAayF,KAAK7E,WAAY,CACvC,MAAMyd,EAAcF,EAAYG,WAAUvX,GACjCA,EAAE8V,OAAOlgB,OAAOqD,EAAUvD,aAEnC,KAAI4hB,GAAe,GAUX,UAAI7gB,MAAyBwC,mBAAAA,EAAUvD,UAAU0B,cATlDggB,EAAYE,GAAavB,WAC5BqB,EAAYE,GAAavB,UAAW,EACpCtM,QAAQM,KACN,iOAUJ4J,IAAAA,EAAwB,EACxBE,EAA4B,EAC5BC,EAA8B,EAG5B6D,MAAAA,EAAuB,GACvBC,EAAyB,GAC/BR,EAAYpf,SAAQ,IAAoC,IAAnC,OAAC8d,EAAD,SAASC,EAAT,WAAmBC,GAAgB,EAClDD,GACF4B,EAAW9a,KAAKiZ,EAAO1e,YACvBuc,GAAyB,EACpBqC,IACHnC,GAA6B,KAG/B+D,EAAa/a,KAAKiZ,EAAO1e,YACpB4e,IACHlC,GAA+B,OAKrC,MAAMZ,EAAcyE,EAAWrY,OAAOsY,GAChCxE,EAAsC1U,KAAK0U,aAAazZ,KAC5D8a,IACQ,WAACpf,EAAD,UAAOga,GAAaoF,EACnB,OACLjB,eAAgBN,EAAY2E,QAAQxI,EAAUjY,YAC9Csd,SAAUD,EAAYnK,KAAK3Q,KAAIme,GAC7B5E,EAAY2E,QAAQC,EAAKhC,OAAO1e,cAElC/B,KAAM6D,IAAAA,OAAY7D,OAUjB,OALP+d,EAAapb,SAAQyc,IACnBsD,GAAUtD,EAAYjB,gBAAkB,GACxCiB,EAAYC,SAAS1c,SAAQggB,GAAYD,GAAUC,GAAY,QAG1D,IAAIhF,GAAQ,CACjBC,OAAQ,CACNU,sBAAAA,EACAE,0BAAAA,EACAC,4BAAAA,GAEFZ,YAAAA,EACAC,gBAAAA,EACAC,aAAAA,IAOJ6E,WACE,MAAM5e,EAAUqF,KAAKiY,iBACfgB,EAAate,EAAQ6Z,YAAYxW,MACrC,EACArD,EAAQ4Z,OAAOU,uBAGb,GAAAjV,KAAK7E,WAAWmC,SAAW2b,EAAW3b,OAAQ,CAK5Ckc,GAJUxZ,KAAK7E,WAAWse,OAAM,CAACC,EAAM1E,IAClCiE,EAAWjE,GAAO9d,OAAOwiB,EAAK1iB,aAG5B,OAAO2D,EAQpB,OALAqF,KAAK7E,WAAa8d,EAAWhe,KAAIjE,IAAa,CAC5CuD,UAAW,KACXvD,UAAAA,MAGK2D,EAMTC,mBACE,OAAOoF,KAAKuZ,WAAWlK,YAMJ,sBAACsK,GACb,aAAOA,EAAWC,iBAAiB5Z,KAAKiY,mBAAmBtb,MAapEkd,aAAyC,2BAA3BhC,EAA2B,yBAA3BA,EAA2B,gBACvC,GAAuB,IAAnBA,EAAQva,OACV,MAAM,IAAIvF,MAAM,cAGlB,MAAM+hB,EAAO,IAAIC,IACjB/Z,KAAK7E,WAAa0c,EACfnC,QAAO1e,IACN,MAAMqR,EAAMrR,EAAU0B,WACtB,OAAIohB,EAAKxE,IAAIjN,KAGXyR,EAAKhC,IAAIzP,IACF,MAGVpN,KAAIjE,IAAa,CAAEuD,UAAW,KAAMvD,UAAAA,MAiBzCmD,OAAgC,2BAAxB0d,EAAwB,yBAAxBA,EAAwB,gBAC9B,GAAuB,IAAnBA,EAAQva,OACV,MAAM,IAAIvF,MAAM,cAIlB,MAAM+hB,EAAO,IAAIC,IACXC,EAAgB,GACtB,IAAK,MAAMC,KAAUpC,EAAS,CAC5B,MAAMxP,EAAM4R,EAAOjjB,UAAU0B,WACzBohB,EAAKxE,IAAIjN,KAGXyR,EAAKhC,IAAIzP,GACT2R,EAAc7b,KAAK8b,IAIvBja,KAAK7E,WAAa6e,EAAc/e,KAAIgf,IAAU,CAC5C1f,UAAW,KACXvD,UAAWijB,EAAOjjB,cAGpB,MAAM2D,EAAUqF,KAAKuZ,WACrBvZ,KAAKka,aAAavf,KAAYqf,GAC9Bha,KAAKma,kBAAkBxf,EAAQ0U,aAAa,GAU9C+K,cAAuC,2BAAxBvC,EAAwB,yBAAxBA,EAAwB,gBACrC,GAAuB,IAAnBA,EAAQva,OACV,MAAM,IAAIvF,MAAM,cAIlB,MAAM+hB,EAAO,IAAIC,IACXC,EAAgB,GACtB,IAAK,MAAMC,KAAUpC,EAAS,CAC5B,MAAMxP,EAAM4R,EAAOjjB,UAAU0B,WACzBohB,EAAKxE,IAAIjN,KAGXyR,EAAKhC,IAAIzP,GACT2R,EAAc7b,KAAK8b,IAIvB,MAAMtf,EAAUqF,KAAKuZ,WACrBvZ,KAAKka,aAAavf,KAAYqf,GAMhCE,aAAavf,GACX,MAAMgc,EAAWhc,EAAQ0U,YAD+B,2BAAxBwI,EAAwB,iCAAxBA,EAAwB,kBAExDA,EAAQve,SAAQ2gB,IACd,MAAM1f,EAAYmX,IAAAA,KAAAA,SAAmBiF,EAAUsD,EAAOpH,WACjDwH,KAAAA,cAAcJ,EAAOjjB,UAAWuE,EAAShB,OASlDM,aAAauc,EAAmB7c,GACzBgf,KAAAA,WACLvZ,KAAKqa,cAAcjD,EAAQ7c,GAM7B8f,cAAcjD,EAAmB7c,GAC/B8e,GAA+B,KAArB9e,EAAU+C,QAEpB,MAAM0X,EAAQhV,KAAK7E,WAAW0d,WAAUyB,GACtClD,EAAOlgB,OAAOojB,EAAQtjB,aAEpBge,GAAAA,EAAQ,EACJ,UAAIjd,MAAO,mBAAkBqf,EAAO1e,cAGvCyC,KAAAA,WAAW6Z,GAAOza,UAAYkB,EAAAA,OAAAA,KAAYlB,GAMjDggB,mBACS,OAAAva,KAAKma,kBAAkBna,KAAKpF,oBAAoB,GAMzDuf,kBAAkBxD,EAAkB6D,GAClC,IAAK,MAAM,UAACjgB,EAAD,UAAYvD,KAAcgJ,KAAK7E,WACpCZ,GAAc,OAAdA,GACF,GAAIigB,EACF,OAAO,OAGT,IACG9I,IAAAA,KAAAA,SAAAA,OAA0BiF,EAAUpc,EAAWvD,EAAUuE,YAE1D,OAAO,EAIb,OAAO,EAMT8T,UAAUoL,GACF,2BAACD,EAAD,iBAAuBD,GAAoBne,OAAO+S,OACtD,CAACqL,sBAAsB,EAAMD,kBAAkB,GAC/CE,GAGI9D,EAAW3W,KAAKpF,mBAEpB2f,GAAAA,IACCva,KAAKma,kBAAkBxD,EAAU6D,GAElC,MAAM,IAAIziB,MAAM,iCAGlB,OAAOiI,KAAK0a,WAAW/D,GAMzB+D,WAAW/D,GACH,iBAACxb,GAAc6E,KACf2a,EAA2B,GACjC7E,GAAsB6E,EAAgBxf,EAAWmC,QACjD,MAAMsd,EACJD,EAAerd,OAA6B,GAApBnC,EAAWmC,OAAcqZ,EAASrZ,OACtDud,EAAkBpf,EAAAA,OAAAA,MAAamf,GAoBrC,OAnBAvB,GAAUle,EAAWmC,OAAS,KAC9B7B,EAAAA,OAAAA,KAAYkf,GAAgBnK,KAAKqK,EAAiB,GAClD1f,EAAW7B,SAAQ,CAAC,EAAa0b,KAAU,IAAvB,UAACza,GAAsB,EACvB,OAAdA,IACF8e,GAA+B,KAArB9e,EAAU+C,OAAgB,gCACpC7B,EAAAA,OAAAA,KAAYlB,GAAWiW,KACrBqK,EACAF,EAAerd,OAAiB,GAAR0X,OAI9B2B,EAASnG,KACPqK,EACAF,EAAerd,OAA6B,GAApBnC,EAAWmC,QAErC+b,GACEwB,EAAgBvd,QAAU0V,GACzB,0BAAyB6H,EAAgBvd,YAAY0V,MAEjD6H,EAOLjP,WAEF,OADAyN,GAAuC,IAA7BrZ,KAAK0U,aAAapX,QACrB0C,KAAK0U,aAAa,GAAG9I,KAAK3Q,KAAI6f,GAAUA,EAAO1D,SAOpDzG,gBAEF,OADA0I,GAAuC,IAA7BrZ,KAAK0U,aAAapX,QACrB0C,KAAK0U,aAAa,GAAG/D,UAO1Bha,WAEF,OADA0iB,GAAuC,IAA7BrZ,KAAK0U,aAAapX,QACrB0C,KAAK0U,aAAa,GAAG/d,KAMnB,YAAC+E,GAEV,IAAIkb,EAAY,IAAIlb,GAEpB,MAAMif,EAAiB7E,GAAsBc,GACzCzb,IAAAA,EAAa,GACZ,QAAIiC,EAAI,EAAGA,EAAIud,EAAgBvd,IAAK,CACjC7C,MAAAA,EAAYqc,EAAU5Y,MAAM,EAAGiV,IACrC2D,EAAYA,EAAU5Y,MAAMiV,IAC5B9X,EAAWgD,KAAK3D,IAAAA,OAAYiB,EAAAA,OAAAA,KAAYlB,KAG1C,OAAOgd,GAAYwD,SAASzG,GAAQ2B,KAAKW,GAAYzb,GAMxC,gBACbR,GAEa,IADbQ,EACa,uDADe,GAE5B,MAAMT,EAAc,IAAI6c,GAyCxB,OAxCA7c,EAAY+Z,gBAAkB9Z,EAAQ8Z,gBAClC9Z,EAAQ4Z,OAAOU,sBAAwB,IACzCva,EAAY8c,SAAW7c,EAAQ6Z,YAAY,IAE7CrZ,EAAW7B,SAAQ,CAACiB,EAAWya,KAC7B,MAAMgG,EAAgB,CACpBzgB,UACEA,GAAaC,IAAAA,OAAYwc,IACrB,KACAxc,IAAAA,OAAYD,GAClBvD,UAAW2D,EAAQ6Z,YAAYQ,IAEjCta,EAAYS,WAAWgD,KAAK6c,MAG9BrgB,EAAQ+Z,aAAapb,SAAQyc,IACrBnK,MAAAA,EAAOmK,EAAYC,SAAS/a,KAAI2Z,IACpC,MAAMwC,EAASzc,EAAQ6Z,YAAYI,GAC5B,OACLwC,OAAAA,EACAC,SACE3c,EAAYS,WAAW8f,MACrBH,GAAUA,EAAO9jB,UAAU0B,aAAe0e,EAAO1e,cAC9CiC,EAAQoa,gBAAgBH,GAC/B0C,WAAY3c,EAAQua,kBAAkBN,OAI1Cla,EAAYga,aAAavW,KACvB,IAAI+Y,GAAuB,CACzBtL,KAAAA,EACA+E,UAAWhW,EAAQ6Z,YAAYuB,EAAYjB,gBAC3Cne,KAAM6D,IAAAA,OAAYub,EAAYpf,YAKpC+D,EAAYgd,SAAW/c,EACvBD,EAAYid,MAAQjd,EAAY2V,SAEzB3V,G,MC1xBEwgB,GAAsB,IAAIpkB,GACrC,+CAGWqkB,GAA+B,IAAIrkB,GAC9C,+CAGWskB,GAA6B,IAAItkB,GAC5C,+CAGWukB,GAAmC,IAAIvkB,GAClD,+CAGWwkB,GAAqB,IAAIxkB,GACpC,+CAGWykB,GAAwB,IAAIzkB,GACvC,+CAGW0kB,GAA4B,IAAI1kB,GAC3C,+CAGW2kB,GAA6B,IAAI3kB,GAC5C,+CAGW4kB,GAA8B,IAAI5kB,GAC7C,+CClBK6kB,eAAeC,GACpBjC,EACAjf,EACAmd,EACAvJ,GAEMuN,MAAAA,EAAcvN,GAAW,CAC7BwN,cAAexN,EAAQwN,cACvBC,oBAAqBzN,EAAQyN,qBAAuBzN,EAAQ0N,WAC5DC,WAAY3N,EAAQ2N,YAGhB1hB,QAAkBof,EAAWuC,gBACjCxhB,EACAmd,EACAgE,GAGIM,SACExC,EAAWyC,mBACf7hB,EACA+T,GAAWA,EAAQ0N,aAErBrf,MAEEwf,GAAAA,EAAO/K,IACT,MAAM,IAAIrZ,MACP,eAAcwC,aAAqBuR,KAAKC,UAAUoQ,OAIvD,OAAO5hB,EC/CF,SAAS8hB,GAAMC,GACb,WAAItjB,SAAQnB,GAAW0kB,WAAW1kB,EAASykB,KCqB7C,SAASE,GACdC,EACAjL,GAEMkL,MAAAA,EACJD,EAAKE,OAAO5I,MAAQ,EAAI0I,EAAKE,OAAO5I,KR4GjC,SAAkB0I,EAAWjL,GAC9BsC,IAAAA,EAAQ,EAQZ,OAPA2I,EAAKE,OAAOnL,OAAOlY,SAAS0e,IACtBA,EAAKjE,MAAQ,EACfD,GAASkE,EAAKjE,KACiB,oBAAfiE,EAAKlE,QACrBA,GAASkE,EAAKlE,MAAMtC,EAAOwG,EAAK9E,eAG7BY,EQrHsC4C,CAAgB+F,EAAMjL,GAC7D7a,EAAO8E,EAAAA,OAAAA,MAAaihB,GACpBE,EAAexgB,OAAO+S,OAAO,CAAC4G,YAAa0G,EAAKzH,OAAQxD,GAE9D,OADAiL,EAAKE,OAAOvN,OAAOwN,EAAcjmB,GAC1BA,EAOF,SAASkmB,GACdJ,EACA/gB,GAEA,IAAI/E,EACA,IACFA,EAAO8lB,EAAKE,OAAOpJ,OAAO7X,GAC1B,MAAO0V,GACP,MAAM,IAAIrZ,MAAM,wBAA0BqZ,GAG5C,GAAIza,EAAKof,cAAgB0G,EAAKzH,MAC5B,MAAM,IAAIjd,MACP,mDAAkDpB,EAAKof,kBAAkB0G,EAAKzH,SAInF,OAAOre,ECjDF,MAAMmmB,GAAsB3J,EAAAA,GAAkB,wBCQ/C4J,GAAqB5J,EAAAA,GAUzB,CACAA,EAAAA,GAAiB,WACjBA,EAAAA,GAAiB,SACjBuD,GAAiB,oBACjBA,GAAiB,SACjBvD,EAAAA,GACE,CAAC2J,IACD,mBAISE,GAAuBD,GAAmBhJ,KAWhD,MAAMkJ,GAQXlnB,YAAY4U,GAAwB,KAPpCuS,sBAOoC,OANpCjM,WAMoC,OALpCkM,mBAKoC,EAClCnd,KAAKkd,iBAAmBvS,EAAKuS,iBAC7Bld,KAAKiR,MAAQtG,EAAKsG,MAClBjR,KAAKmd,cAAgBxS,EAAKwS,cASN,uBACpBzhB,GAEA,MAAM0hB,EAAeL,GAAmBxJ,OAAOhY,EAASG,GAAS,GAC1D,WAAIuhB,GAAa,CACtBC,iBAAkB,IAAIpmB,GAAUsmB,EAAaF,kBAC7CjM,MAAO,IAAIna,GAAUsmB,EAAanM,OAAOvY,WACzCykB,cAAeC,EAAaD,iBC0I3B,MAAME,GAIXtnB,eAK4B,6BAC1BggB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAEhC,MACM4M,EADwBpK,EAAAA,GAAiB,eACPI,OAAOwC,EAAYpf,MAE3D,IAAI8lB,EACJ,IAAK,MAAOe,EAAQb,KAAWvgB,OAAOqhB,QAAQC,IAC5C,GAAIf,EAAO3H,OAASuI,EAAW,CAC7Bd,EAAOe,EACP,MAIA,IAACf,EACH,MAAM,IAAI1kB,MAAM,uDAGlB,OAAO0kB,EAMiB,2BACxB1G,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,eAACgS,EAAD,MAAWC,EAAX,UAAkBlN,GAAakM,GACnCa,GAA2BI,OAC3B/H,EAAYpf,MAGP,OACLonB,WAAYhI,EAAYnK,KAAK,GAAGwL,OAChC4G,iBAAkBjI,EAAYnK,KAAK,GAAGwL,OACtCwG,SAAAA,EACAC,MAAAA,EACAlN,UAAW,IAAI7Z,GAAU6Z,IAOR,sBAACoF,GACpB/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,eAACgS,GAAYf,GACjBa,GAA2BO,SAC3BlI,EAAYpf,MAGP,OACLonB,WAAYhI,EAAYnK,KAAK,GAAGwL,OAChC8G,SAAUnI,EAAYnK,KAAK,GAAGwL,OAC9BwG,SAAAA,GAOyB,8BAC3B7H,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,eAACgS,EAAD,KAAWlN,EAAX,UAAiBC,GAAakM,GAClCa,GAA2BS,iBAC3BpI,EAAYpf,MAGP,OACLonB,WAAYhI,EAAYnK,KAAK,GAAGwL,OAChCgH,WAAYrI,EAAYnK,KAAK,GAAGwL,OAChC8G,SAAUnI,EAAYnK,KAAK,GAAGwL,OAC9BwG,SAAAA,EACAlN,KAAAA,EACAC,UAAW,IAAI7Z,GAAU6Z,IAOR,sBAACoF,GACpB/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,YAACiS,GAAShB,GACda,GAA2BW,SAC3BtI,EAAYpf,MAGP,OACL2nB,cAAevI,EAAYnK,KAAK,GAAGwL,OACnCyG,MAAAA,GAOyB,8BAC3B9H,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,WAAC2S,EAAD,KAAO7N,EAAP,MAAamN,EAAb,UAAoBlN,GAAakM,GACrCa,GAA2Bc,iBAC3BzI,EAAYpf,MAGP,OACL2nB,cAAevI,EAAYnK,KAAK,GAAGwL,OACnCgH,WAAY,IAAItnB,GAAUynB,GAC1B7N,KAAAA,EACAmN,MAAAA,EACAlN,UAAW,IAAI7Z,GAAU6Z,IAOV,oBAACoF,GAClB/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,gBAAC+E,GAAakM,GAClBa,GAA2Be,OAC3B1I,EAAYpf,MAGP,OACL2nB,cAAevI,EAAYnK,KAAK,GAAGwL,OACnCzG,UAAW,IAAI7Z,GAAU6Z,IAOF,4BACzBoF,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,WAAC2S,EAAD,KAAO7N,EAAP,UAAaC,GAAakM,GAC9Ba,GAA2BgB,eAC3B3I,EAAYpf,MAGP,OACL2nB,cAAevI,EAAYnK,KAAK,GAAGwL,OACnCgH,WAAY,IAAItnB,GAAUynB,GAC1B7N,KAAAA,EACAC,UAAW,IAAI7Z,GAAU6Z,IAOF,4BACzBoF,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,WAAC2S,EAAD,KAAO7N,EAAP,SAAakN,EAAb,MAAuBC,EAAvB,UAA8BlN,GAAakM,GAC/Ca,GAA2BiB,eAC3B5I,EAAYpf,MAGP,OACLonB,WAAYhI,EAAYnK,KAAK,GAAGwL,OAChC4G,iBAAkBjI,EAAYnK,KAAK,GAAGwL,OACtCgH,WAAY,IAAItnB,GAAUynB,GAC1B7N,KAAAA,EACAkN,SAAAA,EACAC,MAAAA,EACAlN,UAAW,IAAI7Z,GAAU6Z,IAOD,6BAC1BoF,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,iBAACgT,GAAc/B,GACnBa,GAA2BmB,uBAC3B9I,EAAYpf,MAGP,OACLmoB,YAAa/I,EAAYnK,KAAK,GAAGwL,OACjC8F,iBAAkB,IAAIpmB,GAAU8nB,IAOX,0BACvB7I,GAUO,OARP/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEtCiR,GACEa,GAA2BqB,oBAC3BhJ,EAAYpf,MAGP,CACLmoB,YAAa/I,EAAYnK,KAAK,GAAGwL,OACjC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,QAOhB,2BACxBrB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,eAACgS,GAAYf,GACjBa,GAA2BsB,qBAC3BjJ,EAAYpf,MAGP,OACLmoB,YAAa/I,EAAYnK,KAAK,GAAGwL,OACjC8G,SAAUnI,EAAYnK,KAAK,GAAGwL,OAC9B8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,OACtCwG,SAAAA,GAOuB,4BACzB7H,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,iBAACgT,GAAc/B,GACnBa,GAA2BuB,sBAC3BlJ,EAAYpf,MAGP,OACLmoB,YAAa/I,EAAYnK,KAAK,GAAGwL,OACjC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,OACtC8H,oBAAqB,IAAIpoB,GAAU8nB,IAOlB,sBAACjO,GAChB,IAACA,EAAUzZ,OAAOioB,GAAcxO,WAClC,MAAM,IAAI5Y,MAAM,uDAOC,sBAAC6T,EAAkBwT,GACtC,GAAIxT,EAAKtO,OAAS8hB,EACV,UAAIrnB,MACsB6T,8BAAAA,EAAKtO,kCAAkC8hB,M,MAiFhE1B,GAA6BthB,OAAOijB,OAI9C,CACDvB,OAAQ,CACN9I,MAAO,EACP2H,OAAQxJ,EAAAA,GAA0D,CAChEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,YAClBA,EAAAA,GAAkB,SAClBuD,GAAiB,gBAGrB+H,OAAQ,CACNzJ,MAAO,EACP2H,OAAQxJ,EAAAA,GAA0D,CAChEA,EAAAA,GAAiB,eACjBuD,GAAiB,gBAGrBuH,SAAU,CACRjJ,MAAO,EACP2H,OAAQxJ,EAAAA,GAA4D,CAClEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,eAGtBwL,eAAgB,CACd3J,MAAO,EACP2H,OAAQxJ,EAAAA,GAAkE,CACxEA,EAAAA,GAAiB,eACjBuD,GAAiB,QACjBA,GAAkB,QAClBvD,EAAAA,GAAkB,YAClBA,EAAAA,GAAkB,SAClBuD,GAAiB,gBAGrBqI,oBAAqB,CACnB/J,MAAO,EACP2H,OAAQxJ,EAAAA,GAEN,CAACA,EAAAA,GAAiB,kBAEtB6L,qBAAsB,CACpBhK,MAAO,EACP2H,OAAQxJ,EAAAA,GAEN,CAACA,EAAAA,GAAiB,eAAgBA,EAAAA,GAAkB,eAExD0L,uBAAwB,CACtB7J,MAAO,EACP2H,OAAQxJ,EAAAA,GAEN,CAACA,EAAAA,GAAiB,eAAgBuD,GAAiB,iBAEvDuI,sBAAuB,CACrBjK,MAAO,EACP2H,OAAQxJ,EAAAA,GAEN,CAACA,EAAAA,GAAiB,eAAgBuD,GAAiB,iBAEvD2H,SAAU,CACRrJ,MAAO,EACP2H,OAAQxJ,EAAAA,GAA4D,CAClEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,YAGtBqL,iBAAkB,CAChBxJ,MAAO,EACP2H,OAAQxJ,EAAAA,GACN,CACEA,EAAAA,GAAiB,eACjBuD,GAAiB,QACjBA,GAAkB,QAClBvD,EAAAA,GAAkB,SAClBuD,GAAiB,gBAIvBgI,eAAgB,CACd1J,MAAO,GACP2H,OAAQxJ,EAAAA,GAAkE,CACxEA,EAAAA,GAAiB,eACjBuD,GAAiB,QACjBA,GAAkB,QAClBA,GAAiB,gBAGrByH,iBAAkB,CAChBnJ,MAAO,GACP2H,OAAQxJ,EAAAA,GACN,CACEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,YAClBuD,GAAkB,QAClBA,GAAiB,kBASlB,MAAMyI,GAIXppB,eAYoB,qBAACgB,GACnB,MACMJ,EAAO6lB,GADAkB,GAA2BI,OACV,CAC5BF,SAAU7mB,EAAO6mB,SACjBC,MAAO9mB,EAAO8mB,MACdlN,UAAWpV,EAASxE,EAAO4Z,UAAUpV,cAGhC,WAAI2b,GAAuB,CAChCtL,KAAM,CACJ,CAACwL,OAAQrgB,EAAOgnB,WAAY1G,UAAU,EAAMC,YAAY,GACxD,CAACF,OAAQrgB,EAAOinB,iBAAkB3G,UAAU,EAAMC,YAAY,IAEhE3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOW,gBACbI,GAEA,IAAIJ,EACAiV,EACA,kBAAgB7U,EAAQ,CAE1BJ,EAAO6lB,GADMkB,GAA2BS,iBAChB,CACtBP,SAAU7mB,EAAO6mB,SACjBlN,KAAM3Z,EAAO2Z,KACbC,UAAWpV,EAASxE,EAAO4Z,UAAUpV,cAEvCqQ,EAAO,CACL,CAACwL,OAAQrgB,EAAOgnB,WAAY1G,UAAU,EAAOC,YAAY,GACzD,CAACF,OAAQrgB,EAAOqnB,WAAY/G,UAAU,EAAMC,YAAY,GACxD,CAACF,OAAQrgB,EAAOmnB,SAAU7G,UAAU,EAAOC,YAAY,QAEpD,CAEL3gB,EAAO6lB,GADMkB,GAA2BO,SAChB,CAACL,SAAU7mB,EAAO6mB,WAC1ChS,EAAO,CACL,CAACwL,OAAQrgB,EAAOgnB,WAAY1G,UAAU,EAAMC,YAAY,GACxD,CAACF,OAAQrgB,EAAOmnB,SAAU7G,UAAU,EAAOC,YAAY,IAIpD,WAAIJ,GAAuB,CAChCtL,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOS,cACXI,GAEA,IAAIJ,EACAiV,EACA,kBAAgB7U,EAAQ,CAE1BJ,EAAO6lB,GADMkB,GAA2BgB,eAChB,CACtBH,KAAMhjB,EAASxE,EAAOqnB,WAAW7iB,YACjCmV,KAAM3Z,EAAO2Z,KACbC,UAAWpV,EAASxE,EAAO4Z,UAAUpV,cAEvCqQ,EAAO,CACL,CAACwL,OAAQrgB,EAAOunB,cAAejH,UAAU,EAAOC,YAAY,GAC5D,CAACF,OAAQrgB,EAAOqnB,WAAY/G,UAAU,EAAMC,YAAY,QAErD,CAEL3gB,EAAO6lB,GADMkB,GAA2Be,OAChB,CACtB9N,UAAWpV,EAASxE,EAAO4Z,UAAUpV,cAEvCqQ,EAAO,CAAC,CAACwL,OAAQrgB,EAAOunB,cAAejH,UAAU,EAAMC,YAAY,IAG9D,WAAIJ,GAAuB,CAChCtL,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAQwB,6BAC1BI,GAEA,MACMJ,EAAO6lB,GADAkB,GAA2BiB,eACV,CAC5BJ,KAAMhjB,EAASxE,EAAOqnB,WAAW7iB,YACjCmV,KAAM3Z,EAAO2Z,KACbkN,SAAU7mB,EAAO6mB,SACjBC,MAAO9mB,EAAO8mB,MACdlN,UAAWpV,EAASxE,EAAO4Z,UAAUpV,cAEnCqQ,IAAAA,EAAO,CACT,CAACwL,OAAQrgB,EAAOgnB,WAAY1G,UAAU,EAAMC,YAAY,GACxD,CAACF,OAAQrgB,EAAOinB,iBAAkB3G,UAAU,EAAOC,YAAY,IAM1D,OAJHvgB,EAAOqnB,YAAcrnB,EAAOgnB,YAC9BnS,EAAKzN,KAAK,CAACiZ,OAAQrgB,EAAOqnB,WAAY/G,UAAU,EAAMC,YAAY,IAG7D,IAAIJ,GAAuB,CAChCtL,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOqB,0BACvBI,GAEA,MAAM2D,EAAc,IAAI6c,GACpB,eAAgBxgB,GAAU,SAAUA,EACtC2D,EAAYod,IACVqH,GAAcG,sBAAsB,CAClCvB,WAAYhnB,EAAOgnB,WACnBC,iBAAkBjnB,EAAO+nB,YACzBV,WAAYrnB,EAAOqnB,WACnB1N,KAAM3Z,EAAO2Z,KACbkN,SAAU7mB,EAAO6mB,SACjBC,MAAOb,GACPrM,UAAW3Q,KAAK2Q,aAIpBjW,EAAYod,IACVqH,GAAcI,cAAc,CAC1BxB,WAAYhnB,EAAOgnB,WACnBC,iBAAkBjnB,EAAO+nB,YACzBlB,SAAU7mB,EAAO6mB,SACjBC,MAAOb,GACPrM,UAAW3Q,KAAK2Q,aAKtB,MAAM6O,EAAa,CACjBV,YAAa/nB,EAAO+nB,YACpB5B,iBAAkBnmB,EAAOmmB,kBAI3B,OADAxiB,EAAYod,IAAI9X,KAAKyf,gBAAgBD,IAC9B9kB,EAMa,uBACpB3D,GAEA,MACMJ,EAAO6lB,GADAkB,GAA2BmB,uBACV,CAC5BD,WAAYrjB,EAASxE,EAAOmmB,iBAAiB3hB,cAEzCmkB,EAAkB,CACtB9T,KAAM,CACJ,CAACwL,OAAQrgB,EAAO+nB,YAAazH,UAAU,EAAOC,YAAY,GAC1D,CACEF,OAAQiE,GACRhE,UAAU,EACVC,YAAY,GAEd,CAACF,OAAQkE,GAAoBjE,UAAU,EAAOC,YAAY,IAE5D3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,GAEF,OAAO,IAAIugB,GAAuBwI,GAMjB,oBAAC3oB,GAClB,MACMJ,EAAO6lB,GADAkB,GAA2BqB,qBAElCW,EAAkB,CACtB9T,KAAM,CACJ,CAACwL,OAAQrgB,EAAO+nB,YAAazH,UAAU,EAAOC,YAAY,GAC1D,CACEF,OAAQiE,GACRhE,UAAU,EACVC,YAAY,GAEd,CAACF,OAAQrgB,EAAOmmB,iBAAkB7F,UAAU,EAAMC,YAAY,IAEhE3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,GAEF,OAAO,IAAIugB,GAAuBwI,GAMhB,qBAAC3oB,GACnB,MACMJ,EAAO6lB,GADAkB,GAA2BsB,qBACV,CAACpB,SAAU7mB,EAAO6mB,WAEzC,WAAI1G,GAAuB,CAChCtL,KAAM,CACJ,CAACwL,OAAQrgB,EAAO+nB,YAAazH,UAAU,EAAOC,YAAY,GAC1D,CAACF,OAAQrgB,EAAOmnB,SAAU7G,UAAU,EAAOC,YAAY,GACvD,CACEF,OAAQiE,GACRhE,UAAU,EACVC,YAAY,GAEd,CACEF,OAAQkE,GACRjE,UAAU,EACVC,YAAY,GAEd,CAACF,OAAQrgB,EAAOmmB,iBAAkB7F,UAAU,EAAMC,YAAY,IAEhE3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAQiB,sBAACI,GACpB,MACMJ,EAAO6lB,GADAkB,GAA2BuB,sBACV,CAC5BL,WAAYrjB,EAASxE,EAAOmoB,oBAAoB3jB,cAG3C,WAAI2b,GAAuB,CAChCtL,KAAM,CACJ,CAACwL,OAAQrgB,EAAO+nB,YAAazH,UAAU,EAAOC,YAAY,GAC1D,CAACF,OAAQrgB,EAAOmmB,iBAAkB7F,UAAU,EAAMC,YAAY,IAEhE3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOW,gBACbI,GAEA,IAAIJ,EACAiV,EACA,kBAAgB7U,EAAQ,CAE1BJ,EAAO6lB,GADMkB,GAA2Bc,iBAChB,CACtBD,KAAMhjB,EAASxE,EAAOqnB,WAAW7iB,YACjCmV,KAAM3Z,EAAO2Z,KACbmN,MAAO9mB,EAAO8mB,MACdlN,UAAWpV,EAASxE,EAAO4Z,UAAUpV,cAEvCqQ,EAAO,CACL,CAACwL,OAAQrgB,EAAOunB,cAAejH,UAAU,EAAOC,YAAY,GAC5D,CAACF,OAAQrgB,EAAOqnB,WAAY/G,UAAU,EAAMC,YAAY,QAErD,CAEL3gB,EAAO6lB,GADMkB,GAA2BW,SAChB,CACtBR,MAAO9mB,EAAO8mB,QAEhBjS,EAAO,CAAC,CAACwL,OAAQrgB,EAAOunB,cAAejH,UAAU,EAAMC,YAAY,IAG9D,WAAIJ,GAAuB,CAChCtL,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,KA7SOwoB,GASJxO,UAAuB,IAAI7Z,GAChC,oCCrrBJ,MAAM6oB,GAAa3M,GAAmB,IAK/B,MAAM4M,GAIX7pB,eAa0B,2BAACsgB,GACzB,OACE,GACCwJ,KAAKC,KAAKzJ,EAAauJ,GAAOG,WAC7B,EACA,GAcW,kBACfpG,EACAqG,EACAC,EACAtP,EACAha,GAEA,CACE,MAAMupB,QAAsBvG,EAAWwG,kCACrCxpB,EAAK2G,QAID8iB,QAAoBzG,EAAW0G,eACnCJ,EAAQjpB,UACR,aAGE0D,IAAAA,EAAkC,KAClC0lB,GAAgB,OAAhBA,EAAsB,CACpBA,GAAAA,EAAYE,WAEd,OADAvV,QAAQvT,MAAM,uDACP,EAGL4oB,EAAYzpB,KAAK2G,SAAW3G,EAAK2G,SACnC5C,EAAcA,GAAe,IAAI6c,GACjC7c,EAAYod,IACVqH,GAAcoB,SAAS,CACrBjC,cAAe2B,EAAQjpB,UACvB6mB,MAAOlnB,EAAK2G,WAKb8iB,EAAYI,MAAMtpB,OAAOyZ,KAC5BjW,EAAcA,GAAe,IAAI6c,GACjC7c,EAAYod,IACVqH,GAAchQ,OAAO,CACnBmP,cAAe2B,EAAQjpB,UACvB2Z,UAAAA,MAKFyP,EAAYxC,SAAWsC,IACzBxlB,EAAcA,GAAe,IAAI6c,GACjC7c,EAAYod,IACVqH,GAAcsB,SAAS,CACrB1C,WAAYiC,EAAMhpB,UAClBknB,SAAU+B,EAAQjpB,UAClB4mB,SAAUsC,EAAgBE,EAAYxC,kBAK5CljB,GAAc,IAAI6c,IAAcO,IAC9BqH,GAAcI,cAAc,CAC1BxB,WAAYiC,EAAMhpB,UAClBgnB,iBAAkBiC,EAAQjpB,UAC1B4mB,SAAUsC,EAAgB,EAAIA,EAAgB,EAC9CrC,MAAOlnB,EAAK2G,OACZqT,UAAAA,KAOc,OAAhBjW,SACIkhB,GACJjC,EACAjf,EACA,CAACslB,EAAOC,GACR,CACEjE,WAAY,cAMpB,MAAM0E,EAAavN,EAAAA,GAQjB,CACAA,EAAAA,GAAiB,eACjBA,EAAAA,GAAiB,UACjBA,EAAAA,GAAiB,eACjBA,EAAAA,GAAiB,sBACjBA,EAAAA,GACEA,EAAAA,GAAgB,QAChBA,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,WAIE4M,EAAYH,GAAOG,UACrBpM,IAAAA,EAAS,EACTzF,EAAQvX,EACRoE,EAAe,GACnB,KAAOmT,EAAM5Q,OAAS,GAAG,CACjB4D,MAAAA,EAAQgN,EAAMlQ,MAAM,EAAG+hB,GACvBppB,EAAO8E,EAAAA,OAAAA,MAAaskB,EAAY,IACtCW,EAAWtR,OACT,CACE2G,YAAa,EACbpC,OAAAA,EACAzS,MAAOA,EACPyf,YAAa,EACbC,mBAAoB,GAEtBjqB,GAGF,MAAM+D,GAAc,IAAI6c,IAAcO,IAAI,CACxClM,KAAM,CAAC,CAACwL,OAAQ6I,EAAQjpB,UAAWqgB,UAAU,EAAMC,YAAY,IAC/D3G,UAAAA,EACAha,KAAAA,IASEgjB,GAPJ5e,EAAaoD,KACXyd,GAA0BjC,EAAYjf,EAAa,CAACslB,EAAOC,GAAU,CACnEjE,WAAY,eAKZrC,EAAWkH,aAAazI,SAAS,cAAe,CAC5C0I,MAAAA,EAAsB,QACtBzE,GAAM,IAAOyE,GAGrBnN,GAAUoM,EACV7R,EAAQA,EAAMlQ,MAAM+hB,SAEhB/mB,QAAQ+nB,IAAIhmB,GAGlB,CACE,MAAM2lB,EAAavN,EAAAA,GAA2C,CAC5DA,EAAAA,GAAiB,iBAGbxc,EAAO8E,EAAAA,OAAAA,MAAailB,EAAW3M,MACrC2M,EAAWtR,OACT,CACE2G,YAAa,GAEfpf,GAGF,MAAM+D,GAAc,IAAI6c,IAAcO,IAAI,CACxClM,KAAM,CACJ,CAACwL,OAAQ6I,EAAQjpB,UAAWqgB,UAAU,EAAMC,YAAY,GACxD,CAACF,OAAQkE,GAAoBjE,UAAU,EAAOC,YAAY,IAE5D3G,UAAAA,EACAha,KAAAA,UAEIilB,GACJjC,EACAjf,EACA,CAACslB,EAAOC,GACR,CACEjE,WAAY,cAMlB,OAAO,GAlNE4D,GASJG,UAAoBJ,G,MC1BhBqB,GAAwB,IAAIlqB,GACvC,+CAMK,MAAMmqB,GAOe,2BAAC5K,GACzB,OAAOuJ,GAAOsB,oBAAoB7K,GAazB,YACTsD,EACAqG,EACAC,EACAkB,EACAC,GAEA,OAAOxB,GAAOyB,KAAK1H,EAAYqG,EAAOC,EAASmB,EAAiBD,IC5B7D,MAAMG,GAIXvrB,eAK4B,6BAC1BggB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAEhC,MACM4M,EADwBpK,EAAAA,GAAgB,eACNI,OAAOwC,EAAYpf,MAE3D,IAAI8lB,EACJ,IAAK,MAAOe,EAAQb,KAAWvgB,OAAOqhB,QACpC8D,IAEA,GAAI5E,EAAO3H,OAASuI,EAAW,CAC7Bd,EAAOe,EACP,MAIA,IAACf,EACH,MAAM,IAAI1kB,MACR,8DAIJ,OAAO0kB,EAMgB,0BACvB1G,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAC1B,YAAC6Q,EAAD,cAAQC,GAAiB5E,GAC7B0E,GAAmCG,aACnC3L,EAAYpf,MAEP,OAAC6qB,MAAAA,EAAOC,cAAAA,GAMY,8BAC3B1L,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAC1B,YAACzP,GAAS2b,GACd0E,GAAmCI,iBACnC5L,EAAYpf,MAEP,OAACuK,MAAAA,GAMW,sBAACyP,GAChB,IAACA,EAAUzZ,OAAO0qB,GAAqBjR,WACzC,MAAM,IAAI5Y,MACR,+D,MA4CKwpB,GAAqCnlB,OAAOijB,OAItD,CACDqC,aAAc,CACZ1M,MAAO,EACP2H,OAAQxJ,EAAAA,GAEN,CACAA,EAAAA,GAAgB,eAChBA,EAAAA,GAAiB,SACjBA,EAAAA,GAAiB,oBAGrBwO,iBAAkB,CAChB3M,MAAO,EACP2H,OAAQxJ,EAAAA,GAEN,CAACA,EAAAA,GAAgB,eAAgBA,EAAAA,GAAiB,cAOjD,MAAMyO,GAIX7rB,eASmB,oBAACgB,GAClB,MACMJ,EAAO6lB,GADA+E,GAAmCG,aAClB3qB,GACvB,WAAImgB,GAAuB,CAChCtL,KAAM,GACN+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAImB,wBACrBI,GAEA,MACMJ,EAAO6lB,GADA+E,GAAmCI,iBAClB5qB,GACvB,WAAImgB,GAAuB,CAChCtL,KAAM,GACN+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,KA/BOirB,GASJjR,UAAuB,IAAI7Z,GAChC,+C,mCCpKJ,IAAI+qB,EAAyB,qBAATC,KAAuBA,KAAO9hB,EAC9C+hB,EAAY,WAChB,SAASC,IACThiB,KAAKiiB,OAAQ,EACbjiB,KAAKkiB,aAAeL,EAAOK,aAG3B,OADAF,EAAEtlB,UAAYmlB,EACP,IAAIG,EANK,IAQhB,SAAUF,IAEO,SAAWnZ,GAE1B,IAAIwZ,EACY,oBAAqBL,EADjCK,EAEQ,WAAYL,GAAQ,aAAcM,OAF1CD,EAIA,eAAgBL,GAChB,SAAUA,GACT,WACC,IAEE,OADA,IAAIO,MACG,EACP,MAAOlsB,GACP,OAAO,GALV,GANDgsB,EAcQ,aAAcL,EAdtBK,EAeW,gBAAiBL,EAOhC,GAAIK,EACF,IAAIG,EAAc,CAChB,qBACA,sBACA,6BACA,sBACA,uBACA,sBACA,uBACA,wBACA,yBAGEC,EACFC,YAAYC,QACZ,SAASC,GACP,OAAOA,GAAOJ,EAAYnJ,QAAQ/c,OAAOM,UAAUhE,SAASyJ,KAAKugB,KAAS,GAIhF,SAASC,EAAczpB,GAIrB,GAHoB,kBAATA,IACTA,EAAO8Q,OAAO9Q,IAEZ,4BAA4B0pB,KAAK1pB,GACnC,MAAM,IAAI2X,UAAU,0CAEtB,OAAO3X,EAAK2R,cAGd,SAASgY,EAAelmB,GAItB,MAHqB,kBAAVA,IACTA,EAAQqN,OAAOrN,IAEVA,EAIT,SAASmmB,EAAY/K,GACnB,IAAIgL,EAAW,CACbC,KAAM,WACJ,IAAIrmB,EAAQob,EAAM5D,QAClB,MAAO,CAAC8O,UAAgBnT,IAAVnT,EAAqBA,MAAOA,KAU9C,OANIwlB,IACFY,EAASX,OAAOW,UAAY,WAC1B,OAAOA,IAIJA,EAGT,SAASG,EAAQC,GACfnjB,KAAK/E,IAAM,GAEPkoB,aAAmBD,EACrBC,EAAQ7pB,SAAQ,SAASqD,EAAOzD,GAC9B8G,KAAKojB,OAAOlqB,EAAMyD,KACjBqD,MACMlC,MAAMC,QAAQolB,GACvBA,EAAQ7pB,SAAQ,SAASib,GACvBvU,KAAKojB,OAAO7O,EAAO,GAAIA,EAAO,MAC7BvU,MACMmjB,GACT/mB,OAAOinB,oBAAoBF,GAAS7pB,SAAQ,SAASJ,GACnD8G,KAAKojB,OAAOlqB,EAAMiqB,EAAQjqB,MACzB8G,MAgEP,SAASsjB,EAASC,GAChB,GAAIA,EAAKC,SACP,OAAOxqB,QAAQlB,OAAO,IAAI+Y,UAAU,iBAEtC0S,EAAKC,UAAW,EAGlB,SAASC,EAAgBC,GACvB,OAAO,IAAI1qB,SAAQ,SAASnB,EAASC,GACnC4rB,EAAOC,OAAS,WACd9rB,EAAQ6rB,EAAOnsB,SAEjBmsB,EAAOE,QAAU,WACf9rB,EAAO4rB,EAAOlsB,WAKpB,SAASqsB,EAAsBC,GAC7B,IAAIJ,EAAS,IAAIK,WACbC,EAAUP,EAAgBC,GAE9B,OADAA,EAAOO,kBAAkBH,GAClBE,EAoBT,SAASE,EAAYnlB,GACnB,GAAIA,EAAIf,MACN,OAAOe,EAAIf,MAAM,GAEjB,IAAImmB,EAAO,IAAI9pB,WAAW0E,EAAInD,YAE9B,OADAuoB,EAAKxqB,IAAI,IAAIU,WAAW0E,IACjBolB,EAAKzoB,OAIhB,SAAS0oB,IA0FP,OAzFApkB,KAAKwjB,UAAW,EAEhBxjB,KAAKqkB,UAAY,SAASd,GAhM5B,IAAoBb,EAiMhB1iB,KAAKskB,UAAYf,EACZA,EAEsB,kBAATA,EAChBvjB,KAAKukB,UAAYhB,EACRpB,GAAgBE,KAAK3lB,UAAU8nB,cAAcjB,GACtDvjB,KAAKykB,UAAYlB,EACRpB,GAAoBuC,SAAShoB,UAAU8nB,cAAcjB,GAC9DvjB,KAAK2kB,cAAgBpB,EACZpB,GAAwB5pB,gBAAgBmE,UAAU8nB,cAAcjB,GACzEvjB,KAAKukB,UAAYhB,EAAK7qB,WACbypB,GAAuBA,KA5MlBO,EA4M6Ca,IA3MjDqB,SAASloB,UAAU8nB,cAAc9B,KA4M3C1iB,KAAK6kB,iBAAmBX,EAAYX,EAAK7nB,QAEzCsE,KAAKskB,UAAY,IAAIjC,KAAK,CAACriB,KAAK6kB,oBACvB1C,IAAwBK,YAAY9lB,UAAU8nB,cAAcjB,IAAShB,EAAkBgB,IAChGvjB,KAAK6kB,iBAAmBX,EAAYX,GAEpCvjB,KAAKukB,UAAYhB,EAAOnnB,OAAOM,UAAUhE,SAASyJ,KAAKohB,GAhBvDvjB,KAAKukB,UAAY,GAmBdvkB,KAAKmjB,QAAQxrB,IAAI,kBACA,kBAAT4rB,EACTvjB,KAAKmjB,QAAQxpB,IAAI,eAAgB,4BACxBqG,KAAKykB,WAAazkB,KAAKykB,UAAUhI,KAC1Czc,KAAKmjB,QAAQxpB,IAAI,eAAgBqG,KAAKykB,UAAUhI,MACvC0F,GAAwB5pB,gBAAgBmE,UAAU8nB,cAAcjB,IACzEvjB,KAAKmjB,QAAQxpB,IAAI,eAAgB,qDAKnCwoB,IACFniB,KAAK8jB,KAAO,WACV,IAAIgB,EAAWxB,EAAStjB,MACxB,GAAI8kB,EACF,OAAOA,EAGT,GAAI9kB,KAAKykB,UACP,OAAOzrB,QAAQnB,QAAQmI,KAAKykB,WACvB,GAAIzkB,KAAK6kB,iBACd,OAAO7rB,QAAQnB,QAAQ,IAAIwqB,KAAK,CAACriB,KAAK6kB,oBACjC,GAAI7kB,KAAK2kB,cACd,MAAM,IAAI5sB,MAAM,wCAEhB,OAAOiB,QAAQnB,QAAQ,IAAIwqB,KAAK,CAACriB,KAAKukB,cAI1CvkB,KAAK+kB,YAAc,WACjB,OAAI/kB,KAAK6kB,iBACAvB,EAAStjB,OAAShH,QAAQnB,QAAQmI,KAAK6kB,kBAEvC7kB,KAAK8jB,OAAOkB,KAAKnB,KAK9B7jB,KAAKilB,KAAO,WACV,IAAIH,EAAWxB,EAAStjB,MACxB,GAAI8kB,EACF,OAAOA,EAGT,GAAI9kB,KAAKykB,UACP,OAjGN,SAAwBX,GACtB,IAAIJ,EAAS,IAAIK,WACbC,EAAUP,EAAgBC,GAE9B,OADAA,EAAOwB,WAAWpB,GACXE,EA6FImB,CAAenlB,KAAKykB,WACtB,GAAIzkB,KAAK6kB,iBACd,OAAO7rB,QAAQnB,QA5FrB,SAA+BkH,GAI7B,IAHA,IAAIolB,EAAO,IAAI9pB,WAAW0E,GACtB8U,EAAQ,IAAI/V,MAAMqmB,EAAK7mB,QAElBF,EAAI,EAAGA,EAAI+mB,EAAK7mB,OAAQF,IAC/ByW,EAAMzW,GAAK4M,OAAOC,aAAaka,EAAK/mB,IAEtC,OAAOyW,EAAM9J,KAAK,IAqFSqb,CAAsBplB,KAAK6kB,mBAC7C,GAAI7kB,KAAK2kB,cACd,MAAM,IAAI5sB,MAAM,wCAEhB,OAAOiB,QAAQnB,QAAQmI,KAAKukB,YAI5BpC,IACFniB,KAAKqlB,SAAW,WACd,OAAOrlB,KAAKilB,OAAOD,KAAKzR,KAI5BvT,KAAKslB,KAAO,WACV,OAAOtlB,KAAKilB,OAAOD,KAAKlZ,KAAKyZ,QAGxBvlB,KA1MTkjB,EAAQxmB,UAAU0mB,OAAS,SAASlqB,EAAMyD,GACxCzD,EAAOypB,EAAczpB,GACrByD,EAAQkmB,EAAelmB,GACvB,IAAI6oB,EAAWxlB,KAAK/E,IAAI/B,GACxB8G,KAAK/E,IAAI/B,GAAQssB,EAAWA,EAAW,KAAO7oB,EAAQA,GAGxDumB,EAAQxmB,UAAR,OAA8B,SAASxD,UAC9B8G,KAAK/E,IAAI0nB,EAAczpB,KAGhCgqB,EAAQxmB,UAAU/E,IAAM,SAASuB,GAE/B,OADAA,EAAOypB,EAAczpB,GACd8G,KAAKsV,IAAIpc,GAAQ8G,KAAK/E,IAAI/B,GAAQ,MAG3CgqB,EAAQxmB,UAAU4Y,IAAM,SAASpc,GAC/B,OAAO8G,KAAK/E,IAAIwqB,eAAe9C,EAAczpB,KAG/CgqB,EAAQxmB,UAAU/C,IAAM,SAAST,EAAMyD,GACrCqD,KAAK/E,IAAI0nB,EAAczpB,IAAS2pB,EAAelmB,IAGjDumB,EAAQxmB,UAAUpD,QAAU,SAASosB,EAAUC,GAC7C,IAAK,IAAIzsB,KAAQ8G,KAAK/E,IAChB+E,KAAK/E,IAAIwqB,eAAevsB,IAC1BwsB,EAASvjB,KAAKwjB,EAAS3lB,KAAK/E,IAAI/B,GAAOA,EAAM8G,OAKnDkjB,EAAQxmB,UAAUkP,KAAO,WACvB,IAAImM,EAAQ,GAIZ,OAHA/X,KAAK1G,SAAQ,SAASqD,EAAOzD,GAC3B6e,EAAM5Z,KAAKjF,MAEN4pB,EAAY/K,IAGrBmL,EAAQxmB,UAAU8Y,OAAS,WACzB,IAAIuC,EAAQ,GAIZ,OAHA/X,KAAK1G,SAAQ,SAASqD,GACpBob,EAAM5Z,KAAKxB,MAENmmB,EAAY/K,IAGrBmL,EAAQxmB,UAAU+gB,QAAU,WAC1B,IAAI1F,EAAQ,GAIZ,OAHA/X,KAAK1G,SAAQ,SAASqD,EAAOzD,GAC3B6e,EAAM5Z,KAAK,CAACjF,EAAMyD,OAEbmmB,EAAY/K,IAGjBoK,IACFe,EAAQxmB,UAAU0lB,OAAOW,UAAYG,EAAQxmB,UAAU+gB,SAqJzD,IAAImI,EAAU,CAAC,SAAU,MAAO,OAAQ,UAAW,OAAQ,OAO3D,SAASC,EAAQC,EAAOxX,GAEtB,IAAIiV,GADJjV,EAAUA,GAAW,IACFiV,KAEnB,GAAIuC,aAAiBD,EAAS,CAC5B,GAAIC,EAAMtC,SACR,MAAM,IAAI3S,UAAU,gBAEtB7Q,KAAKiM,IAAM6Z,EAAM7Z,IACjBjM,KAAK+lB,YAAcD,EAAMC,YACpBzX,EAAQ6U,UACXnjB,KAAKmjB,QAAU,IAAID,EAAQ4C,EAAM3C,UAEnCnjB,KAAKpJ,OAASkvB,EAAMlvB,OACpBoJ,KAAKgmB,KAAOF,EAAME,KAClBhmB,KAAKimB,OAASH,EAAMG,OACf1C,GAA2B,MAAnBuC,EAAMxB,YACjBf,EAAOuC,EAAMxB,UACbwB,EAAMtC,UAAW,QAGnBxjB,KAAKiM,IAAMjC,OAAO8b,GAYpB,GATA9lB,KAAK+lB,YAAczX,EAAQyX,aAAe/lB,KAAK+lB,aAAe,eAC1DzX,EAAQ6U,SAAYnjB,KAAKmjB,UAC3BnjB,KAAKmjB,QAAU,IAAID,EAAQ5U,EAAQ6U,UAErCnjB,KAAKpJ,OAjCP,SAAyBA,GACvB,IAAIsvB,EAAUtvB,EAAOuvB,cACrB,OAAOP,EAAQzM,QAAQ+M,IAAY,EAAIA,EAAUtvB,EA+BnCwvB,CAAgB9X,EAAQ1X,QAAUoJ,KAAKpJ,QAAU,OAC/DoJ,KAAKgmB,KAAO1X,EAAQ0X,MAAQhmB,KAAKgmB,MAAQ,KACzChmB,KAAKimB,OAAS3X,EAAQ2X,QAAUjmB,KAAKimB,OACrCjmB,KAAKqmB,SAAW,MAEK,QAAhBrmB,KAAKpJ,QAAoC,SAAhBoJ,KAAKpJ,SAAsB2sB,EACvD,MAAM,IAAI1S,UAAU,6CAEtB7Q,KAAKqkB,UAAUd,GAOjB,SAAShQ,EAAOgQ,GACd,IAAI1Z,EAAO,IAAI6a,SAYf,OAXAnB,EACG+C,OACAC,MAAM,KACNjtB,SAAQ,SAAS4H,GAChB,GAAIA,EAAO,CACT,IAAIqlB,EAAQrlB,EAAMqlB,MAAM,KACpBrtB,EAAOqtB,EAAMpS,QAAQjW,QAAQ,MAAO,KACpCvB,EAAQ4pB,EAAMxc,KAAK,KAAK7L,QAAQ,MAAO,KAC3C2L,EAAKuZ,OAAOoD,mBAAmBttB,GAAOstB,mBAAmB7pB,QAGxDkN,EAGT,SAAS4c,EAAaC,GACpB,IAAIvD,EAAU,IAAID,EAYlB,OAT0BwD,EAAWxoB,QAAQ,eAAgB,KACzCqoB,MAAM,SAASjtB,SAAQ,SAASqtB,GAClD,IAAIC,EAAQD,EAAKJ,MAAM,KACnBle,EAAMue,EAAMzS,QAAQmS,OACxB,GAAIje,EAAK,CACP,IAAI1L,EAAQiqB,EAAM7c,KAAK,KAAKuc,OAC5BnD,EAAQC,OAAO/a,EAAK1L,OAGjBwmB,EAKT,SAAS0D,EAASC,EAAUxY,GACrBA,IACHA,EAAU,IAGZtO,KAAKyc,KAAO,UACZzc,KAAKmc,YAA4BrM,IAAnBxB,EAAQ6N,OAAuB,IAAM7N,EAAQ6N,OAC3Dnc,KAAK+mB,GAAK/mB,KAAKmc,QAAU,KAAOnc,KAAKmc,OAAS,IAC9Cnc,KAAKgnB,WAAa,eAAgB1Y,EAAUA,EAAQ0Y,WAAa,KACjEhnB,KAAKmjB,QAAU,IAAID,EAAQ5U,EAAQ6U,SACnCnjB,KAAKiM,IAAMqC,EAAQrC,KAAO,GAC1BjM,KAAKqkB,UAAUyC,GAjDjBjB,EAAQnpB,UAAUuqB,MAAQ,WACxB,OAAO,IAAIpB,EAAQ7lB,KAAM,CAACujB,KAAMvjB,KAAKskB,aAmCvCF,EAAKjiB,KAAK0jB,EAAQnpB,WAgBlB0nB,EAAKjiB,KAAK0kB,EAASnqB,WAEnBmqB,EAASnqB,UAAUuqB,MAAQ,WACzB,OAAO,IAAIJ,EAAS7mB,KAAKskB,UAAW,CAClCnI,OAAQnc,KAAKmc,OACb6K,WAAYhnB,KAAKgnB,WACjB7D,QAAS,IAAID,EAAQljB,KAAKmjB,SAC1BlX,IAAKjM,KAAKiM,OAId4a,EAASrvB,MAAQ,WACf,IAAI8C,EAAW,IAAIusB,EAAS,KAAM,CAAC1K,OAAQ,EAAG6K,WAAY,KAE1D,OADA1sB,EAASmiB,KAAO,QACTniB,GAGT,IAAI4sB,EAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,KAE5CL,EAASM,SAAW,SAASlb,EAAKkQ,GAChC,IAA0C,IAAtC+K,EAAiB/N,QAAQgD,GAC3B,MAAM,IAAIiL,WAAW,uBAGvB,OAAO,IAAIP,EAAS,KAAM,CAAC1K,OAAQA,EAAQgH,QAAS,CAAC3qB,SAAUyT,MAGjEtD,EAAQuZ,aAAeJ,EAAKI,aAC5B,IACE,IAAIvZ,EAAQuZ,aACZ,MAAO9Q,GACPzI,EAAQuZ,aAAe,SAASvnB,EAASzB,GACvC8G,KAAKrF,QAAUA,EACfqF,KAAK9G,KAAOA,EACZ,IAAI1B,EAAQO,MAAM4C,GAClBqF,KAAKqnB,MAAQ7vB,EAAM6vB,OAErB1e,EAAQuZ,aAAaxlB,UAAYN,OAAOC,OAAOtE,MAAM2E,WACrDiM,EAAQuZ,aAAaxlB,UAAU3G,YAAc4S,EAAQuZ,aAGvD,SAASD,EAAM6D,EAAOwB,GACpB,OAAO,IAAItuB,SAAQ,SAASnB,EAASC,GACnC,IAAIyvB,EAAU,IAAI1B,EAAQC,EAAOwB,GAEjC,GAAIC,EAAQtB,QAAUsB,EAAQtB,OAAOuB,QACnC,OAAO1vB,EAAO,IAAI6Q,EAAQuZ,aAAa,UAAW,eAGpD,IAAIuF,EAAM,IAAIC,eAEd,SAASC,IACPF,EAAIG,QAGNH,EAAI9D,OAAS,WACX,IAAIrV,EAAU,CACZ6N,OAAQsL,EAAItL,OACZ6K,WAAYS,EAAIT,WAChB7D,QAASsD,EAAagB,EAAII,yBAA2B,KAEvDvZ,EAAQrC,IAAM,gBAAiBwb,EAAMA,EAAIK,YAAcxZ,EAAQ6U,QAAQxrB,IAAI,iBAC3E,IAAI4rB,EAAO,aAAckE,EAAMA,EAAIntB,SAAWmtB,EAAIM,aAClDlwB,EAAQ,IAAIgvB,EAAStD,EAAMjV,KAG7BmZ,EAAI7D,QAAU,WACZ9rB,EAAO,IAAI+Y,UAAU,4BAGvB4W,EAAIO,UAAY,WACdlwB,EAAO,IAAI+Y,UAAU,4BAGvB4W,EAAIQ,QAAU,WACZnwB,EAAO,IAAI6Q,EAAQuZ,aAAa,UAAW,gBAG7CuF,EAAItuB,KAAKouB,EAAQ3wB,OAAQ2wB,EAAQtb,KAAK,GAEV,YAAxBsb,EAAQxB,YACV0B,EAAIS,iBAAkB,EACW,SAAxBX,EAAQxB,cACjB0B,EAAIS,iBAAkB,GAGpB,iBAAkBT,GAAOtF,IAC3BsF,EAAIU,aAAe,QAGrBZ,EAAQpE,QAAQ7pB,SAAQ,SAASqD,EAAOzD,GACtCuuB,EAAIW,iBAAiBlvB,EAAMyD,MAGzB4qB,EAAQtB,SACVsB,EAAQtB,OAAOptB,iBAAiB,QAAS8uB,GAEzCF,EAAIY,mBAAqB,WAEA,IAAnBZ,EAAIa,YACNf,EAAQtB,OAAO5sB,oBAAoB,QAASsuB,KAKlDF,EAAIc,KAAkC,qBAAtBhB,EAAQjD,UAA4B,KAAOiD,EAAQjD,cAIvErC,EAAMuG,UAAW,EAEZ1G,EAAKG,QACRH,EAAKG,MAAQA,EACbH,EAAKoB,QAAUA,EACfpB,EAAK+D,QAAUA,EACf/D,EAAK+E,SAAWA,GAGlBle,EAAQua,QAAUA,EAClBva,EAAQkd,QAAUA,EAClBld,EAAQke,SAAWA,EACnBle,EAAQsZ,MAAQA,EAEhB7lB,OAAOoO,eAAe7B,EAAS,aAAc,CAAEhM,OAAO,IA5gBvC,CAghBd,IAlhBH,CAmhBGolB,GACHA,EAASE,MAAMwG,UAAW,SAEnB1G,EAASE,MAAMuG,SAGtB,IAAIE,EAAM3G,GACVpZ,EAAU+f,EAAIzG,OACI,QAAAyG,EAAIzG,MACtBtZ,EAAgB,MAAA+f,EAAIzG,MACpBtZ,EAAkB,QAAA+f,EAAIxF,QACtBva,EAAkB,QAAA+f,EAAI7C,QACtBld,EAAmB,SAAA+f,EAAI7B,SACvB8B,EAAiBhgB,QAAAA,E,qCCziBbigB,GAAcxsB,OAAOM,UAAUhE,SAC/BmwB,GAAUzsB,OAAOwP,MAAQ,SAAS8W,GACpC,IAAI9W,EAAO,GACX,IAAK,IAAI1S,KAAQwpB,EAChB9W,EAAKzN,KAAKjF,GAEX,OAAO0S,GAGT,SAASG,GAAUhQ,EAAK+sB,GACvB,IAAI1rB,EAAG2rB,EAAKnV,EAAKhI,EAAMvD,EAAK2gB,EAASC,EACrC,IAAY,IAARltB,EACH,MAAO,OAER,IAAY,IAARA,EACH,MAAO,QAER,cAAeA,GACd,IAAK,SACJ,GAAY,OAARA,EACH,OAAO,KACD,GAAIA,EAAIsU,QAAgC,oBAAftU,EAAIsU,OACnC,OAAOtE,GAAUhQ,EAAIsU,SAAUyY,GAG/B,GAAc,oBADdG,EAAQL,GAAYzmB,KAAKpG,IACO,CAG/B,IAFA6X,EAAM,IACNmV,EAAMhtB,EAAIuB,OAAS,EACfF,EAAI,EAAGA,EAAI2rB,EAAK3rB,IACnBwW,GAAO7H,GAAUhQ,EAAIqB,IAAI,GAAQ,IAKlC,OAHI2rB,GAAO,IACVnV,GAAO7H,GAAUhQ,EAAIqB,IAAI,IAEnBwW,EAAM,IACP,GAAc,oBAAVqV,EAA6B,CAMvC,IAHAF,GADAnd,EAAOid,GAAQ9sB,GAAKsc,QACT/a,OACXsW,EAAM,GACNxW,EAAI,EACGA,EAAI2rB,QAGMjZ,KADhBkZ,EAAUjd,GAAUhQ,EADpBsM,EAAMuD,EAAKxO,KACmB,MAEzBwW,IACHA,GAAO,KAERA,GAAO9H,KAAKC,UAAU1D,GAAO,IAAM2gB,GAEpC5rB,IAED,MAAO,IAAMwW,EAAM,IAEnB,OAAO9H,KAAKC,UAAUhQ,GAGzB,IAAK,WACL,IAAK,YACJ,OAAO+sB,EAAc,UAAOhZ,EAC7B,IAAK,SACJ,OAAOhE,KAAKC,UAAUhQ,GACvB,QACC,OAAOmtB,SAASntB,GAAOA,EAAM,M,OAIf,SAASA,GACzB,IAAIotB,EAAYpd,GAAUhQ,GAAK,GAC/B,QAAkB+T,IAAdqZ,EACH,MAAO,GAAIA,GCnEb,SAASC,GAAcC,GACjBD,IAAAA,EAAgB,EACbC,KAAAA,EAAI,GACTA,GAAK,EACLD,IAEF,OAAOA,EAqBF,MAAME,GAYXvzB,YACEwzB,EACAC,EACAC,EACAC,EACAC,GACA,KAhBKJ,mBAgBL,OAdKC,8BAcL,OAZKC,YAYL,OAVKC,sBAUL,OARKC,qBAQL,EACKJ,KAAAA,cAAgBA,EAChBC,KAAAA,yBAA2BA,EAC3BC,KAAAA,OAASA,EACTC,KAAAA,iBAAmBA,EACnBC,KAAAA,gBAAkBA,EAGzBC,SAASC,GACP,OAAO7pB,KAAK8pB,qBAAqBD,GAAM,GAGzCC,qBAAqBD,GACnB,GAAIA,EAAO7pB,KAAK2pB,gBAAiB,CAC/B,MAAMI,EACJX,GAjDI,KADYC,EAkDaQ,EA/DN,GA+DsC,GAjD/C,GACpBR,IACAA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,EACVA,GAAKA,GAAK,GAEC,GADXA,GAAKA,GAAK,MA2CJD,GAhEuB,IAiEvB,EAIF,MAAO,CAACW,EADUF,GADD7pB,KAAKgqB,gBAAgBD,GAnEb,KAsEpB,CACL,MAAME,EAAkBJ,EAAO7pB,KAAK2pB,gBAC9BO,EAAmBrK,KAAKsK,MAAMF,EAAkBjqB,KAAKupB,eAG3D,MAAO,CAFOvpB,KAAK0pB,iBAAmBQ,EACpBD,EAAkBjqB,KAAKupB,eA7D/C,IAAwBF,EAkEtBe,oBAAoBL,GAClB,OAAIA,GAAS/pB,KAAK0pB,iBAhFS,IAiFjB7J,KAAKwK,IAAI,EAAGN,GAAS,IAG1BA,EAAQ/pB,KAAK0pB,kBAAoB1pB,KAAKupB,cACvCvpB,KAAK2pB,gBAKXW,mBAAmBP,GACV,OAAA/pB,KAAKoqB,oBAAoBL,GAAS/pB,KAAKgqB,gBAAgBD,GAAS,EAGzEC,gBAAgBD,GACd,OAAIA,EAAQ/pB,KAAK0pB,iBACR7J,KAAKwK,IAAI,EAAGN,EAAQX,GAhGF,KAkGlBppB,KAAKupB,eClGX,MAAMgB,WAA6BxyB,MAGxChC,YAAY4E,EAAiB6vB,GAC3B9a,MAAM/U,GADsC,KAF9C6vB,UAE8C,EAGvCA,KAAAA,KAAOA,GCwChB,MAAMC,IAAsBC,EAAAA,EAAAA,KAC1BC,EAAAA,EAAAA,IAAS7zB,KACT8zB,EAAAA,EAAAA,OACAjuB,GAAS,IAAI7F,GAAU6F,KAGnBkuB,IAAuBC,EAAAA,EAAAA,IAAM,EAACF,EAAAA,EAAAA,OAAUG,EAAAA,EAAAA,IAAQ,YAEhDC,IAA2BN,EAAAA,EAAAA,KAC/BC,EAAAA,EAAAA,IAASlvB,EAAAA,QACTovB,IACAluB,GAASlB,EAAAA,OAAAA,KAAYkB,EAAM,GAAI,YAOpBsuB,GAA6B,IA8N1C,SAASC,GAAsB3zB,GAC7B,OAAO4zB,EAAAA,EAAAA,IAAM,EACXC,EAAAA,EAAAA,IAAK,CACHxxB,SAASmxB,EAAAA,EAAAA,IAAQ,OACjBnzB,IAAIgzB,EAAAA,EAAAA,MACJrzB,OAAAA,KAEF6zB,EAAAA,EAAAA,IAAK,CACHxxB,SAASmxB,EAAAA,EAAAA,IAAQ,OACjBnzB,IAAIgzB,EAAAA,EAAAA,MACJpzB,OAAO4zB,EAAAA,EAAAA,IAAK,CACV5f,MAAM6f,EAAAA,EAAAA,MACN1wB,SAASiwB,EAAAA,EAAAA,MACTj0B,MAAM20B,EAAAA,EAAAA,KAASC,EAAAA,EAAAA,aAMvB,MAAMC,GAAmBN,IAAgBG,EAAAA,EAAAA,OAKzC,SAASI,GAAoBC,GACpBhB,OAAAA,EAAAA,EAAAA,IAAOQ,GAAgBQ,GAASF,IAAkB7uB,GACnD,UAAWA,EACNA,EAEA,IACFA,EACHpF,QAAQ8E,EAAAA,EAAAA,IAAOM,EAAMpF,OAAQm0B,MASrC,SAASC,GAA8BhvB,GAC9B8uB,OAAAA,IACLL,EAAAA,EAAAA,IAAK,CACHQ,SAASR,EAAAA,EAAAA,IAAK,CACZvB,MAAMgC,EAAAA,EAAAA,QAERlvB,MAAAA,KAQN,SAASmvB,GAAmCnvB,GAC1C,OAAOyuB,EAAAA,EAAAA,IAAK,CACVQ,SAASR,EAAAA,EAAAA,IAAK,CACZvB,MAAMgC,EAAAA,EAAAA,QAERlvB,MAAAA,IA8HJ,MAAMovB,IAA6BX,EAAAA,EAAAA,IAAK,CACtCY,YAAYH,EAAAA,EAAAA,MACZI,gBAAgBJ,EAAAA,EAAAA,MAChBK,SAASL,EAAAA,EAAAA,MACTM,OAAON,EAAAA,EAAAA,MACPO,UAAUP,EAAAA,EAAAA,QAoBNQ,GAA2BZ,IAC/Bvd,EAAAA,EAAAA,KACEoe,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACHrB,OAAO8B,EAAAA,EAAAA,MACPU,eAAeV,EAAAA,EAAAA,MACfW,QAAQX,EAAAA,EAAAA,MACRY,aAAaZ,EAAAA,EAAAA,WAkBfa,IAAqBtB,EAAAA,EAAAA,IAAK,CAC9BrB,OAAO8B,EAAAA,EAAAA,MACPc,WAAWd,EAAAA,EAAAA,MACXe,cAAcf,EAAAA,EAAAA,MACdgB,cAAchB,EAAAA,EAAAA,MACdiB,aAAaxB,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,OACtBkB,kBAAkBzB,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,SAGvBmB,IAAyB5B,EAAAA,EAAAA,IAAK,CAClC7B,eAAesC,EAAAA,EAAAA,MACfrC,0BAA0BqC,EAAAA,EAAAA,MAC1BpC,QAAQwD,EAAAA,EAAAA,MACRvD,kBAAkBmC,EAAAA,EAAAA,MAClBlC,iBAAiBkC,EAAAA,EAAAA,QAWbqB,IAA0BC,EAAAA,EAAAA,KAAOvC,EAAAA,EAAAA,OAAU1c,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,QAKjDuB,IAAyBd,EAAAA,EAAAA,KAASnB,EAAAA,EAAAA,IAAM,EAACC,EAAAA,EAAAA,IAAK,KAAKR,EAAAA,EAAAA,SAKnDyC,IAAwBjC,EAAAA,EAAAA,IAAK,CACjCha,IAAKgc,KAMDE,IAA0BvC,EAAAA,EAAAA,IAAQ,qBAWlCwC,IAAgBnC,EAAAA,EAAAA,IAAK,CACzB,eAAeR,EAAAA,EAAAA,MACAU,eAAAA,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,SAuBpB2B,GAAqC7B,IACzCP,EAAAA,EAAAA,IAAK,CACHha,KAAKkb,EAAAA,EAAAA,KAASnB,EAAAA,EAAAA,IAAM,EAACC,EAAAA,EAAAA,IAAK,KAAKR,EAAAA,EAAAA,SAC/BJ,MAAM8B,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,QACrB5U,UAAUsV,EAAAA,EAAAA,KACRgB,EAAAA,EAAAA,KACEpe,EAAAA,EAAAA,KACEoe,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACH9K,YAAY2M,EAAAA,EAAAA,MACZzM,OAAOoK,EAAAA,EAAAA,MACPhN,UAAUiO,EAAAA,EAAAA,MACVl1B,MAAMuX,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OACZ6C,WAAWnC,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,aAM9B6B,eAAepC,EAAAA,EAAAA,KAASO,EAAAA,EAAAA,UAuStB8B,GAAgChC,IACpCP,EAAAA,EAAAA,IAAK,CACHwC,YAAYT,EAAAA,EAAAA,KAAOvC,EAAAA,EAAAA,OAAU1c,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,QACnCgC,OAAOzC,EAAAA,EAAAA,IAAK,CACV0C,WAAWjC,EAAAA,EAAAA,MACXkC,UAAUlC,EAAAA,EAAAA,WAsJhB,MAAMmC,GAAgCvC,GAAcM,IAK9CkC,GAAwBxC,GAAciB,IAKtCwB,GAA4BzC,GAAcuB,IAK1CmB,GAA6B1C,GAAcyB,IAK3CkB,GAAgB3C,IAAcI,EAAAA,EAAAA,OAmB9BwC,GAAqB1C,IACzBP,EAAAA,EAAAA,IAAK,CACHkD,OAAOzC,EAAAA,EAAAA,MACP0C,aAAa1C,EAAAA,EAAAA,MACb2C,gBAAgB3C,EAAAA,EAAAA,MAChB4C,wBAAwBvgB,EAAAA,EAAAA,IAAMuc,OAsB5BiE,IAAoBtD,EAAAA,EAAAA,IAAK,CAC7BoB,QAAQ5B,EAAAA,EAAAA,MACR+D,UAAUrC,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,OACnB+C,UAAU/C,EAAAA,EAAAA,MACVgD,gBAAgBvD,EAAAA,EAAAA,KAASV,EAAAA,EAAAA,SAsBrBkE,GAAgCnD,IACpCzd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHla,QAASuZ,GACT+B,QAAQ5B,EAAAA,EAAAA,MACR+D,UAAUrC,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,OACnB+C,UAAU/C,EAAAA,EAAAA,MACVgD,gBAAgBvD,EAAAA,EAAAA,KAASV,EAAAA,EAAAA,WAQzBmE,GAA0BpD,IAC9Bzd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHhU,OAAQqT,GACR7V,SAASwW,EAAAA,EAAAA,IAAK,CACZ9K,YAAY2M,EAAAA,EAAAA,MACZzM,MAAOiK,GACP7M,UAAUiO,EAAAA,EAAAA,MACVl1B,KAAMq0B,GACNyC,WAAW5B,EAAAA,EAAAA,YAMbmD,IAA0B5D,EAAAA,EAAAA,IAAK,CACnCnL,SAAS2K,EAAAA,EAAAA,MACTqE,QAAQ5D,EAAAA,EAAAA,MACRxN,OAAOgO,EAAAA,EAAAA,QAMHqD,GAAgCvD,IACpCzd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHhU,OAAQqT,GACR7V,SAASwW,EAAAA,EAAAA,IAAK,CACZ9K,YAAY2M,EAAAA,EAAAA,MACZzM,MAAOiK,GACP7M,UAAUiO,EAAAA,EAAAA,MACVl1B,KAAMq4B,GACNvB,WAAW5B,EAAAA,EAAAA,YAiBbsD,GAA8BxD,IAClCzd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHxN,UAAUiO,EAAAA,EAAAA,MACV3a,QAASuZ,OAQT2E,IAAoBhE,EAAAA,EAAAA,IAAK,CAC7B9K,YAAY2M,EAAAA,EAAAA,MACZzM,MAAOiK,GACP7M,UAAUiO,EAAAA,EAAAA,MACVl1B,KAAMq0B,GACNyC,WAAW5B,EAAAA,EAAAA,QAMPwD,IAAyBjE,EAAAA,EAAAA,IAAK,CAClChU,OAAQqT,GACR7V,QAASwa,KAGLE,IAAyB5E,EAAAA,EAAAA,KAC7BS,EAAAA,EAAAA,IAAM,EAACR,EAAAA,EAAAA,IAASlvB,EAAAA,QAASuzB,MACzB7D,EAAAA,EAAAA,IAAM,CAACN,GAAsBmE,MAC7BryB,GACMmB,MAAMC,QAAQpB,IACTN,EAAAA,EAAAA,IAAOM,EAAOquB,IAEdruB,IAQP4yB,IAA0BnE,EAAAA,EAAAA,IAAK,CACnC9K,YAAY2M,EAAAA,EAAAA,MACZzM,MAAOiK,GACP7M,UAAUiO,EAAAA,EAAAA,MACVl1B,KAAM24B,GACN7B,WAAW5B,EAAAA,EAAAA,QAGP2D,IAA+BpE,EAAAA,EAAAA,IAAK,CACxChU,OAAQqT,GACR7V,QAAS2a,KAMLE,IAAwBrE,EAAAA,EAAAA,IAAK,CACjCsE,OAAOvE,EAAAA,EAAAA,IAAM,EACXJ,EAAAA,EAAAA,IAAQ,WACRA,EAAAA,EAAAA,IAAQ,aACRA,EAAAA,EAAAA,IAAQ,eACRA,EAAAA,EAAAA,IAAQ,kBAEV4E,QAAQ9D,EAAAA,EAAAA,MACR+D,UAAU/D,EAAAA,EAAAA,QAONgE,GAA6CpE,IACjDvd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACH7wB,WAAWqwB,EAAAA,EAAAA,MACXf,MAAMgC,EAAAA,EAAAA,MACNza,IAAKgc,GACL0C,MAAMxD,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,OACfmF,WAAWzE,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,YAQ7BmE,GAAmCvE,IACvCvd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACH7wB,WAAWqwB,EAAAA,EAAAA,MACXf,MAAMgC,EAAAA,EAAAA,MACNza,IAAKgc,GACL0C,MAAMxD,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,OACfmF,WAAWzE,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,YAQ7BoE,IAA4B7E,EAAAA,EAAAA,IAAK,CACrC8E,cAAcrE,EAAAA,EAAAA,MACdt0B,OAAQu0B,GAA6BsD,MAMjCe,IAA2B/E,EAAAA,EAAAA,IAAK,CACpChU,OAAQqT,GACR7V,QAASwa,KAMLgB,IAAmChF,EAAAA,EAAAA,IAAK,CAC5C8E,cAAcrE,EAAAA,EAAAA,MACdt0B,OAAQu0B,GAA6BqE,MAMjCE,IAAiBjF,EAAAA,EAAAA,IAAK,CAC1BkF,QAAQzE,EAAAA,EAAAA,MACRhC,MAAMgC,EAAAA,EAAAA,MACN0E,MAAM1E,EAAAA,EAAAA,QAMF2E,IAAyBpF,EAAAA,EAAAA,IAAK,CAClC8E,cAAcrE,EAAAA,EAAAA,MACdt0B,OAAQ84B,KAiEJI,IAAmBtF,EAAAA,EAAAA,IAAM,EAC7BC,EAAAA,EAAAA,IAAK,CACH3O,MAAM0O,EAAAA,EAAAA,IAAM,EACVJ,EAAAA,EAAAA,IAAQ,uBACRA,EAAAA,EAAAA,IAAQ,cACRA,EAAAA,EAAAA,IAAQ,2BACRA,EAAAA,EAAAA,IAAQ,UAEVlB,MAAMgC,EAAAA,EAAAA,MACN6E,WAAW7E,EAAAA,EAAAA,SAEbT,EAAAA,EAAAA,IAAK,CACH3O,MAAMsO,EAAAA,EAAAA,IAAQ,eACduF,QAAQzE,EAAAA,EAAAA,MACRhC,MAAMgC,EAAAA,EAAAA,MACN6E,WAAW7E,EAAAA,EAAAA,SAEbT,EAAAA,EAAAA,IAAK,CACH3O,MAAMsO,EAAAA,EAAAA,IAAQ,UACdlB,MAAMgC,EAAAA,EAAAA,MACN6E,WAAW7E,EAAAA,EAAAA,MACX8E,OAAOvF,EAAAA,EAAAA,IAAK,CACVwF,uBAAuB/E,EAAAA,EAAAA,MACvBgF,2BAA2BhF,EAAAA,EAAAA,MAC3BiF,uBAAuBjF,EAAAA,EAAAA,MACvBkF,yBAAyBlF,EAAAA,EAAAA,WAG7BT,EAAAA,EAAAA,IAAK,CACH3O,MAAMsO,EAAAA,EAAAA,IAAQ,QACdlB,MAAMgC,EAAAA,EAAAA,MACN6E,WAAW7E,EAAAA,EAAAA,MACXza,KAAKwZ,EAAAA,EAAAA,UAOHoG,IAA+B5F,EAAAA,EAAAA,IAAK,CACxC8E,cAAcrE,EAAAA,EAAAA,MACdt0B,OAAQk5B,KAMJQ,IAA8B7F,EAAAA,EAAAA,IAAK,CACvC8E,cAAcrE,EAAAA,EAAAA,MACdt0B,OAAQu0B,IACNX,EAAAA,EAAAA,IAAM,CAACkC,GAAuBC,QAO5B4D,IAAyB9F,EAAAA,EAAAA,IAAK,CAClC8E,cAAcrE,EAAAA,EAAAA,MACdt0B,QAAQs0B,EAAAA,EAAAA,QAGJsF,IAAoB/F,EAAAA,EAAAA,IAAK,CAC7BhU,QAAQwT,EAAAA,EAAAA,MACRwG,QAAQ9E,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,OACjByG,KAAK/E,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,OACd0G,KAAKhF,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,OACdrgB,SAAS+hB,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,SAGd2G,IAAwBnG,EAAAA,EAAAA,IAAK,CACjCoG,YAAY5G,EAAAA,EAAAA,MACZ6G,YAAY7G,EAAAA,EAAAA,MACZ8G,gBAAgB7F,EAAAA,EAAAA,MAChB8F,kBAAkB1E,EAAAA,EAAAA,MAClB2E,cAAc1jB,EAAAA,EAAAA,KAAM4c,EAAAA,EAAAA,IAAM,EAACe,EAAAA,EAAAA,OAAUA,EAAAA,EAAAA,OAAUA,EAAAA,EAAAA,SAC/CgG,YAAYhG,EAAAA,EAAAA,MACZiG,UAAUjG,EAAAA,EAAAA,MACVkG,UAAUzF,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,SAMfmG,GAAkBvG,IACtBL,EAAAA,EAAAA,IAAK,CACH6G,SAAS/jB,EAAAA,EAAAA,IAAMqjB,IACfW,YAAYhkB,EAAAA,EAAAA,IAAMqjB,OAIhBY,IAAqBhH,EAAAA,EAAAA,IAAM,EAC/BJ,EAAAA,EAAAA,IAAQ,cACRA,EAAAA,EAAAA,IAAQ,cACRA,EAAAA,EAAAA,IAAQ,eAGJqH,IAA0BhH,EAAAA,EAAAA,IAAK,CACnCvB,MAAMgC,EAAAA,EAAAA,MACNwG,eAAe/F,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,OACxBza,IAAKgc,GACLkF,oBAAoBhH,EAAAA,EAAAA,IAAS6G,MAMzBI,GAAgC5G,IACpCzd,EAAAA,EAAAA,KAAMoe,EAAAA,EAAAA,IAAS8F,MAMXI,GAA6C/G,IAAcI,EAAAA,EAAAA,OAE3D4G,IAA6BrH,EAAAA,EAAAA,IAAK,CACtCjwB,YAAY+S,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OAClBjwB,SAASywB,EAAAA,EAAAA,IAAK,CACZ5W,aAAatG,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OACnBrW,QAAQ6W,EAAAA,EAAAA,IAAK,CACXnW,uBAAuB4W,EAAAA,EAAAA,MACvB1W,2BAA2B0W,EAAAA,EAAAA,MAC3BzW,6BAA6ByW,EAAAA,EAAAA,QAE/BnX,cAAcxG,EAAAA,EAAAA,KACZkd,EAAAA,EAAAA,IAAK,CACHpV,UAAU9H,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,OAChBl1B,MAAMi0B,EAAAA,EAAAA,MACN9V,gBAAgB+W,EAAAA,EAAAA,SAGpBpX,iBAAiBmW,EAAAA,EAAAA,UAIf8H,IAA0BtH,EAAAA,EAAAA,IAAK,CACnC6D,QAAQ5D,EAAAA,EAAAA,MACRpL,SAAS2K,EAAAA,EAAAA,MACTja,UAAW8Z,KAGPkI,IAAuBvH,EAAAA,EAAAA,IAAK,CAChCpV,UAAU9H,EAAAA,EAAAA,IAAMuc,IAChB9zB,MAAMi0B,EAAAA,EAAAA,MACNja,UAAW8Z,KAGPmI,IAAoBzH,EAAAA,EAAAA,IAAM,CAC9BwH,GACAD,KAGIG,IAA2B1H,EAAAA,EAAAA,IAAM,EACrCC,EAAAA,EAAAA,IAAK,CACH6D,QAAQ5D,EAAAA,EAAAA,MACRpL,SAAS2K,EAAAA,EAAAA,MACTja,WAAWia,EAAAA,EAAAA,SAEbQ,EAAAA,EAAAA,IAAK,CACHpV,UAAU9H,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OAChBj0B,MAAMi0B,EAAAA,EAAAA,MACNja,WAAWia,EAAAA,EAAAA,UAITkI,IAAyBpI,EAAAA,EAAAA,IAC7BkI,GACAC,IACAl2B,GACM,aAAcA,GACTN,EAAAA,EAAAA,IAAOM,EAAOg2B,KAEdt2B,EAAAA,EAAAA,IAAOM,EAAO+1B,MAQrBK,IAAmC3H,EAAAA,EAAAA,IAAK,CAC5CjwB,YAAY+S,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OAClBjwB,SAASywB,EAAAA,EAAAA,IAAK,CACZ5W,aAAatG,EAAAA,EAAAA,KACXkd,EAAAA,EAAAA,IAAK,CACHhU,OAAQqT,GACRxQ,QAAQgT,EAAAA,EAAAA,MACRpwB,UAAUowB,EAAAA,EAAAA,SAGdvY,cAAcxG,EAAAA,EAAAA,IAAM4kB,IACpBre,iBAAiBmW,EAAAA,EAAAA,UAIfoI,IAAqB5H,EAAAA,EAAAA,IAAK,CAC9B6H,cAAcpH,EAAAA,EAAAA,MACdqH,MAAMtI,EAAAA,EAAAA,MACNpK,OAAO8K,EAAAA,EAAAA,KAASV,EAAAA,EAAAA,OAChBuI,cAAezE,KAMX0E,IAAiChI,EAAAA,EAAAA,IAAK,CAC1Cha,IAAKgc,GACLiG,KAAKxH,EAAAA,EAAAA,MACLyH,mBAAmBhI,EAAAA,EAAAA,KACjBgB,EAAAA,EAAAA,KACEpe,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHpW,OAAO6W,EAAAA,EAAAA,MACPnX,cAAcxG,EAAAA,EAAAA,KACZkd,EAAAA,EAAAA,IAAK,CACHpV,UAAU9H,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,OAChBl1B,MAAMi0B,EAAAA,EAAAA,MACN9V,gBAAgB+W,EAAAA,EAAAA,cAO5B0H,aAAarlB,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,OACnB2H,cAActlB,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,OACpB4H,aAAanI,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,SACrC8I,kBAAkBpI,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,IAAM8kB,MAC1CW,mBAAmBrI,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,IAAM8kB,QAMvCY,IAAuCxI,EAAAA,EAAAA,IAAK,CAChDha,IAAKgc,GACLiG,KAAKxH,EAAAA,EAAAA,MACLyH,mBAAmBhI,EAAAA,EAAAA,KACjBgB,EAAAA,EAAAA,KACEpe,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHpW,OAAO6W,EAAAA,EAAAA,MACPnX,cAAcxG,EAAAA,EAAAA,IAAM4kB,SAK5BS,aAAarlB,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,OACnB2H,cAActlB,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,OACpB4H,aAAanI,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,SACrC8I,kBAAkBpI,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,IAAM8kB,MAC1CW,mBAAmBrI,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAASpe,EAAAA,EAAAA,IAAM8kB,QAMvCa,GAAoBpI,IACxBa,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACH0I,WAAWlJ,EAAAA,EAAAA,MACXmJ,mBAAmBnJ,EAAAA,EAAAA,MACnBoJ,YAAYnI,EAAAA,EAAAA,MACZ9wB,cAAcmT,EAAAA,EAAAA,KACZkd,EAAAA,EAAAA,IAAK,CACH1wB,YAAa+3B,GACbrZ,MAAMkT,EAAAA,EAAAA,IAAS8G,OAGnBa,SAAS3I,EAAAA,EAAAA,KACPpd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHhU,QAAQwT,EAAAA,EAAAA,MACRhN,UAAUiO,EAAAA,EAAAA,MACVY,aAAaH,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,OACtBqI,YAAY5H,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,WAI3BmF,WAAWzD,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,OACpBiB,aAAaR,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,WAUtBsI,GAA6B1I,IACjCa,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACH0I,WAAWlJ,EAAAA,EAAAA,MACXmJ,mBAAmBnJ,EAAAA,EAAAA,MACnBoJ,YAAYnI,EAAAA,EAAAA,MACZ9wB,cAAcmT,EAAAA,EAAAA,KACZkd,EAAAA,EAAAA,IAAK,CACH1wB,YAAa+3B,GACbrZ,MAAMkT,EAAAA,EAAAA,IAAS8G,OAGnBa,SAAS3I,EAAAA,EAAAA,KACPpd,EAAAA,EAAAA,KACEkd,EAAAA,EAAAA,IAAK,CACHhU,QAAQwT,EAAAA,EAAAA,MACRhN,UAAUiO,EAAAA,EAAAA,MACVY,aAAaH,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,OACtBqI,YAAY5H,EAAAA,EAAAA,KAAS1B,EAAAA,EAAAA,WAI3BmF,WAAWzD,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,WAQpBuI,GAA8B3I,IAClCa,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACH0I,WAAWlJ,EAAAA,EAAAA,MACXmJ,mBAAmBnJ,EAAAA,EAAAA,MACnBoJ,YAAYnI,EAAAA,EAAAA,MACZ1wB,YAAY+S,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OAClBmF,WAAWzD,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,WAQpBwI,GAA0B5I,IAC9Ba,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACHvB,MAAMgC,EAAAA,EAAAA,MACNzS,KAAMga,GACNrD,WAAWzE,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,QAC7BnxB,YAAa+3B,OAQb6B,GAAgC7I,IACpCa,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACHvB,MAAMgC,EAAAA,EAAAA,MACNnxB,YAAaq4B,GACb3Z,MAAMkT,EAAAA,EAAAA,IAASsH,IACf7D,WAAWzE,EAAAA,EAAAA,KAASgB,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,YAU7B0I,GAAwC5I,IAC5CP,EAAAA,EAAAA,IAAK,CACH0I,WAAWlJ,EAAAA,EAAAA,MACXzN,eAAeiO,EAAAA,EAAAA,IAAK,CAClBoJ,sBAAsB3I,EAAAA,EAAAA,WAQtB4I,GAA8B9I,IAClCP,EAAAA,EAAAA,IAAK,CACH0I,WAAWlJ,EAAAA,EAAAA,MACX8J,sBAAsB7I,EAAAA,EAAAA,SAIpB8I,IAAmBvJ,EAAAA,EAAAA,IAAK,CAC5BvB,MAAMgC,EAAAA,EAAAA,MACN+I,iBAAiB/I,EAAAA,EAAAA,MACjBgJ,UAAUhJ,EAAAA,EAAAA,MACViJ,kBAAkBjJ,EAAAA,EAAAA,QAMdkJ,GAAuCtJ,IAC3Cvd,EAAAA,EAAAA,IAAMymB,KAMFK,GAA4BrJ,IAChCW,EAAAA,EAAAA,KACElB,EAAAA,EAAAA,IAAK,CACHjO,eAAeiO,EAAAA,EAAAA,IAAK,CAClBoJ,sBAAsB3I,EAAAA,EAAAA,YASxBoJ,GAA0BxJ,IAAcb,EAAAA,EAAAA,OAKxCsK,GAA2BzJ,IAAcb,EAAAA,EAAAA,OA8MzCuK,IAAa/J,EAAAA,EAAAA,IAAK,CACtBha,IAAKgc,GACL5C,MAAMtc,EAAAA,EAAAA,KAAM0c,EAAAA,EAAAA,OACZrwB,WAAWqwB,EAAAA,EAAAA,QAePwK,IAAyBhK,EAAAA,EAAAA,IAAK,CAClC7zB,OAAQu0B,GAA6BqJ,IACrCjF,cAAcrE,EAAAA,EAAAA,QAyGT,MAAMwJ,GA0EXt/B,YACEu/B,EACAC,GACA,KA5EeC,iBA4Ef,OA3EeC,uCA2Ef,OA1Ee5U,kBA0Ef,OAzEe6U,oBAyEf,OAxEeC,gBAwEf,OAvEeC,iBAuEf,OAtEeC,sBAsEf,OArEeC,mBAqEf,EApEeC,KAAAA,wBAAkC,EAClCC,KAAAA,uBAEN,KACMC,KAAAA,yBAEN,KAOCC,KAAAA,wBAAkC,EAE7BC,KAAAA,0BAAoC,EACpCC,KAAAA,mBAA6B,EAoD5C,KAnDeC,eAKb,CACF5hB,gBAAiB,KACjB6hB,UAAW,EACXC,sBAAuB,GACvBC,oBAAqB,IAGEC,KAAAA,0BAAkD,EAClDC,KAAAA,oDAIrB,GACqBC,KAAAA,6CAIrB,GACqBC,KAAAA,qBAErB,GA0BF,KAZuBC,gCACvB,IAAI9c,IAYJ,IAAI9N,EAAM,IAAI5T,IAAIi9B,GACDrpB,EAAI6qB,SAErB,IAAIC,EACAC,EACA/U,EACAgV,EACAC,EAntCR,IAA0BC,EAotClB5B,GAAoD,kBAAvBA,EAC1BC,KAAAA,YAAcD,EACVA,IACTv1B,KAAKw1B,YAAcD,EAAmBvZ,WACtChc,KAAKy1B,kCACHF,EAAmB6B,iCACrBL,EAAaxB,EAAmBwB,WAChCC,EAAczB,EAAmByB,YACjC/U,EAAQsT,EAAmBtT,MAC3BgV,EAAkB1B,EAAmB0B,gBACrCC,EAA0B3B,EAAmB2B,yBAG1CrW,KAAAA,aAAeyU,EACpBt1B,KAAK01B,eAAiBqB,GCxuEnB,SAA0BzB,GAC/B,IAAIrpB,EAAM,IAAI5T,IAAIi9B,GAClB,MAAM+B,EAA4B,WAAjBprB,EAAI6qB,SAcd7qB,OAZPA,EAAI6qB,SAAWO,EAAW,OAAS,MACnCprB,EAAIqrB,KAAO,GAQM,KAAbrrB,EAAIsrB,OACNtrB,EAAIsrB,KAAOvtB,OAAOwtB,OAAOvrB,EAAIsrB,MAAQ,IAEhCtrB,EAAIvT,WDwtE2B++B,CAAiBnC,GAErDt1B,KAAK21B,WAj0CT,SACE1pB,EACAorB,EACAL,EACAU,EACAT,EACAC,GAEA,MAAMjV,EAAQyV,GAA4BC,GAM1C,IAAIC,EA4EJ,OAxEIX,IACFW,EAAsBjc,MAAO1P,EAAaqC,KAClCupB,MAAAA,QAA0B,IAAI7+B,SAClC,CAACnB,EAASC,KACJ,IACFm/B,EAAgBhrB,EAAKqC,GAAS,CAACwpB,EAAaC,IAC1ClgC,EAAQ,CAACigC,EAAaC,MAExB,MAAOvgC,GACPM,EAAON,OAIb,aAAayqB,KAAS4V,KAIJ,IAAIG,IAAJ,EAAcrc,MAAO4L,EAAS7B,KAC5CuS,MACA3pB,EAAU,CACd1X,OAAQ,OACR2sB,KAAMgE,EACN0Q,WAJyDnoB,EAKzDqT,QAAS/mB,OAAO+S,OACd,CACkB,mCAElB6nB,GAAe,KAIf,IACEkB,IACAj6B,EADAi6B,EAA4B,EAE5BC,EAAW,IACN,KAELl6B,EADE25B,QACUA,EAAoB3rB,EAAKqC,SAEzB2T,EAAMhW,EAAKqC,GAGN,MAAfrQ,EAAIke,SAGwB,IAA5B+a,IAGJgB,GAA6B,EACK,IAA9BA,IAGJntB,QAAQC,IACL,yBAAwB/M,EAAIke,UAAUle,EAAI+oB,+BAA+BmR,sBAEtE9b,GAAM8b,GACZA,GAAY,EAGd,MAAMlT,QAAahnB,EAAIgnB,OACnBhnB,EAAI8oB,GACNrB,EAAS,KAAMT,GAEfS,EAAS,IAAI3tB,MAAO,GAAEkG,EAAIke,UAAUle,EAAI+oB,eAAe/B,MAEzD,MAAO7T,GACHA,aAAerZ,OAAO2tB,EAAStU,MAIpC,IAyuCiBgnB,CAChBnsB,EAAIvT,WACJ2+B,EACAL,EACA/U,EACAgV,EACAC,GAEFl3B,KAAK41B,aA5uCiBuB,EA4uCcn3B,KAAK21B,WA3uCpC,CAAC/+B,EAAQ+T,IACP,IAAI3R,SAAQ,CAACnB,EAASC,KAC3Bq/B,EAAO5P,QAAQ3wB,EAAQ+T,GAAM,CAACyG,EAAU9W,KAClC8W,EACFtZ,EAAOsZ,GAGTvZ,EAAQyC,UAquCZ0F,KAAK61B,iBA/tCT,SAA+BsB,GAC7B,OAAQkB,GACC,IAAIr/B,SAAQ,CAACnB,EAASC,KAEH,IAApBugC,EAAS/6B,QAAczF,EAAQ,IAEnC,MAAMygC,EAAQD,EAASp9B,KAAKlE,GACnBogC,EAAO5P,QAAQxwB,EAAOwhC,WAAYxhC,EAAO4T,QAGlDwsB,EAAO5P,QAAQ+Q,GAAO,CAAClnB,EAAU9W,KAC3B8W,EACFtZ,EAAOsZ,GAGTvZ,EAAQyC,SAgtCYk+B,CAAsBx4B,KAAK21B,YAEnD31B,KAAK81B,cAAgB,IAAI2C,EAAAA,EAAmBz4B,KAAK01B,eAAgB,CAC/DgD,aAAa,EACbC,eAAgBC,EAAAA,IAElB54B,KAAK81B,cAAc+C,GAAG,OAAQ74B,KAAK84B,UAAUtlB,KAAKxT,OAClDA,KAAK81B,cAAc+C,GAAG,QAAS74B,KAAK+4B,WAAWvlB,KAAKxT,OACpDA,KAAK81B,cAAc+C,GAAG,QAAS74B,KAAKg5B,WAAWxlB,KAAKxT,OACpDA,KAAK81B,cAAc+C,GACjB,sBACA74B,KAAKi5B,yBAAyBzlB,KAAKxT,OAErCA,KAAK81B,cAAc+C,GACjB,sBACA74B,KAAKk5B,gCAAgC1lB,KAAKxT,OAE5CA,KAAK81B,cAAc+C,GACjB,mBACA74B,KAAKm5B,sBAAsB3lB,KAAKxT,OAElCA,KAAK81B,cAAc+C,GACjB,2BACA74B,KAAKo5B,6BAA6B5lB,KAAKxT,OAEzCA,KAAK81B,cAAc+C,GACjB,wBACA74B,KAAKq5B,2BAA2B7lB,KAAKxT,OAEvCA,KAAK81B,cAAc+C,GACjB,mBACA74B,KAAKs5B,sBAAsB9lB,KAAKxT,OAElCA,KAAK81B,cAAc+C,GACjB,mBACA74B,KAAKu5B,sBAAsB/lB,KAAKxT,OAOhCgc,iBACF,OAAOhc,KAAKw1B,YAMVgE,kBACF,OAAOx5B,KAAK6gB,aAMY,2BACxB7pB,EACAglB,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAAW,CAACziC,EAAUmZ,YAAa6L,GAC/C0d,QAAkB15B,KAAK41B,YAAY,aAAcjrB,GACjD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW/N,IAAwBE,EAAAA,EAAAA,QAClD,aAAW5tB,EACb,MAAM,IAAIlG,MACR,6BACEf,EAAUmZ,WACV,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAMG,iBACdP,EACAglB,GAEA,aAAahc,KAAK25B,qBAAqB3iC,EAAWglB,GAC/CgJ,MAAK1jB,GAAKA,EAAE3E,QACZi9B,OAAMzjC,IACL,MAAM,IAAI4B,MACR,oCAAsCf,EAAUmZ,WAAa,KAAOha,MAQ1D,mBAAC0zB,GACX6P,MAAAA,QAAkB15B,KAAK41B,YAAY,eAAgB,CAAC/L,IACpD5rB,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAca,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,SACjD,aAAW5tB,EACb,MAAM,IAAIlG,MACR,qCAAuC8xB,EAAO,KAAO5rB,EAAIzG,MAAMmD,SAG5DsD,OAAAA,EAAI1G,OAOa,6BAClBmiC,MAAAA,QAAkB15B,KAAK41B,YAAY,oBAAqB,IACxD33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcI,EAAAA,EAAAA,QACxC,aAAW5tB,EACP,UAAIlG,MACR,sCAAwCkG,EAAIzG,MAAMmD,SAG/CsD,OAAAA,EAAI1G,OAMe,+BACpBmiC,MAAAA,QAAkB15B,KAAK41B,YAAY,yBAA0B,IAC7D33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWtL,IAC1B,aAAWnwB,EACP,UAAIlG,MACR,wCAA0CkG,EAAIzG,MAAMmD,SAGjDsD,OAAAA,EAAI1G,OAME,gBACbkjB,GAEIof,IAAAA,EAA6B,GAE/BA,EADoB,kBAAXpf,EACG,CAACuB,WAAYvB,GAChBA,EACG,IACPA,EACHuB,WAAavB,GAAUA,EAAOuB,YAAehc,KAAKgc,YAGxC,CACVA,WAAYhc,KAAKgc,YAIf0d,MAAAA,QAAkB15B,KAAK41B,YAAY,YAAa,CAACiE,IACjD57B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWrL,IAC1B,aAAWpwB,EACP,UAAIlG,MAAM,yBAA2BkG,EAAIzG,MAAMmD,SAEhDsD,OAAAA,EAAI1G,OAMO,qBAClBuiC,EACA9d,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAAW,CAACK,EAAiB3pB,YAAa6L,GACtD0d,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW/N,GAAwB+C,KAClD,aAAWzwB,EACP,UAAIlG,MAAM,+BAAiCkG,EAAIzG,MAAMmD,SAEtDsD,OAAAA,EAAI1G,OAMe,6BAC1BwiC,EACA/d,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAAW,CAACM,EAAa5pB,YAAa6L,GAClD0d,QAAkB15B,KAAK41B,YAAY,yBAA0BjrB,GAC7D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW/N,GAAwB+C,KAClD,aAAWzwB,EACP,UAAIlG,MACR,wCAA0CkG,EAAIzG,MAAMmD,SAGjDsD,OAAAA,EAAI1G,OAQgB,8BAC3ByiC,EACAtkB,EACAsG,GAMA,IAAIie,EAAe,CAACD,EAAa7pB,YAC7B,SAAUuF,EACZukB,EAAM97B,KAAK,CAAC+0B,KAAMxd,EAAOwd,KAAK/iB,aAE9B8pB,EAAM97B,KAAK,CAACwS,UAAW+E,EAAO/E,UAAUR,aAGpCxF,MAAAA,EAAO3K,KAAKy5B,WAAWQ,EAAOje,EAAY,UAC1C0d,QAAkB15B,KAAK41B,YAAY,0BAA2BjrB,GAC9D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW3K,IAC1B,aAAW9wB,EACb,MAAM,IAAIlG,MACR,iDACEiiC,EAAa7pB,WACb,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAQsB,oCACjCyiC,EACAtkB,EACAsG,GAMA,IAAIie,EAAe,CAACD,EAAa7pB,YAC7B,SAAUuF,EACZukB,EAAM97B,KAAK,CAAC+0B,KAAMxd,EAAOwd,KAAK/iB,aAE9B8pB,EAAM97B,KAAK,CAACwS,UAAW+E,EAAO/E,UAAUR,aAGpCxF,MAAAA,EAAO3K,KAAKy5B,WAAWQ,EAAOje,EAAY,cAC1C0d,QAAkB15B,KAAK41B,YAAY,0BAA2BjrB,GAC9D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWxK,IAC1B,aAAWjxB,EACb,MAAM,IAAIlG,MACR,iDACEiiC,EAAa7pB,WACb,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAMW,yBACtBkjB,GAEA,MAAMyf,EAAM,IACPzf,EACHuB,WAAavB,GAAUA,EAAOuB,YAAehc,KAAKgc,YAE9CrR,EAAOuvB,EAAIxkB,QAAUwkB,EAAIle,WAAa,CAACke,GAAO,GAC9CR,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWvK,IAC1B,aAAWlxB,EACP,UAAIlG,MAAM,mCAAqCkG,EAAIzG,MAAMmD,SAE1DsD,OAAAA,EAAI1G,OAOgB,8BAC3B4iC,EACAne,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAAW,CAACU,EAAYhqB,YAAa6L,GACjD0d,QAAkB15B,KAAK41B,YAAY,0BAA2BjrB,GAC9D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW5K,IAC1B,aAAW7wB,EACP,UAAIlG,MACR,yCAA2CkG,EAAIzG,MAAMmD,SAGlDsD,OAAAA,EAAI1G,OAMiB,+BAC5BP,EACAglB,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAAW,CAACziC,EAAUmZ,YAAa6L,EAAY,UAC3D0d,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IACVq9B,EACA/N,IAAwBW,EAAAA,EAAAA,IAAS8C,MAE/B,aAAWnxB,EACb,MAAM,IAAIlG,MACR,oCACEf,EAAUmZ,WACV,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAMa,2BACxBP,EACAglB,GAIA,MAAMrR,EAAO3K,KAAKy5B,WAChB,CAACziC,EAAUmZ,YACX6L,EACA,cAEI0d,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IACVq9B,EACA/N,IAAwBW,EAAAA,EAAAA,IAASiD,MAE/B,aAAWtxB,EACb,MAAM,IAAIlG,MACR,oCACEf,EAAUmZ,WACV,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAMO,qBAClBP,EACAglB,GAEI,IAEK/d,aADW+B,KAAKo6B,yBAAyBpjC,EAAWglB,IAChDrf,MACX,MAAOxG,GACP,MAAM,IAAI4B,MACR,oCAAsCf,EAAUmZ,WAAa,KAAOha,IAQnC,wCACrCkkC,EACAre,GAEA,MAAMpQ,EAAOyuB,EAAWp/B,KAAIoN,GAAOA,EAAI8H,aACjCxF,EAAO3K,KAAKy5B,WAAW,CAAC7tB,GAAOoQ,EAAY,UAC3C0d,QAAkB15B,KAAK41B,YAAY,sBAAuBjrB,GAC1D1M,GAAM5B,EAAAA,EAAAA,IACVq9B,EACA/N,IAAwBzd,EAAAA,EAAAA,KAAMoe,EAAAA,EAAAA,IAAS8C,OAErC,aAAWnxB,EACb,MAAM,IAAIlG,MACR,mCAAqC6T,EAAO,KAAO3N,EAAIzG,MAAMmD,SAG1DsD,OAAAA,EAAI1G,OAMgB,8BAC3B8iC,EACAre,GAMO/d,aAJW+B,KAAKs6B,kCACrBD,EACAre,IAESrf,MAMW,yBACtB3F,EACAglB,EACA+N,GAEA,MAAMpf,EAAO3K,KAAKy5B,WAChB,CAACziC,EAAUmZ,YACX6L,OACAlM,OACUA,IAAVia,EAAsB,CAACA,MAAAA,QAASja,GAG5B4pB,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,GAAcgE,KACxC,aAAWxxB,EACb,MAAM,IAAIlG,MACP,kCAAiCf,EAAUmZ,eAC1ClS,EAAIzG,MAAMmD,WAITsD,OAAAA,EAAI1G,OAQW,yBACtBoZ,EACA4pB,GAEMC,MAAAA,EAAiE,GAEvE,IAAIxe,EACAye,EACAF,IACgC,kBAAvBA,EACTve,EAAaue,GAEbve,EAAaue,EAAmBve,WAChCye,EAAWF,EAAmBE,SAE1BF,EAAmBzjB,YACrB0jB,EAAM1jB,UAAYyjB,EAAmBzjB,WAEnCyjB,EAAmBG,UACrBF,EAAME,QAAUH,EAAmBG,WAKzC,MAAM/vB,EAAO3K,KAAKy5B,WAChB,CAAC9oB,EAAUR,YACX6L,EACAye,GAAY,SACZD,GAEId,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcvd,EAAAA,EAAAA,IAAMmhB,MAC9C,aAAWpxB,EACb,MAAM,IAAIlG,MACR,2CACE4Y,EAAUR,WACV,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAQiB,+BAC5BoZ,EACA4pB,GAOMC,MAAAA,EAAyD,GAE/D,IAAIxe,EACAue,IACgC,kBAAvBA,EACTve,EAAaue,GAEbve,EAAaue,EAAmBve,WAE5Bue,EAAmBG,UACrBF,EAAME,QAAUH,EAAmBG,WAKzC,MAAM/vB,EAAO3K,KAAKy5B,WAChB,CAAC9oB,EAAUR,YACX6L,EACA,aACAwe,GAEId,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IACVq9B,EACAjO,IAAcvd,EAAAA,EAAAA,IAAMshB,MAElB,aAAWvxB,EACb,MAAM,IAAIlG,MACR,2CACE4Y,EAAUR,WACV,KACAlS,EAAIzG,MAAMmD,SAGTsD,OAAAA,EAAI1G,OAMW,yBACtBgD,EACAyhB,GAEA,IAAI2e,EACA,IACFA,EAAmBngC,IAAAA,OAAYD,GAC/B,MAAO6W,GACP,MAAM,IAAIrZ,MAAM,qCAAuCwC,GAGzDuB,GAAmC,KAA5B6+B,EAAiBr9B,OAAe,gCAEvC,MAAMkB,EAAQo8B,KAAKC,MACbC,EAAyB9e,GAAchc,KAAKgc,WAElD,IAAI+e,EACAzgC,EAA0D,KACxD0gC,MAAAA,EAAiB,IAAIhiC,SAAQ,CAACnB,EAASC,KACvC,IACFijC,EAAiB/6B,KAAKi7B,YACpB1gC,GACA,CAAChD,EAAyBq0B,KACxBmP,OAAiBjrB,EACjBxV,EAAW,CACTsxB,QAAAA,EACAjvB,MAAOpF,GAETM,EAAQ,QAEVijC,GAEF,MAAO1pB,GACPtZ,EAAOsZ,OAIX,IAAI8pB,EAAYl7B,KAAKy1B,mCAAqC,IAC1D,OAAQqF,GACN,IAAK,YACL,IAAK,SACL,IAAK,SACL,IAAK,YACL,IAAK,eACHI,EAAYl7B,KAAKy1B,mCAAqC,IAStD,UEn0FD,SACLzR,EACAkX,GAEA,IAAIC,EACJ,MAAMC,EAAgC,IAAIpiC,SAAQnB,IAChDsjC,EAAY5e,YAAW,IAAM1kB,EAAQ,OAAOqjC,MAG9C,OAAOliC,QAAQqiC,KAAK,CAACrX,EAASoX,IAAiBpW,MAAMztB,IACnD+jC,aAAaH,GACN5jC,KFyzFCgkC,CAAeP,EAAgBE,GADnC,QAGEH,GACGS,KAAAA,wBAAwBT,GAI7BzgC,GAAa,OAAbA,EAAmB,CACfmhC,MAAAA,GAAYb,KAAKC,MAAQr8B,GAAS,IACxC,MAAM,IAAIzG,MACP,oCAAmC0jC,EAASC,QAC3C,wEACqEnhC,6CAI3E,OAAOD,EAMY,wBACbo/B,MAAAA,QAAkB15B,KAAK41B,YAAY,kBAAmB,IACtD33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcvd,EAAAA,EAAAA,IAAMijB,MAC9C,aAAWlzB,EACP,UAAIlG,MAAM,gCAAkCkG,EAAIzG,MAAMmD,SAEvDsD,OAAAA,EAAI1G,OAMQ,sBAACykB,GACdrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,kBAAmBjrB,GACtD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW1H,IAC1B,aAAW/zB,EACP,UAAIlG,MAAM,gCAAkCkG,EAAIzG,MAAMmD,SAEvDsD,OAAAA,EAAI1G,OAMA,cAACykB,GACNrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,UAAWjrB,GAC9C1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcI,EAAAA,EAAAA,QACxC,aAAW5tB,EACP,UAAIlG,MAAM,uBAAyBkG,EAAIzG,MAAMmD,SAE9CsD,OAAAA,EAAI1G,OAMM,oBAACykB,GACZrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,gBAAiBjrB,GACpD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcb,EAAAA,EAAAA,QACxC,aAAW3sB,EACP,UAAIlG,MAAM,8BAAgCkG,EAAIzG,MAAMmD,SAErDsD,OAAAA,EAAI1G,OASO,qBAClBokC,EACAC,GAEA,MAAMjxB,EAAO,CAACgxB,EAAWC,GACnBlC,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcvd,EAAAA,EAAAA,IAAMuc,MAC9C,aAAWxsB,EACP,UAAIlG,MAAM,+BAAiCkG,EAAIzG,MAAMmD,SAEtDsD,OAAAA,EAAI1G,OAMW,yBACtBgD,EACAkgB,GAEM,cAACmR,EAASjvB,MAAO6Y,SAAgBxV,KAAK67B,qBAC1C,CAACthC,GACDkgB,GAEF3e,GAAyB,IAAlB0Z,EAAOlY,QAEP,OAACsuB,QAAAA,EAASjvB,MADH6Y,EAAO,IAOG,2BACxBra,EACAsf,GAEA,MAAM1jB,EAAgB,CAACoE,GACnBsf,GACF1jB,EAAOoH,KAAKsc,GAERif,MAAAA,QAAkB15B,KAAK41B,YAAY,uBAAwB7+B,GAC3DkH,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWnH,IAC1B,aAAWt0B,EACP,UAAIlG,MAAM,mCAAqCkG,EAAIzG,MAAMmD,SAE1DsD,OAAAA,EAAI1G,OAMY,0BAACykB,GAClBrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,sBAAuBjrB,GAC1D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcI,EAAAA,EAAAA,QACxC,aAAW5tB,EACP,UAAIlG,MAAM,oCAAsCkG,EAAIzG,MAAMmD,SAE3DsD,OAAAA,EAAI1G,OAQO,qBAACykB,GAKnB,aAJqBhc,KAAK87B,UAAU,CAClC9f,WAAAA,EACA+f,mCAAmC,KAEvBp/B,MAAM2xB,MAMI,2BACxBtS,GAEMrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,uBAAwBjrB,GAC3D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW1L,IAC1B,aAAW/vB,EACP,UAAIlG,MAAM,4BAA8BkG,EAAIzG,MAAMmD,SAEnDsD,OAAAA,EAAI1G,OAMW,yBACtBykC,EACAjS,EACA/N,GAEMrR,MAAAA,EAAO3K,KAAKy5B,WAChB,CAACuC,EAAU/gC,KAAImc,GAAUA,EAAOjH,cAChC6L,OACAlM,EACA,CACEia,MAAAA,IAGE2P,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWrN,IAC1B,aAAWpuB,EACP,UAAIlG,MAAM,mCAAqCkG,EAAIzG,MAAMmD,SAE1DsD,OAAAA,EAAI1G,OAMK,mBAACykB,GACXrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,eAAgBjrB,GACnD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWzL,IAC1B,aAAWhwB,EACP,UAAIlG,MAAM,6BAA+BkG,EAAIzG,MAAMmD,SAEpDsD,OAAAA,EAAI1G,OAMS,yBACdmiC,MAAAA,QAAkB15B,KAAK41B,YAAY,mBAAoB,IACvD33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWxL,IAC1B,aAAWjwB,EACP,UAAIlG,MAAM,iCAAmCkG,EAAIzG,MAAMmD,SAE/D,MAAMshC,EAAgBh+B,EAAI1G,OACnB,WAAI+xB,GACT2S,EAAc1S,cACd0S,EAAczS,yBACdyS,EAAcxS,OACdwS,EAAcvS,iBACduS,EAActS,iBAQK,0BACf+P,MAAAA,QAAkB15B,KAAK41B,YAAY,oBAAqB,IACxD33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWvL,IAC1B,aAAWlwB,EACP,UAAIlG,MAAM,kCAAoCkG,EAAIzG,MAAMmD,SAEzDsD,OAAAA,EAAI1G,OAO0B,wCACrC8e,EACA2F,GAEMrR,MAAAA,EAAO3K,KAAKy5B,WAAW,CAACpjB,GAAa2F,GACrC0d,QAAkB15B,KAAK41B,YAC3B,oCACAjrB,GAEI1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWlH,IAC1B,gBAAWv0B,GACb8M,QAAQM,KAAK,sDACN,GAEFpN,EAAI1G,OASqB,mCAChCykB,GAIMrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWnF,IAC1B,aAAWt2B,EACP,UAAIlG,MAAM,mCAAqCkG,EAAIzG,MAAMmD,SAE1DsD,OAAAA,EAAI1G,OAOoB,kCAC/BqkC,GAEA,MAAMjxB,EAAO3K,KAAKy5B,WAAWmC,EAAQ,CAACA,GAAS,IACzClC,QAAkB15B,KAAK41B,YAC3B,8BACAjrB,GAEI1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW3E,IAC1B,aAAW92B,EACP,UAAIlG,MACR,6CAA+CkG,EAAIzG,MAAMmD,SAItDsD,OAAAA,EAAI1G,OAQqB,mCAChCu8B,EACA9X,GAEMrR,MAAAA,EAAO3K,KAAKy5B,WAAW,CAAC3F,GAAY9X,GACpC0d,QAAkB15B,KAAK41B,YAC3B,+BACAjrB,GAGI1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW1E,IAC1B,aAAW/2B,EACP,UAAIlG,MAAM,iCAAmCkG,EAAIzG,MAAMmD,SAEzD,cAACixB,EAAD,MAAUjvB,GAASsB,EAAI1G,OACtB,OACLq0B,QAAAA,EACAjvB,MAAiB,OAAVA,EAAiBA,EAAMwgB,cAAgB,MAO5B,uBACpBxiB,EACAqhB,GAEMkgB,MAAAA,EAAcvhC,EAAQ0U,YAAY3W,SAAS,UAC3CiS,EAAO3K,KAAKy5B,WAAW,CAACyC,GAAclgB,GACtC0d,QAAkB15B,KAAK41B,YAAY,mBAAoBjrB,GAEvD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW/N,IAAwBW,EAAAA,EAAAA,KAAST,EAAAA,EAAAA,SAC3D,aAAW5tB,EACP,UAAIlG,MAAM,uBAAyBkG,EAAIzG,MAAMmD,SAErD,GAAmB,OAAfsD,EAAI1G,OACN,MAAM,IAAIQ,MAAM,qBAEXkG,OAAAA,EAAI1G,OASW,yBACtBykB,GAEI,IAEK/d,aADW+B,KAAKm8B,6BAA6BngB,IACzCrf,MACX,MAAOxG,GACP,MAAM,IAAI4B,MAAM,mCAAqC5B,IAQjC,yBACtB6lB,GAEI,IAEK/d,aADW+B,KAAKo8B,6BAA6BpgB,IACzCrf,MACX,MAAOxG,GACP,MAAM,IAAI4B,MAAM,mCAAqC5B,IAQvB,mCAChC6lB,GAIMrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjF,IAC1B,aAAWx2B,EACP,UAAIlG,MAAM,mCAAqCkG,EAAIzG,MAAMmD,SAE1DsD,OAAAA,EAAI1G,OAMG,mBACRmiC,MAAAA,QAAkB15B,KAAK41B,YAAY,aAAc,IACjD33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,GAAc8B,KACxC,aAAWtvB,EACP,UAAIlG,MAAM,0BAA4BkG,EAAIzG,MAAMmD,SAEjDsD,OAAAA,EAAI1G,OAMO,uBACZmiC,MAAAA,QAAkB15B,KAAK41B,YAAY,iBAAkB,IACrD33B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcb,EAAAA,EAAAA,QACxC,aAAW3sB,EACP,UAAIlG,MAAM,+BAAiCkG,EAAIzG,MAAMmD,SAEtDsD,OAAAA,EAAI1G,OAMC,eACZsyB,EACA1S,GAEA,MAAMxM,EAAO3K,KAAKq8B,2BAChB,CAACxS,GACD1S,GAAQA,EAAK6E,YAET0d,QAAkB15B,KAAK41B,YAAY,WAAYjrB,GAC/C1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW7F,IAE1B,aAAW51B,EACP,UAAIlG,MAAM,kCAAoCkG,EAAIzG,MAAMmD,SAGhE,MAAMpD,EAAS0G,EAAI1G,OACnB,OAAKA,EAEE,IACFA,EACHwD,aAAcxD,EAAOwD,aAAaE,KAAI,IAAyB,IAAxB,YAACP,EAAD,KAAc0e,GAAU,EACvDze,MAAAA,EAAU,IAAI2Z,GAAQ5Z,EAAYC,SACjC,OACLye,KAAAA,EACA1e,YAAa,IACRA,EACHC,QAAAA,QAVYpD,EAoBF,qBAACykB,GACbrR,MAAAA,EAAO3K,KAAKy5B,WAAW,GAAIzd,GAC3B0d,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcI,EAAAA,EAAAA,QACxC,aAAW5tB,EACP,UAAIlG,MACR,2CAA6CkG,EAAIzG,MAAMmD,SAIpDsD,OAAAA,EAAI1G,OAMW,yBACtBgjC,GAEA,IAAIC,EACAxe,EAEJ,GAAkC,kBAAvBue,EACTve,EAAaue,OACR,GAAIA,EAAoB,CACvB,MAACve,WAAY1d,KAAMg+B,GAAQ/B,EACjCve,EAAa1d,EACbk8B,EAAQ8B,EAGV,MAAM3xB,EAAO3K,KAAKy5B,WAAW,GAAIzd,EAAY,SAAUwe,GACjDd,QAAkB15B,KAAK41B,YAAY,qBAAsBjrB,GACzD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW/L,IAC1B,aAAW1vB,EACP,UAAIlG,MACR,+CAAiDkG,EAAIzG,MAAMmD,SAIxDsD,OAAAA,EAAI1G,OAMO,qBAClBgD,EACA4c,GAEA,MAAMxM,EAAO3K,KAAKq8B,2BAChB,CAAC9hC,GACD4c,GAAQA,EAAK6E,YAET0d,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWrF,IAC1B,aAAWp2B,EACP,UAAIlG,MAAM,8BAAgCkG,EAAIzG,MAAMmD,SAG5D,MAAMpD,EAAS0G,EAAI1G,OACnB,OAAKA,EAEE,IACFA,EACHmD,YAAa,IACRnD,EAAOmD,YACVC,QAAS,IAAI2Z,GAAQ/c,EAAOmD,YAAYC,WANxBpD,EAcI,2BACxBgD,EACAyhB,GAEA,MAAMrR,EAAO3K,KAAKq8B,2BAChB,CAAC9hC,GACDyhB,EACA,cAEI0d,QAAkB15B,KAAK41B,YAAY,iBAAkBjrB,GACrD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWpF,IAC1B,aAAWr2B,EACP,UAAIlG,MAAM,8BAAgCkG,EAAIzG,MAAMmD,SAErDsD,OAAAA,EAAI1G,OAMc,4BACzB4D,EACA6gB,GAEA,MAAMsc,EAAQn9B,EAAWF,KAAIV,IAMpB,CACLg+B,WAAY,iBACZ5tB,KAPW3K,KAAKq8B,2BAChB,CAAC9hC,GACDyhB,EACA,kBAiBJ,aATwBhc,KAAK61B,iBAAiByC,IACxBr9B,KAAKy+B,IACzB,MAAMz7B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWpF,IAC1B,aAAWr2B,EACP,UAAIlG,MAAM,+BAAiCkG,EAAIzG,MAAMmD,SAEtDsD,OAAAA,EAAI1G,UAUM,sBACnB4D,EACA6gB,GAEA,MAAMsc,EAAQn9B,EAAWF,KAAIV,IAEpB,CACLg+B,WAAY,iBACZ5tB,KAHW3K,KAAKq8B,2BAA2B,CAAC9hC,GAAYyhB,OAgB5D,aATwBhc,KAAK61B,iBAAiByC,IACxBr9B,KAAKy+B,IACzB,MAAMz7B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWrF,IAC1B,aAAWp2B,EACP,UAAIlG,MAAM,+BAAiCkG,EAAIzG,MAAMmD,SAEtDsD,OAAAA,EAAI1G,UAYQ,wBACrBsyB,EACA7N,GAEMrR,MAAAA,EAAO3K,KAAKq8B,2BAA2B,CAACxS,GAAO7N,GAC/C0d,QAAkB15B,KAAK41B,YAAY,oBAAqBjrB,GACxD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWvF,IAE1B,aAAWl2B,EACP,UAAIlG,MAAM,kCAAoCkG,EAAIzG,MAAMmD,SAGhE,MAAMpD,EAAS0G,EAAI1G,OACf,IAACA,EACH,MAAM,IAAIQ,MAAM,mBAAqB8xB,EAAO,cAG9C,MAAM0S,EAAQ,IACThlC,EACHwD,aAAcxD,EAAOwD,aAAaE,KAAI,IAAyB,IAAxB,YAACP,EAAD,KAAc0e,GAAU,EACvDze,MAAAA,EAAU,IAAI2Z,GAAQ5Z,EAAYC,SACjC,OACLye,KAAAA,EACA1e,YAAa,IACRA,EACHC,QAAAA,QAMD,UACF4hC,EACHxhC,aAAcwhC,EAAMxhC,aAAaE,KAAI,IAAyB,IAAxB,YAACP,EAAD,KAAc0e,GAAU,EACrD,OACLA,KAAAA,EACA1e,YAAa6c,GAAYwD,SACvBrgB,EAAYC,QACZD,EAAYS,iBAUP,gBACbwgC,EACAa,EACAxgB,GAEMrR,MAAAA,EAAO3K,KAAKq8B,gCACJvsB,IAAZ0sB,EAAwB,CAACb,EAAWa,GAAW,CAACb,GAChD3f,GAEI0d,QAAkB15B,KAAK41B,YAAY,YAAajrB,GAChD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWjO,IAAcvd,EAAAA,EAAAA,KAAM2d,EAAAA,EAAAA,SAC9C,aAAW5tB,EACP,UAAIlG,MAAM,yBAA2BkG,EAAIzG,MAAMmD,SAEhDsD,OAAAA,EAAI1G,OAMW,yBACtBsyB,EACA7N,GAEA,MAAMrR,EAAO3K,KAAKq8B,2BAChB,CAACxS,GACD7N,OACAlM,EACA,CACE2sB,mBAAoB,aACpBxI,SAAS,IAGPyF,QAAkB15B,KAAK41B,YAAY,WAAYjrB,GAC/C1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWtF,IAC1B,aAAWn2B,EACP,UAAIlG,MAAM,wBAA0BkG,EAAIzG,MAAMmD,SAEtD,MAAMpD,EAAS0G,EAAI1G,OACf,IAACA,EACH,MAAM,IAAIQ,MAAM,SAAW8xB,EAAO,cAEpC,OAAOtyB,EAQwB,kCAC/BsyB,EACA7N,GAEA,MAAMrR,EAAO3K,KAAKq8B,2BAChB,CAACxS,GACD7N,OACAlM,EACA,CACE2sB,mBAAoB,aACpBxI,SAAS,IAGPyF,QAAkB15B,KAAK41B,YAAY,oBAAqBjrB,GACxD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWtF,IAC1B,aAAWn2B,EACP,UAAIlG,MAAM,kCAAoCkG,EAAIzG,MAAMmD,SAEhE,MAAMpD,EAAS0G,EAAI1G,OACf,IAACA,EACH,MAAM,IAAIQ,MAAM,mBAAqB8xB,EAAO,cAE9C,OAAOtyB,EAQoB,8BAC3BgD,EACAyhB,GAEMrR,MAAAA,EAAO3K,KAAKq8B,2BAA2B,CAAC9hC,GAAYyhB,GACpD0d,QAAkB15B,KAAK41B,YAAY,0BAA2BjrB,GAC9D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWrF,IAC1B,aAAWp2B,EACP,UAAIlG,MAAM,8BAAgCkG,EAAIzG,MAAMmD,SAG5D,MAAMpD,EAAS0G,EAAI1G,OACnB,IAAKA,EAAQ,OAAOA,EAEdoD,MAAAA,EAAU,IAAI2Z,GAAQ/c,EAAOmD,YAAYC,SACzCQ,EAAa5D,EAAOmD,YAAYS,WAC/B,UACF5D,EACHmD,YAAa6c,GAAYwD,SAASpgB,EAASQ,IASZ,oCACjCZ,EACAyhB,GAEA,MAAMrR,EAAO3K,KAAKq8B,2BAChB,CAAC9hC,GACDyhB,EACA,cAEI0d,QAAkB15B,KAAK41B,YAAY,0BAA2BjrB,GAC9D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWpF,IAC1B,aAAWr2B,EACP,UAAIlG,MACR,wCAA0CkG,EAAIzG,MAAMmD,SAGjDsD,OAAAA,EAAI1G,OAQuB,qCAClC4D,EACA6gB,GAEA,MAAMsc,EAAQn9B,EAAWF,KAAIV,IAMpB,CACLg+B,WAAY,0BACZ5tB,KAPW3K,KAAKq8B,2BAChB,CAAC9hC,GACDyhB,EACA,kBAmBJ,aAXwBhc,KAAK61B,iBAAiByC,IACxBr9B,KAAKy+B,IACzB,MAAMz7B,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWpF,IAC1B,aAAWr2B,EACP,UAAIlG,MACR,yCAA2CkG,EAAIzG,MAAMmD,SAGlDsD,OAAAA,EAAI1G,UAgBuB,uCACpC2Z,EACAyqB,EACAa,GAEIluB,IAAAA,EAAe,GAEfouB,QAA4B18B,KAAK28B,yBACrC,OAAS,UAAWruB,QAClBqtB,GACiB,GAAKA,EAAYe,IAI9B,IACIH,MAAAA,QAAcv8B,KAAK48B,4BACvBjB,EACA,aAEEY,EAAMphC,WAAWmC,OAAS,IAC5BgR,EAAQuuB,MACNN,EAAMphC,WAAWohC,EAAMphC,WAAWmC,OAAS,GAAG5E,YAElD,MAAO0Y,GACP,GAAIA,aAAerZ,OAASqZ,EAAIzW,QAAQyd,SAAS,WAC/C,SAEA,MAAMhH,EAKZ,IAAI0rB,QAA6B98B,KAAK+8B,QAAQ,aAC9C,OAAS,WAAYzuB,QACnBkuB,EACcM,IAIV,IACF,MAAMP,QAAcv8B,KAAK48B,4BAA4BJ,GACjDD,EAAMphC,WAAWmC,OAAS,IAC5BgR,EAAQ0uB,OACNT,EAAMphC,WAAWohC,EAAMphC,WAAWmC,OAAS,GAAG5E,YAElD,MAAO0Y,GACP,GAAIA,aAAerZ,OAASqZ,EAAIzW,QAAQyd,SAAS,WAC/C,SAEA,MAAMhH,EASL6rB,aAJ8Bj9B,KAAKk9B,kCACxChsB,EACA5C,IAE4BrT,KAAIqO,GAAQA,EAAK/O,YAWV,wCACrC2W,EACA5C,EACA0N,GAEA,MAAMrR,EAAO3K,KAAKq8B,2BAChB,CAACnrB,EAAQf,YACT6L,OACAlM,EACAxB,GAEIorB,QAAkB15B,KAAK41B,YAC3B,oCACAjrB,GAEI1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW7J,IAC1B,aAAW5xB,EACP,UAAIlG,MACR,mDAAqDkG,EAAIzG,MAAMmD,SAG5DsD,OAAAA,EAAI1G,OAWgB,8BAC3B2Z,EACA5C,EACA0N,GAEA,MAAMrR,EAAO3K,KAAKq8B,2BAChB,CAACnrB,EAAQf,YACT6L,OACAlM,EACAxB,GAEIorB,QAAkB15B,KAAK41B,YAAY,0BAA2BjrB,GAC9D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAW1J,IAC1B,aAAW/xB,EACP,UAAIlG,MACR,yCAA2CkG,EAAIzG,MAAMmD,SAGlDsD,OAAAA,EAAI1G,OAMW,yBACtB6lB,EACApB,GAEM,cAAC4P,EAASjvB,MAAOwgC,SAAqBn9B,KAAKo6B,yBAC/Chd,EACApB,GAGErf,IAAAA,EAAQ,KAKL,OAJa,OAAhBwgC,IACFxgC,EAAQsgB,GAAamgB,gBAAgBD,EAAYxmC,OAG5C,CACLi1B,QAAAA,EACAjvB,MAAAA,GAOU,eACZygB,EACApB,GAEA,aAAahc,KAAKq9B,mBAAmBjgB,EAAcpB,GAChDgJ,MAAK1jB,GAAKA,EAAE3E,QACZi9B,OAAMzjC,IACL,MAAM,IAAI4B,MACR,mCACEqlB,EAAajN,WACb,KACAha,MAmBU,qBAClBmnC,EACA1f,GAEA,MAAM8b,QAAkB15B,KAAK41B,YAAY,iBAAkB,CACzD0H,EAAGntB,WACHyN,IAEI3f,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWzE,IAC1B,aAAWh3B,EACb,MAAM,IAAIlG,MACR,cAAgBulC,EAAGntB,WAAa,YAAclS,EAAIzG,MAAMmD,SAGrDsD,OAAAA,EAAI1G,OAMS,uBAACgmC,GACjB,IAACA,EAAc,CAEV,KAAAv9B,KAAKo2B,yBACJ/Z,GAAM,KAERmhB,MACAC,EADiB7C,KAAKC,MAAQ76B,KAAKq2B,eAAeC,WACtBrL,GAC9B,GAAwC,OAAxCjrB,KAAKq2B,eAAe5hB,kBAA6BgpB,EAC5C,OAAAz9B,KAAKq2B,eAAe5hB,gBAIxB,aAAMzU,KAAK09B,oBAMG,0BAChBtH,KAAAA,mBAAoB,EACrB,IACF,MAAMuH,EAAY/C,KAAKC,MAClB,QAAIz9B,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrB,gBAAC02B,SAAmB9zB,KAAK49B,mBAAmB,aAElD,GAAI59B,KAAKq2B,eAAe5hB,iBAAmBqf,EAOzC,OANA9zB,KAAKq2B,eAAiB,CACpB5hB,gBAAiBqf,EACjBwC,UAAWsE,KAAKC,MAChBtE,sBAAuB,GACvBC,oBAAqB,IAEhB1C,QAIHzX,GAAMwhB,KAGR,UAAI9lC,MACkC6iC,0CAAAA,KAAKC,MAAQ8C,OApBvD,QAuBGvH,KAAAA,mBAAoB,GAOJ,0BACvB0H,EACAjmB,EACAkmB,GAEA,IAAIrjC,EACAojC,GAAAA,aAAgCvmB,GAAa,CAC3CymB,IAAAA,EAA0BF,EAC9BpjC,EAAc,IAAI6c,GAAY,CAC5B9C,gBAAiBupB,EAAWvpB,gBAC5BgD,UAAWumB,EAAWvmB,UACtBD,SAAUwmB,EAAWxmB,SACrBrc,WAAY,IAAI6iC,EAAW7iC,cAE7BT,EAAYga,aAAeopB,EAAqBppB,kBAEhDha,EAAc6c,GAAYwD,SAAS+iB,GAEnCpjC,EAAYgd,SAAWhd,EAAYid,WAAQ7H,EAG7C,GAAIpV,EAAY+c,WAAaI,EAC3Bnd,EAAYP,QAAQ0d,OACf,CACD0lB,IAAAA,EAAev9B,KAAKm2B,yBACf,KACPz7B,EAAY+Z,sBAAwBzU,KAAKi+B,iBAAiBV,GAErD1lB,GAHE,CAMP,GADAnd,EAAYP,QAAQ0d,IACfnd,EAAYH,UACf,MAAM,IAAIxC,MAAM,cAGZwC,MAAAA,EAAYG,EAAYH,UAAU7B,SAAS,UAE/C,IAACsH,KAAKq2B,eAAeG,oBAAoBpe,SAAS7d,KACjDyF,KAAKq2B,eAAeE,sBAAsBne,SAAS7d,GACpD,CAGAyF,KAAKq2B,eAAeG,oBAAoBr4B,KAAK5D,GAC7C,MAMAgjC,GAAe,GAKrB,MAAM5iC,EAAUD,EAAY6e,WACtB5C,EAAWhc,EAAQ0U,YAEnB6uB,EADkBxjC,EAAYggB,WAAW/D,GACJje,SAAS,UAC9C+hB,EAAc,CAClBggB,SAAU,SACVze,WAAYhc,KAAKgc,YAGnB,GAAI+hB,EAAiB,CACb/B,MAAAA,GACJl+B,MAAMC,QAAQggC,GACVA,EACApjC,EAAQ8a,iBACZxa,KAAIoN,GAAOA,EAAI8H,aAEjBsK,EAAM,SAAe,CACnBggB,SAAU,SACVuB,UAAAA,GAIAnkB,IACF4C,EAAO0jB,WAAY,GAGrB,MAAMxzB,EAAO,CAACuzB,EAAoBzjB,GAC5Bif,QAAkB15B,KAAK41B,YAAY,sBAAuBjrB,GAC1D1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWlM,IAC1B,aAAWvvB,EAAK,CAClB,IAAIusB,EACJ,GAAI,SAAUvsB,EAAIzG,QAChBgzB,EAAOvsB,EAAIzG,MAAMb,KAAK6zB,KAClBA,GAAQ1sB,MAAMC,QAAQysB,IAAO,CACzB4T,MAAAA,EAAc,SACdC,EAAWD,EAAc5T,EAAKzgB,KAAKq0B,GACzCrzB,QAAQvT,MAAMyG,EAAIzG,MAAMmD,QAAS0jC,GAG/B,UAAI9T,GACR,mCAAqCtsB,EAAIzG,MAAMmD,QAC/C6vB,GAGGvsB,OAAAA,EAAI1G,OAMQ,sBACnBmD,EACAmd,EACAvJ,GAEI5T,GAAAA,EAAY+c,UACd/c,EAAYP,QAAQ0d,OACf,CACD0lB,IAAAA,EAAev9B,KAAKm2B,yBACf,QAGP,GAFAz7B,EAAY+Z,sBAAwBzU,KAAKi+B,iBAAiBV,GAC1D7iC,EAAYP,QAAQ0d,IACfnd,EAAYH,UACf,MAAM,IAAIxC,MAAM,cAGZwC,MAAAA,EAAYG,EAAYH,UAAU7B,SAAS,UAC7C,IAACsH,KAAKq2B,eAAeE,sBAAsBne,SAAS7d,GAAY,CAGlEyF,KAAKq2B,eAAeE,sBAAsBp4B,KAAK5D,GAC/C,MAMAgjC,GAAe,GAKrB,MAAM1iB,EAAkBngB,EAAY2U,YACpC,aAAarP,KAAKs+B,mBAAmBzjB,EAAiBvM,GAOhC,yBACtBiwB,EACAjwB,GAEM4vB,MAAAA,EAAqB3iC,EAASgjC,GAAgB7lC,SAAS,UAK7D,aAJqBsH,KAAKw+B,uBACxBN,EACA5vB,GASwB,6BAC1B4vB,EACA5vB,GAEA,MAAMmM,EAAc,CAACggB,SAAU,UACzB3e,EAAgBxN,GAAWA,EAAQwN,cACnCC,EACHzN,GAAWA,EAAQyN,qBAAwB/b,KAAKgc,WAE/C1N,GAAWA,EAAQ2N,aACrBxB,EAAOwB,WAAa3N,EAAQ2N,YAE1BH,IACFrB,EAAOqB,cAAgBA,GAErBC,IACFtB,EAAOsB,oBAAsBA,GAG/B,MAAMpR,EAAO,CAACuzB,EAAoBzjB,GAC5Bif,QAAkB15B,KAAK41B,YAAY,kBAAmBjrB,GACtD1M,GAAM5B,EAAAA,EAAAA,IAAOq9B,EAAWxE,IAC1B,aAAWj3B,EAAK,CAClB,IAAIusB,EAIE,KAHF,SAAUvsB,EAAIzG,QAChBgzB,EAAOvsB,EAAIzG,MAAMb,KAAK6zB,MAElB,IAAID,GACR,+BAAiCtsB,EAAIzG,MAAMmD,QAC3C6vB,GAGGvsB,OAAAA,EAAI1G,OAMbuhC,YACO/C,KAAAA,wBAAyB,EAC9B/1B,KAAKg2B,uBAAyByI,aAAY,KAEnC3I,KAAAA,cAAc4I,OAAO,QAAQ9E,OAAM,WACvC,KACH55B,KAAK2+B,uBAMP5F,WAAW3nB,GACTrG,QAAQvT,MAAM,YAAa4Z,EAAIzW,SAMjCq+B,WAAWxtB,GACTxL,KAAKk2B,0BACDl2B,KAAKg2B,yBACP4I,cAAc5+B,KAAKg2B,wBACdA,KAAAA,uBAAyB,MAGnB,MAATxqB,GAOCmrB,KAAAA,6CAA+C,GACpDv6B,OAAOqhB,QACLzd,KAAK42B,sBACLt9B,SAAQ,IAA0B,IAAxBhB,EAAM43B,GAAkB,EAClClwB,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACHR,MAAO,eAXT1vB,KAAK2+B,uBAmBiB,6BACpBviC,GAAkD,IAAlDA,OAAOwP,KAAK5L,KAAK42B,sBAAsBt5B,OAiBzC,YAhBI0C,KAAK+1B,yBACFA,KAAAA,wBAAyB,EAC9B/1B,KAAKi2B,yBAA2B1Z,YAAW,KACpC0Z,KAAAA,yBAA2B,KAC5B,IACGH,KAAAA,cAAc57B,QACnB,MAAOkX,GAEHA,aAAerZ,OACjBgT,QAAQC,IACL,yCAAwCoG,EAAIzW,cAIlD,OAWH,GANkC,OAAlCqF,KAAKi2B,2BACPqF,aAAat7B,KAAKi2B,0BACbA,KAAAA,yBAA2B,KAC3BF,KAAAA,wBAAyB,IAG3B/1B,KAAK+1B,uBAER,YADKD,KAAAA,cAAc77B,UAIf4kC,MAAAA,EAA4B7+B,KAAKk2B,wBACjC4I,EAAiC,IAC9BD,IAA8B7+B,KAAKk2B,8BAGtCl9B,QAAQ+nB,IAKZ3kB,OAAOwP,KAAK5L,KAAK42B,sBAAsB37B,KAAI0gB,MAAAA,IACzC,MAAMuU,EAAelwB,KAAK42B,qBAAqBt+B,GAC3C43B,QAAiBpgB,IAAjBogB,EAIIA,OAAAA,EAAaR,OACnB,IAAK,UACL,IAAK,eACH,GAAoC,IAAhCQ,EAAa6O,UAAU9qB,KAqBzB,cAPOjU,KAAK42B,qBAAqBt+B,GACN,iBAAvB43B,EAAaR,cACR1vB,KAAK22B,6CACVzG,EAAa8O,iCAGXh/B,KAAK2+B,4BAGP,WACE,WAACh0B,EAAD,OAAO/T,GAAUs5B,EACnB,IACFlwB,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACHR,MAAO,eAEHsP,MAAAA,QACGh/B,KAAK81B,cAAc3zB,KAAKvL,EAAQ+T,GACzC3K,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACH8O,qBAAAA,EACAtP,MAAO,cAET1vB,KAAK22B,6CACHqI,GACE9O,EAAa6O,gBACX/+B,KAAK2+B,uBACX,MAAOxoC,GAQH,GAPAA,aAAa4B,OACfgT,QAAQvT,MACHZ,GAAAA,uBACH+T,EACAxU,EAAEwE,UAGDmkC,IACH,OAGF9+B,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACHR,MAAO,iBAEH1vB,KAAK2+B,yBAlCT,GAqCN,MACF,IAAK,aACiC,IAAhCzO,EAAa6O,UAAU9qB,WAInB,WACE,2BAAC+qB,EAAD,kBAAuBC,GAAqB/O,EAClD,GACElwB,KAAK62B,gCAAgCvhB,IAAI0pB,GAWzCh/B,KAAK62B,gCAAgCt9B,OACnCylC,OAEG,CACLh/B,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACHR,MAAO,iBAEL,UACI1vB,KAAK81B,cAAc3zB,KAAK88B,EAAmB,CAC/CD,IAEF,MAAO7oC,GAIH,GAHAA,aAAa4B,OACfgT,QAAQvT,MAAO,GAAEynC,WAA4B9oC,EAAEwE,UAE5CmkC,IACH,OAQF,OALA9+B,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACHR,MAAO,yBAEH1vB,KAAK2+B,wBAIf3+B,KAAK42B,qBAAqBt+B,GAAQ,IAC7B43B,EACHR,MAAO,sBAEH1vB,KAAK2+B,wBA9CP,QA6DVO,0BAGNF,EACAG,GAEA,MAAMJ,EACJ/+B,KAAK22B,6CAA6CqI,QAClClvB,IAAdivB,GAGJA,EAAUzlC,SAAQ8lC,IACZ,IACFA,KAKKD,GAEL,MAAOhpC,GACP4U,QAAQvT,MAAMrB,OAQpB8iC,yBAAyBoG,GACjB,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAC7BgjC,EACApP,IAEFjwB,KAAKk/B,0BAAiDhP,EAAc,CAClE34B,EAAOoF,MACPpF,EAAOq0B,UAOH0T,kBACNC,EAyBA50B,GAEA,MAAM60B,EAAuBx/B,KAAKy2B,4BAC5Bn+B,EAAOmnC,GACX,CAACF,EAAmB3oC,OAAQ+T,IAC5B,GAEI+0B,EAAuB1/B,KAAK42B,qBAAqBt+B,GA0BvD,YAzB6BwX,IAAzB4vB,EACF1/B,KAAK42B,qBAAqBt+B,GAAQ,IAC7BinC,EACH50B,KAAAA,EACAo0B,UAAW,IAAIhlB,IAAI,CAACwlB,EAAmB7Z,WACvCgK,MAAO,WAGTgQ,EAAqBX,UAAUjnB,IAAIynB,EAAmB7Z,UAExD1lB,KAAK02B,oDACH8I,GACE7jB,iBACK3b,KAAK02B,oDACV8I,GAEF,MAAMtP,EAAelwB,KAAK42B,qBAAqBt+B,GAC/CwD,QACmBgU,IAAjBogB,EACC,4EAA2EsP,KAE9EtP,EAAa6O,UAAUxlC,OAAOgmC,EAAmB7Z,gBAC3C1lB,KAAK2+B,wBAEb3+B,KAAK2+B,uBACEa,EAWTG,gBACE3oC,EACA0uB,EACA1J,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAChB,CAACziC,EAAUmZ,YACX6L,GAAchc,KAAKw1B,aAAe,YAClC,UAEK,OAAAx1B,KAAKs/B,kBACV,CACE5Z,SAAAA,EACA9uB,OAAQ,mBACRqoC,kBAAmB,sBAErBt0B,GAS6B,kCAC/B60B,SAEMx/B,KAAK4/B,+BACTJ,EACA,kBAOJtG,gCAAgCmG,GACxB,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAC7BgjC,EACAjP,IAEFpwB,KAAKk/B,0BAAwDhP,EAAc,CACzE,CACE2P,UAAWtoC,EAAOoF,MAAMya,OACxB+lB,YAAa5lC,EAAOoF,MAAMiY,SAE5Brd,EAAOq0B,UAcXkU,uBACEnvB,EACA+U,EACA1J,EACA0e,GAEA,MAAM/vB,EAAO3K,KAAKy5B,WAChB,CAAC9oB,EAAUR,YACX6L,GAAchc,KAAKw1B,aAAe,YAClC,SACAkF,EAAU,CAACA,QAASA,QAAW5qB,GAE1B,OAAA9P,KAAKs/B,kBACV,CACE5Z,SAAAA,EACA9uB,OAAQ,mBACRqoC,kBAAmB,sBAErBt0B,GASoC,yCACtC60B,SAEMx/B,KAAK4/B,+BACTJ,EACA,0BAOJO,OACErqB,EACAgQ,EACA1J,GAEMrR,MAAAA,EAAO3K,KAAKy5B,WAChB,CAAmB,kBAAX/jB,EAAsB,CAACsqB,SAAU,CAACtqB,EAAOhd,aAAegd,GAChEsG,GAAchc,KAAKw1B,aAAe,aAE7B,OAAAx1B,KAAKs/B,kBACV,CACE5Z,SAAAA,EACA9uB,OAAQ,gBACRqoC,kBAAmB,mBAErBt0B,GASsB,2BACxB60B,SAEMx/B,KAAK4/B,+BAA+BJ,EAAsB,QAMlEjG,sBAAsB8F,GACd,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAAOgjC,EAAcjK,IACpDp1B,KAAKk/B,0BAAwChP,EAAc,CACzD34B,EAAOoF,MACPpF,EAAOq0B,UAOXuN,sBAAsBkG,GACd,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAAOgjC,EAAc7O,IACpDxwB,KAAKk/B,0BAA8ChP,EAAc,CAAC34B,IASpE0oC,aAAava,GACJ,OAAA1lB,KAAKs/B,kBACV,CACE5Z,SAAAA,EACA9uB,OAAQ,gBACRqoC,kBAAmB,mBAErB,IAS0B,+BAC5BO,SAEMx/B,KAAK4/B,+BACTJ,EACA,eAOJpG,6BAA6BiG,GACrB,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAC7BgjC,EACArO,IAEFhxB,KAAKk/B,0BAA8ChP,EAAc,CAAC34B,IAUpE2oC,aAAaxa,GACJ,OAAA1lB,KAAKs/B,kBACV,CACE5Z,SAAAA,EACA9uB,OAAQ,wBACRqoC,kBAAmB,2BAErB,IAS0B,+BAC5BO,SAEMx/B,KAAK4/B,+BACTJ,EACA,eAQwC,qCAC1CA,EACAW,GAEA,MAAMC,EACJpgC,KAAK02B,oDACH8I,GAEAY,QACIA,IAENr1B,QAAQM,KAECm0B,wEAAAA,YAA+BW,iCAM5C1G,WACE9uB,EACA01B,EACA5F,EACAD,GAEA,MAAMxe,EAAaqkB,GAAYrgC,KAAKw1B,YACpC,GAAIxZ,GAAcye,GAAYD,EAAO,CAC/BlsB,IAAAA,EAAe,GACfmsB,IACFnsB,EAAQmsB,SAAWA,GAEjBze,IACF1N,EAAQ0N,WAAaA,GAEnBwe,IACFlsB,EAAUlS,OAAO+S,OAAOb,EAASksB,IAEnC7vB,EAAKxM,KAAKmQ,GAEZ,OAAO3D,EAMT0xB,2BACE1xB,EACA01B,EACA5F,EACAD,GAEA,MAAMxe,EAAaqkB,GAAYrgC,KAAKw1B,YACpC,GAAIxZ,IAAe,CAAC,YAAa,aAAa5D,SAAS4D,GAC/C,UAAIjkB,MACR,8CACEiI,KAAKw1B,YACL,+CAGC,OAAAx1B,KAAKy5B,WAAW9uB,EAAM01B,EAAU5F,EAAUD,GAMnDnB,2BAA2BgG,GACnB,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAC7BgjC,EACApO,IAEmB,sBAAjB15B,EAAOoF,OAcTqD,KAAK62B,gCAAgC/e,IAAIoY,GAEtCgP,KAAAA,0BACHhP,EACiB,sBAAjB34B,EAAOoF,MACH,CAAC,CAAC8f,KAAM,YAAallB,EAAOq0B,SAC5B,CAAC,CAACnP,KAAM,SAAUllB,OAAQA,EAAOoF,OAAQpF,EAAOq0B,UAYxDqP,YACE1gC,EACAmrB,EACA1J,GAEA,MAAMrR,EAAO3K,KAAKy5B,WAChB,CAACl/B,GACDyhB,GAAchc,KAAKw1B,aAAe,aAE9BgK,EAAuBx/B,KAAKs/B,kBAChC,CACE5Z,SAAU,CAAC2Z,EAAczT,KACvB,GAA0B,WAAtByT,EAAa5iB,KAAmB,CAClCiJ,EAAS2Z,EAAa9nC,OAAQq0B,GAG1B,IACF5rB,KAAKw7B,wBAAwBgE,GAE7B,UAKN5oC,OAAQ,qBACRqoC,kBAAmB,wBAErBt0B,GAEF,OAAO60B,EAaTc,uBACE/lC,EACAmrB,EACApX,GAEM,iBAAC0N,KAAewe,GAAS,IAC1BlsB,EACH0N,WACG1N,GAAWA,EAAQ0N,YAAehc,KAAKw1B,aAAe,aAErD7qB,EAAO3K,KAAKy5B,WAChB,CAACl/B,GACDyhB,OACAlM,EACA0qB,GAEIgF,EAAuBx/B,KAAKs/B,kBAChC,CACE5Z,SAAU,CAAC2Z,EAAczT,KACvBlG,EAAS2Z,EAAczT,GAGnB,IACF5rB,KAAKw7B,wBAAwBgE,GAE7B,SAIJ5oC,OAAQ,qBACRqoC,kBAAmB,wBAErBt0B,GAEF,OAAO60B,EAQoB,8BAC3BA,SAEMx/B,KAAK4/B,+BACTJ,EACA,oBAOJlG,sBAAsB+F,GACd,aAAC9nC,EAAD,aAAS24B,IAAgB7zB,EAAAA,EAAAA,IAAOgjC,EAAcnO,IACpDlxB,KAAKk/B,0BAA8ChP,EAAc,CAAC34B,IASpEgpC,aAAa7a,GACJ,OAAA1lB,KAAKs/B,kBACV,CACE5Z,SAAAA,EACA9uB,OAAQ,gBACRqoC,kBAAmB,mBAErB,IAS0B,+BAC5BO,SAEMx/B,KAAK4/B,+BACTJ,EACA,gBGv0JC,MAAMgB,GASXzqC,YAAY0qC,GAA0B,KAR9B3tB,cAQ8B,EAE7BA,KAAAA,SADH2tB,GAGc/uB,IAAAA,KAAAA,UAOL,kBACN,WAAI8uB,GAAQ9uB,IAAAA,KAAAA,WAeD,qBAClBmB,EACAvE,GAEMmyB,MAAAA,EAAU/uB,IAAAA,KAAAA,QAAAA,cAAgCmB,GAChD,IAAKvE,IAAYA,EAAQoyB,eAAgB,CACvC,MACM/pB,GADU,IAAIgqB,aACKvxB,OAAO,iCAC1B7U,EAAYmX,IAAAA,KAAAA,SAAmBiF,EAAU8pB,EAAQ5tB,WACvD,IAAKnB,IAAAA,KAAAA,SAAAA,OAA0BiF,EAAUpc,EAAWkmC,EAAQzpC,WAC1D,MAAM,IAAIe,MAAM,iCAGpB,OAAO,IAAIyoC,GAAQC,GAQN,gBAAC/vB,GACd,OAAO,IAAI8vB,GAAQ9uB,IAAAA,KAAAA,QAAAA,SAA2BhB,IAM5C1Z,gBACF,OAAO,IAAIF,GAAUkJ,KAAK8S,SAAS9b,WAMjC6b,gBACK,OAAA7S,KAAK8S,SAASD,WCtFzB,MAuBM+tB,GAA6BztB,EAAAA,GAYjC,CACAA,EAAAA,GAAgB,iBAChBA,EAAAA,GAAgB,WAChBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAiB,6BACjBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAiB,6BACjBA,EAAAA,GAAiB,qBACjBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAiB,6BAGZ,MAAM0tB,GAIX9qC,eAcqC,sCACnCgB,GAEM,gBAACC,EAAD,QAAY2D,EAAZ,UAAqBJ,EAArB,iBAAgCumC,GAAoB/pC,EAE1D+E,GArEqB,KAsEnB9E,EAAUsG,OACT,4CAA4DtG,EAAUsG,gBAGzExB,GAzEoB,KA0ElBvB,EAAU+C,OACT,2CAA0D/C,EAAU+C,gBAGvE,MAAMyjC,EAAkBH,GAA2B7sB,KAC7CitB,EAAkBD,EAAkB/pC,EAAUsG,OAC9C2jC,EAAoBD,EAAkBzmC,EAAU+C,OAGhDoiB,EAAkBjkB,EAAAA,OAAAA,MAAawlC,EAAoBtmC,EAAQ2C,QAE3D0X,EACgB,MAApB8rB,EACI,MACAA,EAqBC,OAnBPF,GAA2BxxB,OACzB,CACE8xB,cAXkB,EAYlBC,QAAS,EACTH,gBAAAA,EACAI,0BAA2BpsB,EAC3B+rB,gBAAAA,EACAM,0BAA2BrsB,EAC3BisB,kBAAAA,EACAK,gBAAiB3mC,EAAQ2C,OACzBikC,wBAAyBvsB,GAE3B0K,GAGFA,EAAgBzI,KAAKjgB,EAAW+pC,GAChCrhB,EAAgBzI,KAAK1c,EAAWymC,GAChCthB,EAAgBzI,KAAKtc,EAASsmC,GAEvB,IAAI/pB,GAAuB,CAChCtL,KAAM,GACN+E,UAAWkwB,GAAelwB,UAC1Bha,KAAM+oB,IAQ4B,uCACpC3oB,GAEM,iBAACyqC,EAAD,QAAa7mC,EAAb,iBAAsBmmC,GAAoB/pC,EAEhD+E,GA/HsB,KAgIpB0lC,EAAWlkC,OACV,6CAA8DkkC,EAAWlkC,gBAGxE,IACF,MAAMmjC,EAAUD,GAAQiB,cAAcD,GAChCxqC,EAAYypC,EAAQzpC,UAAUoZ,UAC9B7V,EAAYmX,IAAAA,KAAAA,SAAmB/W,EAAS8lC,EAAQ5tB,WAE/C,OAAA7S,KAAK0hC,+BAA+B,CACzC1qC,UAAAA,EACA2D,QAAAA,EACAJ,UAAAA,EACAumC,iBAAAA,IAEF,MAAOtpC,GACP,MAAM,IAAIO,MAAqCP,+BAAAA,OAjGxCqpC,GASJlwB,UAAuB,IAAI7Z,GAChC,+C,MC3CS6qC,GAAkB,IAAI7qC,GACjC,+CAMK,MAAM8qC,GAWX7rC,YAAY8rC,EAAmBC,GAAuB,KATtDD,YASsD,OAPtDC,gBAOsD,EAC/CD,KAAAA,OAASA,EACTC,KAAAA,WAAaA,GAYf,MAAMC,GAWXhsC,YAAYisC,EAAuBjY,EAAekY,GAAsB,KATxED,mBASwE,OAPxEjY,WAOwE,OALxEkY,eAKwE,EACjED,KAAAA,cAAgBA,EAChBjY,KAAAA,MAAQA,EACRkY,KAAAA,UAAYA,GAdRF,GAoBJxwB,QAAkB,IAAIwwB,GAAO,EAAG,EAAGjrC,GAAUya,SAqI/C,MAAM2wB,GAIXnsC,eAK4B,6BAC1BggB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAEhC,MACM4M,EADwBpK,EAAAA,GAAiB,eACPI,OAAOwC,EAAYpf,MAE3D,IAAI8lB,EACJ,IAAK,MAAOe,EAAQb,KAAWvgB,OAAOqhB,QAAQ0kB,IAC5C,GAAIxlB,EAAO3H,OAASuI,EAAW,CAC7Bd,EAAOe,EACP,MAIA,IAACf,EACH,MAAM,IAAI1kB,MAAM,sDAGlB,OAAO0kB,EAMc,wBACrB1G,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,iBAACgT,EAAD,OAAawjB,GAAUvlB,GAC3BslB,GAA0BE,WAC1BtsB,EAAYpf,MAGP,OACL2rC,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjCwH,WAAY,IAAIgjB,GACd,IAAI9qC,GAAU8nB,EAAWijB,QACzB,IAAI/qC,GAAU8nB,EAAWkjB,aAE3BM,OAAQ,IAAIL,GACVK,EAAOJ,cACPI,EAAOrY,MACP,IAAIjzB,GAAUsrC,EAAOH,aAQN,sBACnBlsB,GAMO,OAJP/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GACtCiR,GAAWslB,GAA0BI,SAAUxsB,EAAYpf,MAEpD,CACL2rC,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjCoa,WAAYzb,EAAYnK,KAAK,GAAGwL,OAChC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,QAOpB,uBACpBrB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAChC,oBAAC42B,EAAD,uBAAgBC,GAA0B5lB,GAC9CslB,GAA0BO,UAC1B3sB,EAAYpf,MAGRgsC,EAA0B,CAC9BL,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,OACtC8H,oBAAqB,IAAIpoB,GAAU0rC,GACnCC,uBAAwB,CACtBztB,MAAOytB,IAMX,OAHI1sB,EAAYnK,KAAKtO,OAAS,IAC5BqlC,EAAEC,gBAAkB7sB,EAAYnK,KAAK,GAAGwL,QAEnCurB,EAMqB,+BAC5B5sB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,oBACJ42B,EADI,uBAEJC,EAFI,cAGJI,EAHI,eAIJC,GACEjmB,GACFslB,GAA0BY,kBAC1BhtB,EAAYpf,MAGRgsC,EAAkC,CACtCL,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjC4rB,cAAejtB,EAAYnK,KAAK,GAAGwL,OACnCyrB,cAAeA,EACfC,eAAgB,IAAIhsC,GAAUgsC,GAC9B5jB,oBAAqB,IAAIpoB,GAAU0rC,GACnCC,uBAAwB,CACtBztB,MAAOytB,IAMX,OAHI1sB,EAAYnK,KAAKtO,OAAS,IAC5BqlC,EAAEC,gBAAkB7sB,EAAYnK,KAAK,GAAGwL,QAEnCurB,EAMS,mBAAC5sB,GACjB/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAChC,eAACgS,GAAYf,GACjBslB,GAA0Bc,MAC1BltB,EAAYpf,MAGP,OACL2rC,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjC8rB,iBAAkBntB,EAAYnK,KAAK,GAAGwL,OACtC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,OACtCwG,SAAAA,GAOc,mBAAC7H,GAKV,OAJP/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GACtCiR,GAAWslB,GAA0BgB,MAAOptB,EAAYpf,MAEjD,CACL2rC,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjCgsB,kBAAmBrtB,EAAYnK,KAAK,GAAGwL,OACvC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,QAOrB,sBACnBrB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAChC,eAACgS,GAAYf,GACjBslB,GAA0BkB,SAC1BttB,EAAYpf,MAGRgsC,EAAyB,CAC7BL,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjC8G,SAAUnI,EAAYnK,KAAK,GAAGwL,OAC9B8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,OACtCwG,SAAAA,GAKF,OAHI7H,EAAYnK,KAAKtO,OAAS,IAC5BqlC,EAAEC,gBAAkB7sB,EAAYnK,KAAK,GAAGwL,QAEnCurB,EAMc,wBACrB5sB,GAMO,OAJP/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GACtCiR,GAAWslB,GAA0BmB,WAAYvtB,EAAYpf,MAEtD,CACL2rC,YAAavsB,EAAYnK,KAAK,GAAGwL,OACjC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,QAOrB,sBAACzG,GAChB,IAACA,EAAUzZ,OAAOqsC,GAAa5yB,WACjC,MAAM,IAAI5Y,MAAM,sDAOC,sBAAC6T,EAAkBwT,GACtC,GAAIxT,EAAKtO,OAAS8hB,EACV,UAAIrnB,MACsB6T,8BAAAA,EAAKtO,kCAAkC8hB,M,MA2DhE+iB,GAA4B/lC,OAAOijB,OAI7C,CACDgjB,WAAY,CACVrtB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA6D,CACnEA,EAAAA,GAAiB,exBnaG,WAAqC,IAApCD,EAAoC,uDAAjB,aAC5C,OAAOC,EAAAA,GAKL,CAACnc,GAAU,UAAWA,GAAU,eAAgBkc,GwB8Z9CwD,GxBxZgB,WAAiC,IAAhCxD,EAAgC,uDAAb,SACjCC,OAAAA,EAAAA,GAOL,CACEA,EAAAA,GAAkB,iBAClBA,EAAAA,GAAkB,SAClBnc,GAAU,cAEZkc,GwB4YEwD,MAGJgsB,UAAW,CACT1tB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA4D,CAClEA,EAAAA,GAAiB,eACjBuD,GAAiB,iBACjBvD,EAAAA,GAAiB,6BAGrBovB,SAAU,CACRvtB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA2D,CACjEA,EAAAA,GAAiB,kBAGrB8vB,MAAO,CACLjuB,MAAO,EACP2H,OAAQxJ,EAAAA,GAAwD,CAC9DA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,eAGtBkwB,SAAU,CACRruB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA2D,CACjEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,eAGtBmwB,WAAY,CACVtuB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA6D,CACnEA,EAAAA,GAAiB,kBAGrBgwB,MAAO,CACLnuB,MAAO,EACP2H,OAAQxJ,EAAAA,GAAwD,CAC9DA,EAAAA,GAAiB,kBAGrB4vB,kBAAmB,CACjB/tB,MAAO,EACP2H,OAAQxJ,EAAAA,GACN,CACEA,EAAAA,GAAiB,eACjBuD,GAAiB,iBACjBvD,EAAAA,GAAiB,0BACjBuD,GAAkB,iBAClBA,GAAiB,uBAiBZ8sB,GAA2BpnC,OAAOijB,OAAO,CACpDokB,OAAQ,CACNzuB,MAAO,GAET0uB,WAAY,CACV1uB,MAAO,KAOJ,MAAMuuB,GAIXxtC,eAqBiB,kBAACgB,GACV,kBAACurC,EAAD,WAAc1jB,EAAYwjB,OAAQuB,GAAe5sC,EACjDqrC,EAAiBuB,GAAe5B,GAAOxwB,QAEvC5a,EAAO6lB,GADA2lB,GAA0BE,WACT,CAC5BzjB,WAAY,CACVijB,OAAQtmC,EAASqjB,EAAWijB,OAAOtmC,YACnCumC,WAAYvmC,EAASqjB,EAAWkjB,WAAWvmC,aAE7C6mC,OAAQ,CACNJ,cAAeI,EAAOJ,cACtBjY,MAAOqY,EAAOrY,MACdkY,UAAW1mC,EAAS6mC,EAAOH,UAAU1mC,eAGnCmkB,EAAkB,CACtB9T,KAAM,CACJ,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQkE,GAAoBjE,UAAU,EAAOC,YAAY,IAE5D3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,GAEF,OAAO,IAAIugB,GAAuBwI,GAOR,6BAC1B3oB,GAEA,MAAM2D,EAAc,IAAI6c,GACxB7c,EAAYod,IACVqH,GAAcG,sBAAsB,CAClCvB,WAAYhnB,EAAOgnB,WACnBC,iBAAkBjnB,EAAOurC,YACzBlkB,WAAYrnB,EAAOqnB,WACnB1N,KAAM3Z,EAAO2Z,KACbkN,SAAU7mB,EAAO6mB,SACjBC,MAAO7d,KAAK6d,MACZlN,UAAW3Q,KAAK2Q,aAId,kBAAC2xB,EAAD,WAAc1jB,EAAd,OAA0BwjB,GAAUrrC,EAC1C,OAAO2D,EAAYod,IAAI9X,KAAK4jC,WAAW,CAACtB,YAAAA,EAAa1jB,WAAAA,EAAYwjB,OAAAA,KAM/C,qBAACrrC,GACnB,MAAM2D,EAAc,IAAI6c,GACxB7c,EAAYod,IACVqH,GAAcI,cAAc,CAC1BxB,WAAYhnB,EAAOgnB,WACnBC,iBAAkBjnB,EAAOurC,YACzB1kB,SAAU7mB,EAAO6mB,SACjBC,MAAO7d,KAAK6d,MACZlN,UAAW3Q,KAAK2Q,aAId,kBAAC2xB,EAAD,WAAc1jB,EAAd,OAA0BwjB,GAAUrrC,EAC1C,OAAO2D,EAAYod,IAAI9X,KAAK4jC,WAAW,CAACtB,YAAAA,EAAa1jB,WAAAA,EAAYwjB,OAAAA,KAQpD,gBAACrrC,GACR,kBAACurC,EAAD,iBAAcplB,EAAd,WAAgCsU,GAAcz6B,EAG9CJ,EAAO6lB,GADA2lB,GAA0BI,UAGvC,OAAO,IAAIhrB,IAAcO,IAAI,CAC3BlM,KAAM,CACJ,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQoa,EAAYna,UAAU,EAAOC,YAAY,GAClD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CACEF,OAAQsE,GACRrE,UAAU,EACVC,YAAY,GAEd,CAACF,OAAQuqB,GAAiBtqB,UAAU,EAAOC,YAAY,GACvD,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAEzD3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAQY,iBAACI,GACT,kBACJurC,EADI,iBAEJplB,EAFI,oBAGJgC,EAHI,uBAIJujB,EAJI,gBAKJG,GACE7rC,EAGEJ,EAAO6lB,GADA2lB,GAA0BO,UACT,CAC5BF,cAAejnC,EAAS2jB,EAAoB3jB,YAC5CknC,uBAAwBA,EAAuBztB,QAG3CpJ,EAAO,CACX,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAKzD,OAHIsrB,GACFh3B,EAAKzN,KAAK,CAACiZ,OAAQwrB,EAAiBvrB,UAAU,EAAOC,YAAY,KAE5D,IAAIC,IAAcO,IAAI,CAC3BlM,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAQoB,yBAACI,GACjB,kBACJurC,EADI,cAEJU,EAFI,cAGJH,EAHI,eAIJC,EAJI,oBAKJ5jB,EALI,uBAMJujB,EANI,gBAOJG,GACE7rC,EAGEJ,EAAO6lB,GADA2lB,GAA0BY,kBACT,CAC5BP,cAAejnC,EAAS2jB,EAAoB3jB,YAC5CknC,uBAAwBA,EAAuBztB,MAC/C6tB,cAAeA,EACfC,eAAgBvnC,EAASunC,EAAevnC,cAGpCqQ,EAAO,CACX,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQ4rB,EAAe3rB,UAAU,EAAMC,YAAY,GACpD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,IAK7D,OAHIsrB,GACFh3B,EAAKzN,KAAK,CAACiZ,OAAQwrB,EAAiBvrB,UAAU,EAAOC,YAAY,KAE5D,IAAIC,IAAcO,IAAI,CAC3BlM,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOmB,wBAACI,GAChB,kBAACurC,EAAD,iBAAcplB,EAAd,iBAAgCgmB,EAAhC,SAAkDtlB,GAAY7mB,EAE9DJ,EAAO6lB,GADA2lB,GAA0Bc,MACT,CAACrlB,SAAAA,IACxB,WAAI1G,GAAuB,CAChCtL,KAAM,CACJ,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQ8rB,EAAkB7rB,UAAU,EAAOC,YAAY,GACxD,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAEzD3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOQ,aAACI,GACX,MAAM2D,EAAc,IAAI6c,GAUjB7c,OATPA,EAAYod,IACVqH,GAAcI,cAAc,CAC1BxB,WAAYhnB,EAAOmmB,iBACnBc,iBAAkBjnB,EAAOmsC,iBACzBtlB,SAAU,EACVC,MAAO7d,KAAK6d,MACZlN,UAAW3Q,KAAK2Q,aAGbjW,EAAYod,IAAI9X,KAAK6jC,iBAAiB9sC,IAO3B,qBAACA,GACb,kBACJurC,EADI,iBAEJplB,EAFI,iBAGJgmB,EAHI,WAIJ9kB,EAJI,KAKJ1N,EALI,SAMJkN,GACE7mB,EACE2D,EAAc,IAAI6c,GAUxB,OATA7c,EAAYod,IACVqH,GAAcoB,SAAS,CACrBjC,cAAe4kB,EACf9kB,WAAAA,EACA1N,KAAAA,EACAmN,MAAO7d,KAAK6d,MACZlN,UAAW3Q,KAAK2Q,aAGbjW,EAAYod,IACjB9X,KAAK6jC,iBAAiB,CACpBvB,YAAAA,EACAplB,iBAAAA,EACAgmB,iBAAAA,EACAtlB,SAAAA,KAQM,aAAC7mB,GACL,kBAACurC,EAAD,kBAAcc,EAAd,iBAAiClmB,GAAoBnmB,EAErDJ,EAAO6lB,GADA2lB,GAA0BgB,OAGvC,OAAO,IAAI5rB,IAAcO,IAAI,CAC3BlM,KAAM,CACJ,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQgsB,EAAmB/rB,UAAU,EAAOC,YAAY,GACzD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CACEF,OAAQsE,GACRrE,UAAU,EACVC,YAAY,GAEd,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAEzD3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOW,gBAACI,GACR,kBAACurC,EAAD,iBAAcplB,EAAd,SAAgCgB,EAAhC,SAA0CN,EAA1C,gBAAoDglB,GACxD7rC,EAEIJ,EAAO6lB,GADA2lB,GAA0BkB,SACT,CAACzlB,SAAAA,IAEzBhS,EAAO,CACX,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQ8G,EAAU7G,UAAU,EAAOC,YAAY,GAChD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CACEF,OAAQsE,GACRrE,UAAU,EACVC,YAAY,GAEd,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAKzD,OAHIsrB,GACFh3B,EAAKzN,KAAK,CAACiZ,OAAQwrB,EAAiBvrB,UAAU,EAAOC,YAAY,KAE5D,IAAIC,IAAcO,IAAI,CAC3BlM,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOa,kBAACI,GACV,kBAACurC,EAAD,iBAAcplB,GAAoBnmB,EAElCJ,EAAO6lB,GADA2lB,GAA0BmB,YAGvC,OAAO,IAAI/rB,IAAcO,IAAI,CAC3BlM,KAAM,CACJ,CAACwL,OAAQkrB,EAAajrB,UAAU,EAAOC,YAAY,GACnD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAEzD3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,KA7UO4sC,GASJ5yB,UAAuB,IAAI7Z,GAChC,+CAVSysC,GAoBJ1lB,MAAgB,ICplBzB,MAAM,gBAACimB,GAAD,UAAkBC,IAAaC,IAsC/BC,GAA+B9wB,EAAAA,GAcnC,CACAA,EAAAA,GAAgB,iBAChBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAgB,6BAChBA,EAAAA,GAAiB,oBACjBA,EAAAA,GAAgB,8BAChBA,EAAAA,GAAiB,qBACjBA,EAAAA,GAAiB,mBACjBA,EAAAA,GAAgB,2BAChBA,EAAAA,GAAkB,GAAI,cACtBA,EAAAA,GAAkB,GAAI,aACtBA,EAAAA,GAAgB,gBAGX,MAAM+wB,GAIXnuC,eAa4B,6BAC1BiB,GAEA8E,GAlFqB,KAmFnB9E,EAAUsG,OACT,4CAA4DtG,EAAUsG,gBAGrE,IACK7B,OAAAA,EAAAA,OAAAA,KACL0oC,IAAAA,WAAAA,OAAuB5oC,EAASvE,IAAY+J,UAC5C/C,OA3FuB,IA4FzB,MAAOxG,GACP,MAAM,IAAIO,MAA8CP,wCAAAA,MAQvB,sCACnCT,GAEM,gBAACC,EAAD,QAAY2D,EAAZ,UAAqBJ,EAArB,WAAgC6pC,EAAhC,iBAA4CtD,GAChD/pC,EACKmtC,OAAAA,GAAiBG,gCAAgC,CACtDC,WAAYJ,GAAiBK,sBAAsBvtC,GACnD2D,QAAAA,EACAJ,UAAAA,EACA6pC,WAAAA,EACAtD,iBAAAA,IAQkC,uCACpC/pC,GAEM,MACJutC,WAAYE,EADR,QAEJ7pC,EAFI,UAGJJ,EAHI,WAIJ6pC,EAJI,iBAKJtD,EAAmB,GACjB/pC,EAEJ,IAAIutC,EAGAA,EAFsB,kBAAfE,EACLA,EAAWC,WAAW,MACXhpC,EAAAA,OAAAA,KAAY+oC,EAAWE,OAAO,GAAI,OAElCjpC,EAAAA,OAAAA,KAAY+oC,EAAY,OAG1BA,EAGf1oC,GA7I2B,KA8IzBwoC,EAAWhnC,OACV,yCAA+DgnC,EAAWhnC,gBAGvEqnC,MAEA3D,EAFY,GAEkBsD,EAAWhnC,OACzC2jC,EAAoBD,EAAkBzmC,EAAU+C,OAAS,EAGzDoiB,EAAkBjkB,EAAAA,OAAAA,MACtBwoC,GAA6BlwB,KAAOpZ,EAAQ2C,QAsBvC,OAnBP2mC,GAA6B70B,OAC3B,CACE8xB,cARkB,EASlBF,gBAAAA,EACAI,0BAA2BN,EAC3B8D,iBAfc,GAgBdC,2BAA4B/D,EAC5BG,kBAAAA,EACAK,gBAAiB3mC,EAAQ2C,OACzBikC,wBAAyBT,EACzBvmC,UAAWgB,EAAShB,GACpB+pC,WAAY/oC,EAAS+oC,GACrBF,WAAAA,GAEF1kB,GAGFA,EAAgBzI,KAAK1b,EAASZ,GAAUspC,GAA6BlwB,MAE9D,IAAImD,GAAuB,CAChCtL,KAAM,GACN+E,UAAWuzB,GAAiBvzB,UAC5Bha,KAAM+oB,IAQ4B,uCACpC3oB,GAEM,MAACyqC,WAAYsD,EAAb,QAAmBnqC,EAAnB,iBAA4BmmC,GAAoB/pC,EAEtD+E,GAhMsB,KAiMpBgpC,EAAKxnC,OACJ,6CAA8DwnC,EAAKxnC,gBAGlE,IACF,MAAMkkC,EAAajmC,EAASupC,GACtB9tC,EAAY8sC,GAAgBtC,GAAY,GAAOxjC,MAAM,GACrD+mC,EAActpC,EAAAA,OAAAA,KAClB0oC,IAAAA,WAAAA,OAAuB5oC,EAASZ,IAAUoG,WAEtC,UAACxG,EAAWyqC,MAAOZ,GAAcL,GAAUgB,EAAavD,GAEvD,OAAAxhC,KAAK0hC,+BAA+B,CACzC1qC,UAAAA,EACA2D,QAAAA,EACAJ,UAAAA,EACA6pC,WAAAA,EACAtD,iBAAAA,IAEF,MAAOtpC,GACP,MAAM,IAAIO,MAAqCP,+BAAAA,OArJxC0sC,GASJvzB,UAAuB,IAAI7Z,GAChC,+C,MC1ESmuC,GAAqB,IAAInuC,GACpC,+CAyBIouC,IAAa9Z,EAAAA,EAAAA,IAAK,CACtBlyB,MAAM0xB,EAAAA,EAAAA,MACNua,SAAS7Z,EAAAA,EAAAA,KAASV,EAAAA,EAAAA,OAClBwa,SAAS9Z,EAAAA,EAAAA,KAASV,EAAAA,EAAAA,OAClBya,iBAAiB/Z,EAAAA,EAAAA,KAASV,EAAAA,EAAAA,SAMrB,MAAM0a,GAgBXvvC,YAAYsS,EAAgBiB,GAAY,KAZxCjB,SAYwC,OARxCiB,UAQwC,EACjCjB,KAAAA,IAAMA,EACNiB,KAAAA,KAAOA,EAUO,sBACnB5N,GAIA,IAAIkb,EAAY,IAAIlb,GAEpB,GAAuB,IADAoa,GAAsBc,GACnB,OAAO,KAE3B2uB,MAAAA,EAA+B,GAChC,QAAInoC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMpG,EAAY,IAAIF,GAAU8f,EAAU5Y,MAAM,EAR5B,KASpB4Y,EAAYA,EAAU5Y,MATF,IAUpB,MAAMqZ,EAAwC,IAA7BT,EAAU5Y,MAAM,EAAG,GAAG,GACvC4Y,EAAYA,EAAU5Y,MAAM,GAC5BunC,EAAWpnC,KAAK,CAACnH,UAAAA,EAAWqgB,SAAAA,IAG1BkuB,GAAAA,EAAW,GAAGvuC,UAAUE,OAAO+tC,KAC7BM,EAAW,GAAGluB,SAAU,CAC1B,MAAMmuB,EAAe9uB,KAAoBnD,OAAO9X,EAAAA,OAAAA,KAAYmb,IACtDtN,EAAOwC,KAAKyZ,MAAMigB,GAEjB,OADPC,EAAAA,EAAAA,IAAWn8B,EAAM47B,IACV,IAAII,GAAcC,EAAW,GAAGvuC,UAAWsS,GAItD,OAAO,M,MChGEo8B,GAAkB,IAAI5uC,GACjC,+CAoEI6uC,GAAoBxyB,EAAAA,GAAqC,CAC7DuD,GAAiB,cACjBA,GAAiB,wBACjBvD,EAAAA,GAAgB,cAChBA,EAAAA,KACAA,EAAAA,GACEA,EAAAA,GAAoB,CAClBA,EAAAA,GAAkB,QAClBA,EAAAA,GAAiB,uBAEnBA,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,SAEFA,EAAAA,GAAgB,iBAChBA,EAAAA,GAAkB,YAClBA,EAAAA,KACAA,EAAAA,GACEA,EAAAA,GAAoB,CAClBA,EAAAA,GAAkB,SAClBuD,GAAiB,qBAEnBvD,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,oBAEFA,EAAAA,GACE,CACEA,EAAAA,GACEA,EAAAA,GAAoB,CAClBuD,GAAiB,oBACjBvD,EAAAA,GAAkB,+BAClBA,EAAAA,GAAkB,iBAEpB,GACA,OAEFA,EAAAA,GAAkB,OAClBA,EAAAA,GAAgB,YAElB,eAEFA,EAAAA,KACAA,EAAAA,GACEA,EAAAA,GAAoB,CAClBA,EAAAA,GAAkB,SAClBA,EAAAA,GAAkB,WAClBA,EAAAA,GAAkB,iBAEpBA,EAAAA,GAAoBA,EAAAA,MAAqB,GACzC,gBAEFA,EAAAA,GACE,CAACA,EAAAA,GAAkB,QAASA,EAAAA,GAAkB,cAC9C,mBAmBG,MAAMyyB,GAcX7vC,YAAY4U,GAAuB,KAbnC8mB,gBAamC,OAZnCoU,0BAYmC,OAXnChU,gBAWmC,OAVnCE,cAUmC,OATnC+T,WASmC,OARnCC,sBAQmC,OAPnCC,iBAOmC,OANnCpU,kBAMmC,OALnCqU,mBAKmC,EACjCjmC,KAAKyxB,WAAa9mB,EAAK8mB,WACvBzxB,KAAK6lC,qBAAuBl7B,EAAKk7B,qBACjC7lC,KAAK6xB,WAAalnB,EAAKknB,WACvB7xB,KAAK+xB,SAAWpnB,EAAKonB,SACrB/xB,KAAK8lC,MAAQn7B,EAAKm7B,MAClB9lC,KAAK+lC,iBAAmBp7B,EAAKo7B,iBAC7B/lC,KAAKgmC,YAAcr7B,EAAKq7B,YACxBhmC,KAAK4xB,aAAejnB,EAAKinB,aACzB5xB,KAAKimC,cAAgBt7B,EAAKs7B,cASN,uBACpBvqC,GAEMwqC,MACAC,EAAKR,GAAkBpyB,OAAOhY,EAASG,GADvB,GAGtB,IAAIq2B,EAA0BoU,EAAGpU,SAK1B,OAJFoU,EAAGC,gBACNrU,EAAW,MAGN,IAAI6T,GAAY,CACrBnU,WAAY,IAAI36B,GAAUqvC,EAAG1U,YAC7BoU,qBAAsB,IAAI/uC,GAAUqvC,EAAGN,sBACvChU,WAAYsU,EAAGtU,WACfiU,MAAOK,EAAGL,MACV/T,SAAAA,EACAgU,iBAAkBI,EAAGJ,iBAAiB9qC,IAAIorC,IAC1CL,YAAaM,GAAeH,EAAGH,aAC/BpU,aAAcuU,EAAGvU,aACjBqU,cAAeE,EAAGF,iBAKxB,SAASI,GAAT,GAGwC,IAHV,gBAC5BE,EAD4B,MAE5Bxc,GACsC,EAC/B,OACLA,MAAAA,EACAwc,gBAAiB,IAAIzvC,GAAUyvC,IAInC,SAASC,GAAT,GAI8B,IAJJ,iBACxBtpB,EADwB,4BAExBupB,EAFwB,YAGxBC,GAC4B,EACrB,OACLxpB,iBAAkB,IAAIpmB,GAAUomB,GAChCupB,4BAAAA,EACAC,YAAAA,GAIJ,SAASJ,GAAT,GAAwE,IAAhD,IAACvnC,EAAD,IAAM1D,EAAN,QAAWsrC,GAAqC,EACtE,OAAIA,EACK,GAGF,IACF5nC,EAAIf,MAAM3C,EAAM,GAAGJ,IAAIurC,OACvBznC,EAAIf,MAAM,EAAG3C,GAAKJ,IAAIurC,KCvNtB,MAAMI,GAMX7wC,YACE07B,EACA8U,EACAV,EACAhU,GACA,KAVFJ,gBAUE,OATF8U,qBASE,OARFV,0BAQE,OAPFhU,gBAOE,EACKJ,KAAAA,WAAaA,EACb8U,KAAAA,gBAAkBA,EAClBV,KAAAA,qBAAuBA,EACvBhU,KAAAA,WAAaA,GA+Cf,MAAMgV,GAIX9wC,eAK4B,6BAC1BggB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAEhC,MACM4M,EADwBpK,EAAAA,GAAiB,eACPI,OAAOwC,EAAYpf,MAE3D,IAAI8lB,EACJ,IAAK,MAAOe,EAAQb,KAAWvgB,OAAOqhB,QAAQqpB,IAC5C,GAAInqB,EAAO3H,OAASuI,EAAW,CAC7Bd,EAAOe,EACP,MAIA,IAACf,EACH,MAAM,IAAI1kB,MAAM,qDAGlB,OAAO0kB,EAMqB,+BAC5B1G,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,eAACm7B,GAAYlqB,GACjBiqB,GAAyBE,kBACzBjxB,EAAYpf,MAGP,OACL66B,WAAYzb,EAAYnK,KAAK,GAAGwL,OAChCqa,WAAY1b,EAAYnK,KAAK,GAAGwL,OAChC2vB,SAAU,IAAIH,GACZ,IAAI9vC,GAAUiwC,EAAStV,YACvB,IAAI36B,GAAUiwC,EAASR,iBACvB,IAAIzvC,GAAUiwC,EAASlB,sBACvBkB,EAASlV,aAQO,uBACpB9b,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,oBAAC42B,EAAD,sBAAgByE,GAAyBpqB,GAC7CiqB,GAAyBpE,UACzB3sB,EAAYpf,MAGP,OACL66B,WAAYzb,EAAYnK,KAAK,GAAGwL,OAChC8F,iBAAkBnH,EAAYnK,KAAK,GAAGwL,OACtC8H,oBAAqB,IAAIpoB,GAAU0rC,GACnCyE,sBAAuB,CACrBjyB,MAAOiyB,IAQQ,sBACnBlxB,GAEA/V,KAAKsd,eAAevH,EAAYpF,WAChC3Q,KAAK2d,eAAe5H,EAAYnK,KAAM,GAEhC,eAACgS,GAAYf,GACjBiqB,GAAyBzD,SACzBttB,EAAYpf,MAGP,OACL66B,WAAYzb,EAAYnK,KAAK,GAAGwL,OAChC8vB,2BAA4BnxB,EAAYnK,KAAK,GAAGwL,OAChDwG,SAAAA,EACAM,SAAUnI,EAAYnK,KAAK,GAAGwL,QAOb,sBAACzG,GAChB,IAACA,EAAUzZ,OAAOiwC,GAAYx2B,WAChC,MAAM,IAAI5Y,MAAM,qDAOC,sBAAC6T,EAAkBwT,GACtC,GAAIxT,EAAKtO,OAAS8hB,EACV,UAAIrnB,MACsB6T,8BAAAA,EAAKtO,kCAAkC8hB,MAkC7E,MAAM0nB,GAA2B1qC,OAAOijB,OAIrC,CACD2nB,kBAAmB,CACjBhyB,MAAO,EACP2H,OAAQxJ,EAAAA,GAAmE,CACzEA,EAAAA,GAAiB,e5B5HC,WAAmC,IAAlCD,EAAkC,uDAAf,WAC1C,OAAOC,EAAAA,GAQL,CACEnc,GAAU,cACVA,GAAU,mBACVA,GAAU,wBACVmc,EAAAA,GAAgB,eAElBD,G4B8GEwD,MAGJgsB,UAAW,CACT1tB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA2D,CACjEA,EAAAA,GAAiB,eACjBuD,GAAiB,iBACjBvD,EAAAA,GAAiB,4BAGrBkwB,SAAU,CACRruB,MAAO,EACP2H,OAAQxJ,EAAAA,GAA0D,CAChEA,EAAAA,GAAiB,eACjBA,EAAAA,GAAkB,iBAgBXi0B,GAA0BhrC,OAAOijB,OAAO,CACnDgoB,MAAO,CACLryB,MAAO,GAET0uB,WAAY,CACV1uB,MAAO,KAOJ,MAAMmyB,GAIXpxC,eAqBwB,yBACtBgB,GAEM,iBAACy6B,EAAD,WAAaC,EAAb,SAAyBsV,GAAYhwC,EAErCJ,EAAO6lB,GADAsqB,GAAyBE,kBACR,CAC5BD,SAAU,CACRtV,WAAYl2B,EAASwrC,EAAStV,WAAWl2B,YACzCgrC,gBAAiBhrC,EAASwrC,EAASR,gBAAgBhrC,YACnDsqC,qBAAsBtqC,EACpBwrC,EAASlB,qBAAqBtqC,YAEhCs2B,WAAYkV,EAASlV,cAGnBnS,EAAkB,CACtB9T,KAAM,CACJ,CAACwL,OAAQoa,EAAYna,UAAU,EAAOC,YAAY,GAClD,CAACF,OAAQkE,GAAoBjE,UAAU,EAAOC,YAAY,GAC1D,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CAACF,OAAQqa,EAAYpa,UAAU,EAAMC,YAAY,IAEnD3G,UAAW3Q,KAAK2Q,UAChBha,KAAAA,GAEF,OAAO,IAAIugB,GAAuBwI,GAMhB,qBAAC3oB,GACnB,MAAM2D,EAAc,IAAI6c,GAWxB,OAVA7c,EAAYod,IACVqH,GAAcI,cAAc,CAC1BxB,WAAYhnB,EAAOgnB,WACnBC,iBAAkBjnB,EAAOy6B,WACzB5T,SAAU7mB,EAAO6mB,SACjBC,MAAO7d,KAAK6d,MACZlN,UAAW3Q,KAAK2Q,aAIbjW,EAAYod,IACjB9X,KAAKsnC,kBAAkB,CACrB9V,WAAYz6B,EAAOy6B,WACnBC,WAAY16B,EAAOgwC,SAAStV,WAC5BsV,SAAUhwC,EAAOgwC,YAQP,iBAAChwC,GACT,iBACJy6B,EADI,iBAEJtU,EAFI,oBAGJgC,EAHI,sBAIJ+nB,GACElwC,EAGEJ,EAAO6lB,GADAsqB,GAAyBpE,UACR,CAC5BF,cAAejnC,EAAS2jB,EAAoB3jB,YAC5C0rC,sBAAuBA,EAAsBjyB,QAGzCpJ,EAAO,CACX,CAACwL,OAAQoa,EAAYna,UAAU,EAAOC,YAAY,GAClD,CAACF,OAAQ8D,GAAqB7D,UAAU,EAAOC,YAAY,GAC3D,CAACF,OAAQ8F,EAAkB7F,UAAU,EAAMC,YAAY,IAGzD,OAAO,IAAIC,IAAcO,IAAI,CAC3BlM,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,IAOW,gBAACI,GACR,iBAACy6B,EAAD,2BAAa0V,EAAb,SAAyCtpB,EAAzC,SAAmDM,GAAYnnB,EAE/DJ,EAAO6lB,GADAsqB,GAAyBzD,SACR,CAACzlB,SAAAA,IAEzBhS,EAAO,CACX,CAACwL,OAAQoa,EAAYna,UAAU,EAAOC,YAAY,GAClD,CAACF,OAAQ8G,EAAU7G,UAAU,EAAOC,YAAY,GAChD,CAACF,OAAQ8vB,EAA4B7vB,UAAU,EAAMC,YAAY,IAGnE,OAAO,IAAIC,IAAcO,IAAI,CAC3BlM,KAAAA,EACA+E,UAAW3Q,KAAK2Q,UAChBha,KAAAA,KCzYCglB,eAAe4rB,GACpB5tB,EACA4kB,EACAjwB,GAEMuN,MAAAA,EAAcvN,GAAW,CAC7BwN,cAAexN,EAAQwN,cACvBC,oBAAqBzN,EAAQyN,qBAAuBzN,EAAQ0N,YAGxDzhB,QAAkBof,EAAW2kB,mBACjCC,EACA1iB,GAGIM,SACExC,EAAWyC,mBACf7hB,EACA+T,GAAWA,EAAQ0N,aAErBrf,MAEEwf,GAAAA,EAAO/K,IACT,MAAM,IAAIrZ,MACP,mBAAkBwC,aAAqBuR,KAAKC,UAAUoQ,OAI3D,OAAO5hB,EDiPI4sC,GASJx2B,UAAuB,IAAI7Z,GAChC,+CAVSqwC,GAoBJtpB,MAAgB,KEjTzB,MAAMyX,GAAW,CACfkS,KAAM,CACJC,OAAQ,+BACRC,QAAS,gCACO,sDAElBC,MAAO,CACLF,OAAQ,gCACRC,QAAS,iCACO,wDASb,SAASE,GAAcC,EAAmBC,GACzCz/B,MAAAA,GAAc,IAARy/B,EAAgB,OAAS,QAEjC,IAACD,EACH,OAAOvS,GAASjtB,GAATitB,OAGHrpB,MAAAA,EAAMqpB,GAASjtB,GAAKw/B,GACtB,IAAC57B,EACG,UAAIlU,MAAO,WAAUsQ,cAAgBw/B,KAE7C,OAAO57B,ECGF,MAAM87B,GAAmB,K,UChChC,gLAAAp/B,QAAAA,IAAAxS,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,SAAAA,SAAAA,GAAA,0BAAAgG,EAAAA,EAAAA,QAAAA,EAAAA,EAAAA,EAAAA,GAAA,2EAAA6rC,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,ICAA,YACA,aAkDA,MACAC,EAAAA,6CACAC,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAEAC,EAAAA,KAAAA,KACAC,EAAAA,KAAAA,MAEAC,EAAAA,qBACAC,EAAAA,EAAAA,yDAEAC,EAAAA,KACAC,EAAAA,GACAC,EAAAA,iBAEAC,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,KAAAA,KAAAA,KAAAA,MACAC,EAAAA,IAKAC,EAAAA,IAwoFA,cACA,UACA,wBAKA,cAMA,IALA,QACAxrC,EAAAA,EACA+J,EAAAA,EAAAA,OACAhL,EAAAA,EAAAA,GAAAA,GAEA,MAGA,IAFAf,EAAAA,EAAAA,KAAAA,GACAoG,EAAAA,EAAAA,EAAAA,OACA,aACArF,GAAAA,EAIA,wCAEA,yBAKA,gBACA,MAAI,EACJ0sC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EACA1rC,EAAAA,EAAAA,EACA+J,EAAAA,EAAAA,EACAxI,EAAAA,EAAAA,EACAzC,EAAAA,EAAAA,EAGA,sBAMA,GAJAjE,EAAAA,IAAAA,EAAAA,GACA4G,EAAAA,IAAAA,EAAAA,GAGA5G,GAAAA,EAAAA,OAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAGA,iBAMA,GAJAA,EAAAA,EAAAA,EACA4G,EAAAA,GAAAA,GAGAgqC,IAAAA,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAGA,wBAKA,IAHA1hC,GAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,QAAAA,EAAAA,EAGA/J,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,OAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAGA,yBAOA,oBACA,sBACA,YACAirC,GAAAA,GAAAA,aAAAA,iBAAAA,EACAhf,EAAAA,GAAAA,EAAAA,EAAAA,kBAAAA,oBACA,6BAAArf,OAAAA,IAMA,cACA,mBACA,gCAIA,gBACA,iDACA7T,EAAAA,EAAAA,IAAAA,MAAAA,EAIA,kBACA,QAGA,QAGA,sBACAyd,EAAAA,EAAAA,OAOA,QAHAlV,EAAAA,EAAAA,QAGA,CACA,uBACAkV,GAAAA,OACAzd,EAAAA,IACAyd,EAAAA,EAAAA,MAAAA,EAAAA,GAAAA,IAAAA,EAAAA,MAAAA,IAIA,UAOAm1B,EA9vFA,cACA,MAAI,IA0kBJC,EAMAC,EAkJAC,EAshBAC,EACAC,EACAC,EACAC,EACAC,EA3vCAC,EAAAA,EAAAA,UAAAA,CAAAzzC,YAAAA,EAAA2C,SAAAA,KAAA+wC,QAAAA,MACAC,EAAAA,IAAAA,EAAAA,GAUAC,EAAAA,GAaAC,EAAAA,EAMAC,GAAAA,EAIAC,EAAAA,GAMAC,GAAAA,IAKAC,EAAAA,IAGAC,GAAAA,EAkBAC,EAAAA,EAIAC,EAAAA,EAGAC,EAAAA,CACAC,OAAAA,GACAC,UAAAA,EACAC,mBAAAA,EACAC,eAAAA,IACAC,iBAAAA,IACAC,kBAAAA,EACAC,uBAAAA,OACAC,OAAAA,IAMAC,EAAAA,uCAgBA,gBACA,MAAI,cACJvpC,EAAAA,KAGA,uCAEA,YAEA,0BAYA,OAXAA,EAAAA,EAAAA,EAAAA,QAEAyN,EAAAA,GAAAA,EAAAA,EAAAA,EACAzN,EAAAA,EAAAA,EAAAA,EAAAA,KACAyN,EAAAA,EAAAA,EACAzN,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,IAEAA,EAAAA,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAAAA,EAAAA,UAMA,mCAMA,GAHAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAGAyN,MAAAA,EAAAA,CACA,6BASA,YAPAi7B,EAAAA,EACA1oC,EAAAA,EAAAA,EAAAA,EAAAA,MAEAA,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,CAAAA,KAMAsS,EAAAA,OAAAA,OACA,CAEA,wCAEAtS,EAAAA,EAAAA,IAAAA,EAAAA,WAAAA,IAAAA,EAAAA,EAAAA,MAAAA,IAAAA,GAAAA,GAIA,GAAAnL,EAAAA,EAAAA,QAAAA,QAAAyd,EAAAA,EAAAA,QAAAA,IAAAA,KAGA,sBAGAzd,EAAAA,IAAAA,EAAAA,GACAA,IAAAA,EAAAA,MAAAA,EAAAA,GACAyd,EAAAA,EAAAA,UAAAA,EAAAA,IACAzd,EAAAA,IAGAA,EAAAA,EAAAA,YAGA,CAOA,GAJA20C,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,QAIA,MAEA,SADAxpC,EAAAA,IAAAA,EAAAA,GACAypC,EAAAA,EAAAA,EAAAA,EAAAA,GAKA,GAFAn3B,EAAAA,OAAAA,GAEAo3B,EAAAA,iBAAAA,EAAAA,CAGA,4BAKA,GAHA1pC,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,IAAAA,GAAAA,EAGAynC,EAAAA,OAAAA,GAAAA,EAAAA,QAAAA,YAAAA,IAAAA,OACA,YACAT,EAAAA,QAGAhnC,EAAAA,EAAAA,KAAAA,EAAAA,WAAAA,IAAAA,EAAAA,EAAAA,MAAAA,IAAAA,GAAAA,EAQA,IALA2pC,EAAAA,EAAAA,MAAAA,EAAAA,GACA90C,EAAAA,EAAAA,EAIAuI,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IACA,+BACA,WAGA,QACAvI,EAAAA,EACA,eAEA,QAGAyd,GAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,gBACAA,GAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,gBAAA,CACAs3B,GAAAA,EACA9tC,GAAAA,EACAjH,EAAAA,EACA,SAIA,0BAKA60C,GAAAA,GAIA,GAAA70C,GAHAyd,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IAGAzd,QAAAA,MAAAyd,EAAAA,EAAAA,QAAAA,IAAAA,IACAzd,EAAAA,EAAAA,OAIA,kCAGA,wCAEA,qBAIA,GAHAuI,GAAAA,EAGAssC,GAAAA,EAAAA,OACA,OAAAvC,EAAAA,GAAAA,IAAAA,EAAAA,IACA,YACAH,EAAAA,EAAAA,EAAAA,GAIA,eAGAhnC,EAAAA,EAAAA,EAAAA,EAAAA,UAGA,OAGAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,OACA,CAWA,GAVAA,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,GAMAlE,GAAAA,EAAAA,GAAAA,EACAjH,EAAAA,IAAAA,GAAAA,GAEAiH,EAAAA,EAAAA,CAGA,IAFAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,IAEAsB,GAAAA,EAAAA,EAAAA,GACA4C,EAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,GAAAA,IAGAlE,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,IAAAA,YAEAA,GAAAA,EAGA,iBACAkE,EAAAA,EAAAA,MAAAA,SAKAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,GAicA,oBAOA,IANA,MAEA6pC,EADA3vC,EAAAA,CAAAA,GAEA4B,EAAAA,EACAsB,EAAAA,EAAAA,OAEA,MACA,4BAIA,IAFAlD,EAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA,MAEA2L,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAEA3L,EAAAA,GAAAA,EAAAA,IACA,yBACAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EACAA,EAAAA,IAAAA,GAKA,mBA4HA,kBACA,MAAI,MACJmE,EAAAA,EACAvC,EAAAA,EAAAA,OACAguC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAAAA,EAEA,qBAKA1rC,IADA2rC,EAAAA,GAHAC,EAAAA,EAAAA,GAAAA,IAEA3sC,EAAAA,EAAAA,GADA4sC,EAAAA,EAAAA,GAAAA,EAAAA,GACAD,GACA5C,EAAAA,EAAAA,GACAhpC,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EACA2B,EAAAA,GAAAA,EAAAA,EAKA,OAFA3B,IAAAA,EAAAA,CAAAA,GAAAA,OAAAA,IAEA2B,EAGA,oBACA,QAEA,QACAmqC,EAAAA,EAAAA,EAAAA,GAAAA,OAGA,kBAEA,eACAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EACA,MAKA,SAGA,oBAIA,IAHA,QAGA,KACAxzC,EAAAA,IAAAA,EACAmF,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EACAnF,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAIA,uCAsNA,oBACA,cAKA,GAHA,YACA6yC,EAAAA,EAAAA,EAAAA,IAEAzhB,EAAAA,EAAAA,OAAAA,EAAAA,WAKA,GAHAqiB,EAAAA,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,EAEA,QACA/3B,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,GAAAA,GAAAA,GAAAA,IAAAA,GAAAA,GAAAA,GAAAA,GACAg4B,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,EAAAA,UAeA,GAVA11C,GAHAkzB,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAGAlzB,EAGAuI,GADAkV,EAAAA,EAAAA,EAAAA,IACAlV,OAOA,0BAGA,qBACAkV,EAAAA,EAAAA,EAAAA,QAQA,GAJAxW,GAAAA,EACAwW,EAAAA,EAAAA,EAAAA,EAAAA,KAGAlV,EAAAA,EAAAA,GACA,sCAGA,MADAtB,GAAAA,EAAAA,GAGA,IADAjH,EAAAA,GAAAA,IAAAA,GAAAA,KACA,YAMA,wBAKA,gBAKA,IAJA,MACAiH,EAAAA,EACAwB,EAAAA,IAAAA,EAAAA,EAAAA,IAEA,gBAIA,KAHAyqB,EAAAA,IAAAA,EAAAA,EAAAA,KAGA,GACAzqB,EAAAA,EACA,MACAhI,EAAAA,KAAAA,EAAAA,KACAgI,EAAAA,GAIA,SAQA,kBAKA,IAJA,QACAuI,EAAAA,EAAAA,QAGA7I,IAAAA,GAAAA,EAAAA,OAGA,4BAkBA,OAfAnI,EAAAA,EAAAA,EAAAA,EAAAA,GAAA6zC,EAGA3gB,EAAAA,EAAAA,EAAAA,EAAAA,KAGAlzB,EAAAA,EAGAkzB,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,IAEAA,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,GAGA,EA0DA,oBACA,MAAI,YACJwf,EAAAA,EAAAA,EACAiD,EAAAA,EAGA,MAQAC,EAAAA,CAGA,gCAIA,IAHA3uC,EAAAA,EAAAA,GAGA,EACAA,GAAAA,EACA+J,EAAAA,EAIA6kC,GAHA3iB,EAAAA,EAAAA,EAAAA,IAGA2iB,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,OAIA,IAFAC,EAAAA,GAAAA,EAAAA,GAAAA,KAEA,UAEA,MASA,QANA,4BACA5iB,EAAAA,EAAAA,EAGAliB,GADA/J,GAAAA,GACA+J,GAFArI,EAAAA,OAMA,CAIA,IAHAuqB,EAAAA,EAAAA,EAAAA,GAGAvqB,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,KAUAktC,GAHA7kC,GAJA/J,GAAAA,GAIA+J,EAAAA,GAGA6kC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAmBA,GAfA7vC,EAAAA,GAAAA,EAAAA,GAKA,eAAAgL,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAEAhL,EAAAA,EAAAA,GACA6vC,GAAAA,KAAA,sBACA,4BAGA,iCACAE,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAEAC,EAAAA,IAAAA,EAAAA,GAiBA,OAhBAtD,EAAAA,OAAAA,EAEA1sC,GAGAgwC,GAAAA,EAAAA,EAAAA,EAGAtD,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACAvnC,EAAAA,GAAAA,GAAAA,GAIAunC,EAAAA,GAAAA,EAAAA,EAAAA,EAGAvnC,EAkBA,GAdA,MACAunC,EAAAA,OAAAA,EACAlqC,EAAAA,EACAstC,MAEApD,EAAAA,OAAAA,EAAAA,EACAlqC,EAAAA,EAAAA,EAAAA,GAIAkqC,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAIA1sC,EAEA,QAGA,SAGA,gCAEA,IADAgL,EAAAA,EAAAA,IAAAA,EACAxI,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,KAGAvB,GAAAA,IACAkE,EAAAA,IACAunC,EAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAGA,MAGA,GADAA,EAAAA,IAAAA,EACAA,EAAAA,IAAAA,EAAAA,MACAA,EAAAA,KAAAA,EACAlqC,EAAAA,EAMA,oCAIA2C,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAAAA,EAAAA,KAGAA,EAAAA,EAAAA,IACAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,IAIA,SAIA,eACA,MACAnL,EAAAA,EAAAA,EAEA,8BAEAyd,EAAAA,EAAAA,EAAAA,GAEAA,EAAAA,GAAAA,GAAAA,GAAAA,EACAg4B,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,EAAAA,KAEAxiB,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAiqCA,OAv0EA0f,EAAAA,MAAAA,EAEAA,EAAAA,SAAAA,EACAA,EAAAA,WAAAA,EACAA,EAAAA,WAAAA,EACAA,EAAAA,YAAAA,EACAA,EAAAA,cAAAA,EACAA,EAAAA,gBAAAA,EACAA,EAAAA,gBAAAA,EACAA,EAAAA,gBAAAA,EACAA,EAAAA,iBAAAA,EACAA,EAAAA,OAAAA,EAqCAA,EAAAA,OAAAA,EAAAA,IAAAA,SAAAA,GACA,QAEA,YAEA,sBA2HA,YACAV,EAAAA,oBAAAA,GAtFA,GAlCA3lB,EAAAA,eAAAA,EAAAA,oBAEAooB,EADA/7B,EAAAA,EAAAA,GACA+7B,EAAAA,EAAAA,GACAnB,EAAAA,GAKAjnB,EAAAA,eAAAA,EAAAA,mBAEAooB,EADA/7B,EAAAA,EAAAA,GACA+7B,EAAAA,EAAAA,GACAlB,EAAAA,GAOAlnB,EAAAA,eAAAA,EAAAA,qBACA3T,EAAAA,EAAAA,KACAA,EAAAA,KACA+7B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GACAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GACAjB,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,KAEAgB,EAAAA,GAAAA,EAAAA,EAAAA,GACAjB,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,KAOAnnB,EAAAA,eAAAA,EAAAA,SAEA,IADA3T,EAAAA,EAAAA,KACA,MACA+7B,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,GACAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GACAf,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,OACA,CAEA,GADAc,EAAAA,GAAAA,EAAAA,EAAAA,IACA/7B,EAGA,YACAs5B,EAAAA,EAAAA,oBAAAA,GAHA0B,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAWA,iCAEA,IADAh7B,EAAAA,EAAAA,QACAA,EAcA,YACAs5B,EAAAA,EAAAA,uBAAAA,GAdA,MACA,yCACA+D,OAAAA,kBAAAC,OAAAA,YAIA,MADApC,GAAAA,EACAlyC,MACAswC,EAAAA,sBAJA4B,EAAAA,OAOAA,EAAAA,EA0BA,GAhBAvnB,EAAAA,eAAAA,EAAAA,iBAEAooB,EADA/7B,EAAAA,EAAAA,GACA+7B,EAAAA,EAAAA,GACAZ,EAAAA,GAKAxnB,EAAAA,eAAAA,EAAAA,mBAEAooB,EADA/7B,EAAAA,EAAAA,GACA+7B,EAAAA,EAAAA,GACAX,EAAAA,GAKAznB,EAAAA,eAAAA,EAAAA,UAAAA,CAEA,oBADA3T,EAAAA,EAAAA,IAEA,YACAs5B,EAAAA,EAAAA,mBAAAA,GAFA+B,EAAAA,EAOA,mCAKA,oBAJAr7B,EAAAA,EAAAA,KAIA,8BAGA,YACAs5B,EAAAA,EAAAA,aAAAA,GAHAwC,EAAAA,GAeA,OACAlB,eAAAA,EACAC,cAAAA,EACA0C,eAAAA,CAAAA,EAAAA,GACAC,MAAAA,CAAAA,EAAAA,GACAtC,OAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,OAAAA,EACAS,SAAAA,IAcA9B,EAAAA,YAAAA,SAAAA,GACA,oCACA,qBAEA,MAAI,EACJzqC,EAAAA,EAAAA,EACAnI,EAAAA,EAAAA,EACAiF,EAAAA,EAAAA,EAEA2wC,EAAAA,GAAAA,kBAAAA,GAAAA,SAAAA,KAAAA,IAEA,2CAGA,aACA,gCACA,QASA,IALA3uC,GAAAA,EAAAA,GAAAA,GACA,IAAAA,GAAAA,GAIA,wBAEA,uBAEA,IADAisB,EAAAA,EAAAA,IACA,0BAIA,yBAKA,iDACA,SAGA,YACAgf,EAAAA,sBAAAA,IASAU,EAAAA,QAAAA,EAAAA,IAAAA,WACA,0BASAA,EAAAA,QAAAA,EAAAA,IAAAA,WACA,0BAcAA,EAAAA,QACAC,EAAAA,iBAMAC,EAAAA,KAAAA,SAAAA,EAAAA,QACA,sCACA,wDACA,0BAEA,YACA,MAAI,QACJ7rC,EAAAA,EACAkB,EAAAA,GACAkuC,EAAAA,IAAAA,EAAAA,GAOA,GALA,YACA1B,EAAAA,EAAAA,EAAAA,GAEAnsC,EAAAA,EAAAA,EAAAA,GAEAsrC,EAGA,2BAIA,IAFAhyC,EAAAA,OAAAA,gBAAAA,IAAAA,YAAAA,GAAAA,IAEA,KAcA,OANA8W,EAAAA,OAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAOAlQ,EAAAA,OAAAA,gBAAAA,IAAAA,YAAAA,IACA5G,EAAAA,GAAAA,EAAAA,GACAA,EAAAA,EAAAA,GAAAA,EAAAA,KAKAqG,EAAAA,KAAAA,EAAAA,MACAlB,GAAAA,GAGAA,EAAAA,EAAAA,MAGA,wBA2BA,MADA6sC,GAAAA,EACAlyC,MACAswC,EAAAA,sBAvBA,IAFApwC,EAAAA,OAAAA,YAAAA,GAAAA,GAEA,KAUA,OAJA8W,EAAAA,iBAAAA,GAAAA,EAAAA,IAAAA,cAAAA,EAAAA,EAAAA,GACA,mCACA9W,EAAAA,EAAAA,IAAAA,KAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAGAm0C,OAAAA,YAAAA,GAAAA,KAAAA,EAAAA,IAIA9tC,EAAAA,KAAAA,EAAAA,MACAlB,GAAAA,GAGAA,EAAAA,EAAAA,EASA,MAEA,WACA2R,EAAAA,KACA,OAAAzQ,EAAAA,KAAAA,EAAAA,MAcA,IAVAK,EAAAA,IAAAA,GACA8tC,GAAAA,EAGA9tC,GAAAA,IACAoQ,EAAAA,EAAAA,EAAAA,GACAzQ,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAIA,sBAGA,OACAA,EAAAA,CAAAA,EAAAA,OACA,CAGA,sCAGA,gCAGAlB,EAAAA,IAAAA,GAAAA,EAAAA,GAKA,OAFAovC,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,EACAA,IAUAzD,EAAAA,IAAAA,WAIA,IAHA,QACAp+B,EAAAA,UACA+hC,EAAAA,IAAAA,EAAAA,EAAAA,IACA,6BACA,UASAxD,EAAAA,aADAyD,EAoCA,oBACA,MAAI,cACJvvC,EAAAA,EAAAA,QAAAA,KACAqvC,EAAAA,EACAP,EAAAA,EA+BA,IA5BA,OACAvtC,EAAAA,EAGAwrC,EAAAA,EACAv2B,EAAAA,EAAAA,QAAAA,IAAAA,IAEAtS,GADAC,EAAAA,IAAAA,EAAAA,IACAD,IAAAA,EAAAA,OAAAA,GACA6oC,EAAAA,EAKA5oC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KACA,GAAAqrC,EAAA1D,GACA3nC,EAAAA,EAAAA,EAAAA,EAAAA,QAUApL,EAAAA,GALA0yC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAoC,EAAAA,EAAAA,IACAA,EAAAA,EAAAA,KAGAtsC,OAGA,mBAGA,4BAqCA,GAlCAvB,EAAAA,IACAjH,GAEAmL,EAAAA,EAAAA,EACAA,EAAAA,EAAAA,EAGAA,EAAAA,EAAAA,EAEAunC,GADAvnC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACAunC,EACA1sC,EAAAA,EAAAA,EACAhG,EAAAA,EAAAA,GASAiH,EAAAA,EAHA0B,EAAAA,EAAAA,EAAAA,GAOAH,EAAAA,EAAAA,EACAxC,EAAAA,GAAAA,EAAAA,GAAAA,MAAAA,EAAAA,EAAAA,GAEAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,KAAAA,GAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACAwC,EAAAA,GAAAA,GAAAA,IAAAA,GAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IACAutC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAKAptC,EAAAA,IAAAA,EAAAA,GAGA8U,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,OAAAA,OACA,CAMA,GAHAi1B,EAAAA,OAAAA,EAGA1sC,EAGA,oBACA0sC,EAAAA,GAAAA,EAEA/pC,MACA3I,EACA0yC,EAAAA,CAAAA,GAAAA,OAAAA,IAMA,yBAGA,uCAGAj1B,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAIA,UAMAi5B,EA0DA,oBACA,MAAI,4BACJC,EAAAC,EACA3xC,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EACAytC,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAGA,uBAEA,aAGAxnC,EAAAA,GAAAA,EAAAA,IAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAGAunC,GAAAA,GAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAHAvnC,KAoBA,IAZA0rC,GADAC,EAAAA,IAAAA,EAAAA,IACAD,EAAAA,GAEA5xC,EAAAA,GADAjF,EAAAA,EAAAA,EAAAA,EAAAA,GACAs2C,EAEAluB,IACAA,EAAAA,EACApoB,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GACAiF,EAAAA,EAAAA,EAAAA,GAKAgC,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,KAIA,GAFA0rC,EAAAA,IAAAA,EAAAA,IAAAA,IAAAA,IAEA1tC,EAAAA,EACA4xC,EAAAA,KAAAA,GACAE,GAAAA,MACA,CAwBA,IAvBAC,EAAAA,EAAAA,OACAL,EAAAA,EAAAA,OAEA1xC,GAAAA,EAQA,GAJAiuB,EAAAA,EAAAA,GAAAA,EALAjsB,EAAAA,GAKA0rC,OAKAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAD,EAAAA,EAAAA,EAAAA,EAAAA,GACAiE,EAAAA,EAAAA,OACAK,EAAAA,EAAAA,QAGAC,EAAAA,EAEAC,GADAC,EAAAA,EAAAA,MAAAA,EAAAA,IACAD,OAGA,cACAN,EAAAA,EAAAA,QACAA,EAAAA,CAAAA,GAAAA,OAAAA,GACAQ,EAAAA,EAAAA,GACAzE,EAAAA,IAAAA,EAAAA,GAAAA,IAIA,GAOA,GANAzf,EAAAA,GAGAoiB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAGA,GAqBA,GAjBA+B,EAAAA,EAAAA,GACAV,GAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAgBA,GAbAzjB,EAAAA,EAAAA,EAAAA,IA2BA,IAXA9K,GAAAA,IAAAA,EAAAA,EAAAA,GAIAkvB,GADAC,EAAAA,EAAAA,EAAAA,EAAAA,IACAD,OACAJ,EAAAA,EAAAA,OAMA,eACAhkB,IAGAskB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAF,EAAAA,EAAAA,OACAhC,EAAAA,OAQA,OAGAA,EAAAA,EAAAA,GAKAgC,GADAC,EAAAA,EAAAA,SACAD,OAUA,GAPAA,EAAAA,IAAAA,EAAAA,CAAAA,GAAAA,OAAAA,IAGAE,EAAAA,EAAAA,EAAAA,EAAAA,GACAN,EAAAA,EAAAA,QAGA,GAAA5B,EAMA,mBACApiB,IAGAskB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAN,EAAAA,EAAAA,YAGA,QACAhkB,IACAikB,EAAAA,CAAAA,IAIAN,EAAAA,KAAAA,EAGAM,EAAAA,GACAA,EAAAA,KAAAA,EAAAA,IAAAA,GAEAA,EAAAA,CAAAA,EAAAA,IACAD,EAAAA,UAEAD,IAAAA,GAAAA,MAAAA,EAAAA,KAAAhyC,KAEA8xC,EAAAA,MAAAA,EAAAA,GAGAF,EAAAA,IAAAA,EAAAA,OAAAA,EAAAA,GAGA,SAGA,gCAEAjC,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,QAIAkC,EAAAA,EAAAA,EACAA,EAAAA,GAAAA,EAGA,UAkIA9D,EAAAA,8BACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,qBACAC,EAAAA,6BALAqE,EAOA,kBACA,MACAxyC,EAAAA,EAAAA,EAAAA,EAAAA,QAAAA,EAAAA,IAGA,aACAkG,EAAAA,EAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GAAAA,EAAAA,MACA,CACA,QAGAlG,EAAAA,EAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAEA,OADAmjB,EAAAA,MAAAA,EAAAA,EAAAA,eAAAA,GAAAA,KAAAA,EAAAA,EAAAA,EACA1f,GAAAA,GAAAA,EAAAA,EAAAA,KAGAA,IACA0f,EAAAA,EAGAnjB,EAAAA,EAAAA,QAAAA,EAAAA,MAAAA,QAAAA,EAAAA,SAGAwY,GAAAA,GAAA,kBAKA,WACA,YACAy0B,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,IAAAA,YAAAA,GAIA/mC,EAAAA,EAAAA,KAGAA,EAAAA,EAAAA,EAAAA,EAAAA,MA6LAkoC,EAAAA,cAAAA,EAAAA,IAAAA,WACA,kBAEA,OADAloC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GACAA,GAWAkoC,EAAAA,WAAAA,SAAAA,EAAAA,GACA,2BAiBAA,EAAAA,cAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GACA,UAGA,WAKA,OAJAsB,EAAAA,EAAAA,EAAAA,GACA,YACAA,EAAAA,EAAAA,EAAAA,GAEAC,EAAAA,IAAAA,EAPA/qC,MAOA,EAPAA,KAOA7J,EAAAA,EAAAA,GAGA,OAVA6J,KAUA1B,GAAAA,OAAAA,KAIA,GAHA+qB,IAAAA,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,KAAAA,EAAAA,IAAAA,EAGAta,EAAAA,EAAAA,GAAAA,KAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,KAGA,OAFAsa,EAAAA,IAAAA,EAAAA,GAEAA,GAwBAmgB,EAAAA,UAAAA,EAAAA,IAAAA,SAAAA,EAAAA,GACA,+BAQAA,EAAAA,mBAAAA,EAAAA,KAAAA,SAAAA,EAAAA,GACA,+BAmBAA,EAAAA,gBAAAA,EAAAA,IAAAA,SAAAA,EAAAA,GACA,MAAI,cACJloC,EAAAA,KAKA,IAHA+nB,EAAAA,IAAAA,EAAAA,IAGA,kBACA,YACAgf,EAAAA,4BAAAA,GAAAA,IASA,GANA,sBAGAwF,EAAAA,GAAAA,EAAAA,GAGAvsC,EAAAA,IAAAhD,EAAAA,EAAAA,IAAA,iCAAAhB,EAAAA,IAAAgB,EAAAA,EAAAA,GAKA,OADAiD,EAAAA,IAAAA,EAAAA,KAAAA,KAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,KACA3C,EAAAA,EAAAA,IAAAA,GAAAA,EAKA,GAFAkvC,EAAAA,EAAAA,EAAAA,EAEAlvC,EAAAA,CAGA,uCAEAmvC,GAAAA,GAAAA,EAAAA,aAAAA,EAAAA,eAEAzsC,EAAAA,EAAAA,IAAAA,QAIA,mCAEA,0BAEAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,EAAAA,IAAAA,YASA,OANA3C,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAGA,EAAA2C,EAAAA,IAAA3C,EAAAA,EAAAA,GAGA,eAEAwrC,IAKAxrC,EAAAA,EAAAA,EAAAA,EAAAA,IAeA,IATAqvC,EAHAH,GACAI,EAAAA,IAAAA,EAAAA,IACAH,IAAAA,EAAAA,EAAAA,GACAI,EAAAA,KAEA9wC,EAAAA,KAAAA,KAAAA,GAAAA,KACA,EAGAmE,EAAAA,IAAAA,EAAAA,KAGA,CAEA,MAEA,KADAA,EAAAA,EAAAA,MAAAA,IACA,QAEA5C,EACA4C,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,OAAAA,GACAwsC,IACAxsC,EAAAA,EAAAA,IAAAA,IAIA,MAEA,QADAnE,EAAAA,EAAAA,EAAAA,IACA,MACA4wC,EAAAA,EAAAA,OAKA,GAFAjD,EADA1hB,EAAAA,EAAAA,MAAAA,GACA0hB,EAAAA,EAAAA,EAAAA,GAEA,OACAiD,EAAAA,EAAAA,OACA,CAEA,OADA5wC,GAAAA,GAAAA,IACA,MACA4wC,EAAAA,EAAAA,EAIA1sC,EAAAA,EAAAA,MAAAA,GAEA3C,EACA2C,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,OAAAA,GACAysC,IACAzsC,EAAAA,EAAAA,IAAAA,IAIA,YACAwsC,IAAAA,EAAAA,EAAAA,IAAAA,IAEAlvC,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,GAAAmsC,IAYAvB,EAAAA,aAAAA,SAAAA,GACA,kBAGA,OAFA,YACAsB,EAAAA,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAQAvB,EAAAA,UAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GACA,+BAOAA,EAAAA,SAAAA,WACA,gBAQAA,EAAAA,cAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GACA,6BAQAA,EAAAA,uBAAAA,EAAAA,IAAAA,SAAAA,EAAAA,GACA,0CAQAA,EAAAA,UAAAA,WACA,6CAQAA,EAAAA,WAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GACA,6BAQAA,EAAAA,oBAAAA,EAAAA,IAAAA,SAAAA,EAAAA,GACA,0CAOAA,EAAAA,MAAAA,WACA,eAOAA,EAAAA,WAAAA,WACA,iBAOAA,EAAAA,WAAAA,WACA,iBAOAA,EAAAA,OAAAA,WACA,8BAwBAA,EAAAA,MAAAA,SAAAA,EAAAA,GACA,MAAI,MACJloC,EAAAA,KACArJ,EAAAA,EAAAA,EAMA,GAHA4G,GADA0C,EAAAA,IAAAA,EAAAA,EAAAA,IACA1C,GAGA5G,IAAAA,EAAAA,OAAAA,IAAAA,EAAAA,KAGA,QAEA,OADAsJ,EAAAA,GAAAA,EACAD,EAAAA,KAAAA,GAGA,YACA6sC,EAAAA,EAAAA,EAAAA,EACAtF,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAEA,WAGA,6CAGA,gBAGA,oCAGA,WASA,GALAsF,EAAAA,EAAAA,GACAD,EAAAA,EAAAA,GACAtF,EAAAA,EAAAA,QAGA5wC,EAAAA,EAAAA,EAAAA,CAaA,KATAkJ,GAFAktC,EAAAA,EAAAA,IACAp2C,GAAAA,EACA4wC,IAEAsF,EAAAA,EACArF,IAGAwF,UAGA,mBACAntC,EAAAA,eAMA,IAFAgG,GAAAA,GAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAEAlP,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAEA,eACAo2C,EAAAA,EAAAA,GAAAA,EAAAA,GACA,MAYA,GANAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAMA,GAJAxvC,GAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,SAIA,mBAIA,IAHAA,EAAAA,EAAAA,EAGA,MAEA,gBACA,6BACAgqC,EAAAA,GACAA,EAAAA,IAAAA,EAGAA,EAAAA,IAAAA,EAAAA,GAIA,gCAGA,YAWA0F,EAAAA,EAAAA,EAAAA,IAPAhtC,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EACAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,GACAA,IA8BAioC,EAAAA,OAAAA,EAAAA,IAAAA,SAAAA,EAAAA,GACA,MAAI,EACJloC,EAAAA,KAKA,OAHAC,EAAAA,IAAAA,EAAAA,EAAAA,IAGAD,EAAAA,IAAAhD,EAAAA,GAAAiD,EAAAA,IAAAA,EAAAA,EAAAA,GACA,YAGAA,EAAAA,GAAAD,EAAAA,IAAAA,EAAAA,EAAAA,GACA,UAGA,MAIAlG,EAAAA,EAAAA,EACAmG,EAAAA,EAAAA,EACA0rC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA1rC,EAAAA,EAAAA,EACA0rC,EAAAA,GAAAA,GAEAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAGA1rC,EAAAA,EAAAA,MAAAA,EAAAA,MAAAA,KAGAjD,EAAA,WAAAiD,EAAAA,EAAAA,EAAAA,GAEAA,IAwBAioC,EAAAA,aAAAA,EAAAA,MAAAA,SAAAA,EAAAA,GACA,MAAI,wBACJjrB,EAAAiwB,EACAltC,EAAAA,KACAunC,EAAAA,EAAAA,EACAC,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAGA,uBAmBA,OAhBAxnC,EAAAA,IAAAlG,EAAAA,GAAAytC,IAAAA,EAAAA,KAAAA,GAAAC,IAAAA,EAAAA,KAAAA,EACAvnC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAEAA,EAAAA,GAAAA,EAAAA,EAGAsnC,GAAAA,GAKAtnC,EAAAA,EAAAA,CAAAA,GACAA,EAAAA,EAAAA,GALAA,EAAAA,EAAAA,EAAAA,EAAAA,MASA,EAYA,IATApL,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GACAoL,EAAAA,GAAAA,EAAAA,GACAktC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,UAGAC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAGAvxC,EAAAA,EAAAA,EAAAuxC,EAAAA,GAAAA,IAAAA,EAAAA,KAAAA,IAKA,IAHApwB,EAAAA,EACAiwB,EAAAA,EAEApxC,EAAAA,EAAAA,KAAAA,GAAAA,CAKA,IAJAkB,EAAAA,EACAswC,EAAAA,EAAAA,GAAAA,EACAC,EAAAA,EAAAA,GAAAA,EAAAA,EAEA1nC,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAKA7I,IADAitC,EAAAA,GAHAA,EAAAA,IAAAA,GAAAA,IAEA3sC,EAAAA,EAAAA,GADA4sC,EAAAA,EAAAA,GAAAA,EAAAA,GACAD,GACAiD,EAAAA,EAAAA,EAAAA,GAAAA,GACAlwC,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EACAqwC,EAAAA,KAAAA,EAAAA,EAGAA,EAAAA,GAAAA,EASA,OANArwC,IACAnI,EAEAw4C,EAAAA,OAAAA,EAAAA,GAGAJ,EAAAA,EAAAA,EAAAA,IAQA/E,EAAAA,QAAAA,WACA,kBAEA,OADAloC,EAAAA,GAAAA,EAAAA,GAAAA,KACAA,GAwBAkoC,EAAAA,KAAAA,SAAAA,EAAAA,GACA,MACAloC,EAAAA,KACArJ,EAAAA,EAAAA,EAMA,GAHA4G,GADA0C,EAAAA,IAAAA,EAAAA,EAAAA,IACA1C,GAGA5G,IAAAA,EAAAA,OAAAA,IAAAA,EAAAA,KAGA,QAEA,OADAsJ,EAAAA,GAAAA,EACAD,EAAAA,MAAAA,GAGA,YACA6sC,EAAAA,EAAAA,EAAAA,EACAtF,EAAAA,EAAAA,EACAC,EAAAA,EAAAA,EAEA,WAGA,4BAIA,gDAQA,GALAsF,EAAAA,EAAAA,GACAD,EAAAA,EAAAA,GACAtF,EAAAA,EAAAA,QAGA5wC,EAAAA,EAAAA,EAAAA,CAUA,KAPAkJ,EAFA,KACAgtC,EAAAA,EACArF,IAEA7wC,GAAAA,EACA4wC,IAGAyF,UACA,eACAntC,EAAAA,UAUA,KAPAlJ,EAAAA,EAAAA,SACA4G,EAAAA,EAAAA,QAGA,IAAAsC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAGA,OACAlJ,GAAAA,IAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EACA4wC,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAUA,OAPA5wC,IACA4wC,EAAAA,CAAAA,GAAAA,OAAAA,KACAsF,GAKAI,EAAAA,EAAAA,EAAAA,IAmBA/E,EAAAA,UAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GACA,UAGA,oBAKA,OAJAsB,EAAAA,EAAAA,EAAAA,GACA,YACAA,EAAAA,EAAAA,EAAAA,GAEAC,EAAAA,IAAAA,EAPA/qC,MAOA,KAGA,OAVAA,KAUA1B,GAAAA,OAAAA,KAIA,GAFA+qB,GADAta,EAAAA,EAAAA,OAAAA,GACAsa,EAAAA,EAEAta,EAAAA,EAAAA,GAAAA,CAGA,wBAGA,6BAKA,OAFAo9B,GAvBAnsC,KAuBA7J,EAAA,EAAAkzB,IAAAA,EAvBArpB,KAuBA7J,EAAA,GAEAkzB,GAYAmgB,EAAAA,UAAAA,SAAAA,GAEA,OADAsB,EAAAA,GAAAA,EAAAA,GACA9qC,KAAAA,MAAAA,KAAAA,IAeAwpC,EAAAA,WAAAA,EAAAA,KAAAA,WACA,MAAI,QACJloC,EAAAA,KACAhD,EAAAA,EAAAA,EACAlD,EAAAA,EAAAA,EACAjF,EAAAA,EAAAA,EACAs2C,EAAAA,EAAAA,EACAwB,EAAAA,IAAAA,EAAAA,OAGA,oBACA,8CA8BA,IATA9xC,EAbA,IAJAf,EAAAA,KAAAA,MAAAA,GAAAA,MAIA,UACAiuB,EAAAA,EAAAA,IACA/rB,OAAAnH,GAAA,OAAAkzB,GAAAA,KACAjuB,EAAAA,KAAAA,MAAAA,GACAjF,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GASA,MANAkzB,EADAjuB,GAAAA,EAAAA,EACA,QAEAiuB,EAAAA,EAAAA,iBACArrB,MAAA,EAAAqrB,EAAAA,QAAAA,KAAAA,GAAAlzB,IAKA,aAOA,KAMA,KAJAiF,GADAjF,EAAAA,EAAAA,GACAiF,GACA,IAAAA,EAAAA,KAOA,GAHA+F,EAAAA,EACAhF,EAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAEA2yC,EAAAA,EAAAA,GAAAA,MAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,EAAAA,GAAAA,CAWA,GANA3yC,EAAAA,EAAAA,KAAAA,EAMA,SALAktB,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,MAKA,cAgBA,EAIAA,KAAAA,EAAAA,MAAAA,IAAAA,KAAAA,EAAAA,OAAAA,MAGA0hB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAnsC,GAAAA,EAAAA,MAAAA,GAAAA,GAAAA,IAGA,MAvBA,QACAmsC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAEA5pC,EAAAA,MAAAA,GAAAA,GAAAA,IAAA,CACAhF,EAAAA,EACA,MAIAswC,GAAAA,EACArxC,GAAAA,EACA2zC,EAAAA,EAkBA,yBAaAvF,EAAAA,cAAAA,SAAAA,EAAAA,GAKA,OAJA,UACAsB,EAAAA,EAAAA,EAAAA,GACA2B,KAEAuC,EAAAA,KAAAA,EAAAA,EAAAA,IAgBAxF,EAAAA,QAAAA,SAAAA,EAAAA,GAKA,OAJA,UACAsB,EAAAA,EAAAA,EAAAA,GACA2B,EAAAA,EAAAA,KAAAA,EAAAA,GAEAuC,EAAAA,KAAAA,EAAAA,IA6BAxF,EAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GACA,MAGA,WACA,gCACAwF,EAAAA,EACA9C,EAAAA,MACAO,GAAAA,iBAAAA,GACAuC,EAAAA,EACAvC,EAAAA,EAAAA,MAEAuC,EAAAA,OAEA,sBACA,YACA3G,EAAAA,2BAAAA,GAKA,GAFAz0B,EAjBA5T,KAiBA07B,QAAA+Q,EAAAP,GAjBAlsC,KAmBA1B,EAAAA,CACA,MACA9C,EAAAA,EAAAA,MAAAA,KACAyzC,GAAAA,EAAAA,UACAC,GAAAA,EAAAA,mBACA1E,EAAAA,EAAAA,gBAAAA,GACA2E,EAAAA,EAAAA,GACAC,EAAAA,EAAAA,GACAC,EA3BArvC,KA2BA5E,EAAA,EACAk0C,EAAAA,EAAAA,EAAAA,MAAAA,GAAAA,EACA5wC,EAAAA,EAAAA,OAIA,GAFAwwC,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAEA,UAGA,IAFA9xC,EAAAA,EAAAA,GAAAA,EACA+xC,EAAAA,EAAAA,OAAAA,EAAAA,GACA,4BACA,uBACAE,IAAAA,EAAAA,IAAAA,GAGAz7B,EAAAA,EACAu7B,GAAAA,EAAAA,kBAAAA,MAAAA,GAAAA,EAAAA,mBACAC,EAAAA,QAAAA,IAAAA,OAAAA,OAAAA,EAAAA,OAAAA,KACA,qCACAA,GACAD,EAGA,uCAeA3F,EAAAA,WAAAA,SAAAA,GACA,MAAI,sBACJloC,EAAAA,KACAunC,EAAAA,EAAAA,EAEA,eACAxf,EAAAA,IAAAA,EAAAA,IAGAjb,cAAAib,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IACA,YACAgf,EAAAA,aACAhf,EAAAA,YAAAA,iBAAAA,oBAAAogB,GAAAA,IAIA,sBAoBA,IAlBA3qC,EAAAA,IAAAA,EAAAA,GACAywC,EAAAA,EAAAA,IAAAA,EAAAA,GACAC,EAAAA,EAAAA,IAAAA,EAAAA,GACAp0C,EAAAA,EAAAA,GAIAjF,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EACA2I,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GACA2wC,GAAAA,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAEAC,EAAAA,EACA1F,EAAAA,EAAAA,EACA3gB,EAAAA,IAAAA,EAAAA,GAGAsmB,EAAAA,EAAAA,GAAAA,EAGA1C,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAEA,IADA2C,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KACA,eACAC,EAAAA,EACAL,EAAAA,EACAD,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,IACAI,EAAAA,EACA7wC,EAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,IACAuqB,EAAAA,EAeA,OAZAumB,EAAAA,EAAAA,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,GACAD,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,IACAE,EAAAA,EAAAA,KAAAA,EAAAA,MAAAA,IACAF,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIAxzC,EAAAA,EAAAA,EAAAA,EAHAhG,GAAAA,EAGA02C,GAAAA,MAAAA,GAAAA,MAAAA,WACAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,OAAA,cAEA7C,EAAAA,EAEA7tC,GAOAqtC,EAAAA,SAAAA,WACA,iBAeAA,EAAAA,YAAAA,SAAAA,EAAAA,GAEA,OADA,kBACAwF,EAAAA,KAAAA,EAAAA,EAAAA,IAeAxF,EAAAA,SAAAA,SAAAA,GACA,MACAngB,EAAAA,KACAjuB,EAAAA,EAAAA,EACAjF,EAAAA,EAAAA,EA0BA,OAvBA,SACAiF,GACAwY,EAAAA,WACAxY,EAAAA,IAAAA,EAAAA,IAAAA,IAEAwY,EAAAA,OAIAA,EADA,QACAzd,GAAAA,GAAAA,GAAAA,EACAy1C,EAAAA,EAAAA,EAAAA,GAAAA,GACAC,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,KACA,OAEAA,EAAAA,GADAxiB,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IACAylB,GAAAA,EAAAA,EAAAA,MAEAhE,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,QACA6B,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,IAGAvxC,EAAAA,GAAAA,EAAAA,EAAAA,KAAAA,EAAAA,IAAAA,IAGAwY,GAQA41B,EAAAA,QAAAA,EAAAA,OAAAA,WACA,iBAIAA,EAAAA,cAAAA,EAEAtB,IACAsB,EAAAA,OAAAA,aAAAA,YAGAA,EAAAA,OAAAA,IAAAA,+BAAAA,EAAAA,SAGA,kBAEAT,EAxnFA,IA+vFAx3B,QAAAw3B,EAAAA,UAAAA,OAAAA,IAOApgB,GAAAA,EAAAA,QACAA,EAAAA,QAAAA,GAKAmnB,EADAA,IACA,6CAGA/G,UAAAA,EA51FA,CA81FA/oC,OAAAA,IAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aCx0FA2oB,EAAOhgB,QAAU,CACbonC,YAAa,QACbC,WAAY,CACRC,UAAW,IACX/G,QAAS,KAEbgH,cAAe,CACXC,SAAU,IACVC,QAAS,IACTC,QAAS,IACTC,SAAU,KAEdC,gBAAgB,EAChBC,QAAS,SAAS3kB,GACd,IAAIhtB,EAAIgtB,EAAS,GACjB,OAAkC,MAAvBA,EAAS,IAAM,IAAa,KAAc,GAANhtB,EAAW,KAAc,GAANA,EAAW,KAAc,GAANA,EAAW,KAAO,MAE3GqC,MAAO,CACHuvC,eAAgB,CAAC,IAAK,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvEC,gBAAiB,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAErEC,SAAU,CACNC,OAAQ,IACRC,SAAU,SACVrlC,KAAM,OAEVslC,eAAgB,CACZC,mBAAmB,EACnBC,YAAa,EACbT,gBAAgB,EAChBU,wBAAwB,GAE5BC,QAAS,CACLC,WAAY,CACRH,YAAa,EACbT,gBAAgB,GAEpBa,oBAAqB,CACjBC,OAAQ,WACRN,mBAAmB,EACnBO,SAAU,GAEdC,8BAA+B,CAC3BR,mBAAmB,EACnBO,SAAU,GAEdE,mBAAoB,CAChBH,OAAQ,WACRN,mBAAmB,EACnBO,SAAU,oWAAAl0C,GAAAA,EAAAA,EAAAA,EAAA,YAAAisB,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAA,iICjDtB,IAAMooB,EAAcC,EAAQ,iBACtBC,EAAaD,EAAQ,gBACrBE,EAAUF,EAAQ,aAClB3I,EAAY2I,EAAQ,gBAEpBG,EAAS,CACXvB,SAAUzwB,KAAKwK,IAAI,GAAI,IACvBgmB,QAASxwB,KAAKwK,IAAI,GAAI,GACtB+lB,QAASvwB,KAAKwK,IAAI,GAAI,GACtB8lB,SAAUtwB,KAAKwK,IAAI,GAAI,IAGrBynB,EAAiB,CACnBd,YAAa,EACbe,eAAgB,EAChBC,cAAc,EACdC,SAAS,EACTX,UAAW,EACXY,kBAAkB,EAClBnB,mBAAmB,EACnBR,gBAAgB,EAChB4B,SAAU,OACVC,WAAW,EACXC,iBAAkBxyB,KAAKkrB,MACvBuH,4BAA4B,GAAAjpB,EAGYooB,EAAYc,eAAhD9B,EAAAA,EAAAA,eAAgBC,EAAAA,EAAAA,gBAElBxvC,EAAQ,CACVsxC,QAAS,CAAEC,MAAO,KAAMC,SAAUhC,EAAiBiC,OAAQ,MAC3DC,OAAQ,CAAEH,MAAO,KAAMC,SAAUjC,EAAgBkC,OAAQ,KACzDzJ,QAAS,CAAEuJ,MAAO,IAAMC,SAAUhC,EAAiBiC,OAAQ,MAY/D,SAASE,EAAOloB,GAAuC,IAA7BmoB,EAA6B,uDAAZ,GAAIC,EAAQ,uCAOnD,GAN8B,iBAAnBD,IACPA,EAAiBlB,EAAQoB,YAAYF,KAG7BnB,EAAWsB,eAAeH,GAGlC,MAAO,wBAGX,IAAIzI,EAASyI,EAAezI,QAAU,GAClC6I,EAAUJ,EAAeI,SAAW,GAEpC7B,EAcR,SAAsB1mB,EAAUmoB,EAAgBC,GAC5C,OAAQD,EAAezB,QACnB,IAAK,WAED,OA0MZ,SAAwB1mB,EAAUmoB,EAAgBpjB,GAC9C,IAAMyjB,EAAkBzjB,EAAMyjB,kBAC1BC,EAAeh3C,OAAO+S,OAAO,GAAI2jC,GACjCxkC,EAAUlS,OAAO+S,OAAO,GAAI2iC,EAAgBsB,GAC5C3I,OAAAA,EACA5sB,EAAQ,GACRo0B,IAAY3jC,EAAQ0iC,eAAiB1iC,EAAQ0jC,cAAgB1jC,EAAQ2jC,QACrEpB,EAAWuC,EAAaC,kBAAoBF,EAAgBtC,SAC5DD,EAASwC,EAAaE,gBAAkBH,EAAgBvC,OACtDK,OAAAA,IAAyB3iC,EAAQ2iC,uBACjC3iC,EAAQ2iC,uBAAyB3iC,EAAQiiC,oBAAAA,IAE3C6C,EAAaG,eACbH,EAAaG,cAAAA,GAGbtC,IACApzB,EAAQ,KAGK,UAAbgzB,IACApG,EAAmB5sB,EAAQ+yB,EAAS/yB,GAGxC,IAAIwzB,EAASmC,EAAa,CACtB7oB,SAAAA,EACAmoB,eAAgBM,EAChB1jB,MAAAA,EACA+a,iBAAAA,IAkBJ,MAfiB,WAAboG,IAEIQ,EADA1mB,EAAS8oB,OAAS,GAA0B,SAArBnlC,EAAQ6jC,SACzB,WAAOt0B,GAAP,OAAe+yB,GAAf,OAAwBS,EAAOrzC,MAAM,IAClB,EAAlB2sB,EAAS8oB,QAAcnlC,EAAQ8jC,UAChC,WAAOv0B,GAAP,OAAe+yB,GAAf,OAAwBS,EAAOrzC,MAAM,IAElC4yC,EAAS/yB,EAAQwzB,GAI7BR,GAAyB,YAAbA,IAEbQ,EAASA,GADTxzB,GAASvP,EAAQgkC,4BAA8BL,EAAU,GAAKp0B,GACpC+yB,GAGvBS,EA9CX,CA1MkC1mB,EADtBmoB,EAAiBY,EAAgBZ,EAAgBrB,EAAYkC,gCACblC,GAEpD,IAAK,UAED,OA4KZ,SAA0B9mB,EAAUmoB,EAAgBpjB,EAAOqjB,GACvD,IAAIa,EAAed,EAAec,aAE9BvC,EAASmC,EAAa,CACtB7oB,SAAUooB,EAAyB,IAAlBpoB,EAAS8oB,QAC1BX,eAAAA,EACApjB,MAAAA,IAEAphB,EAAUlS,OAAO+S,OAAO,GAAI2iC,EAAgBgB,GAEhD,OAAIc,EACO,IAAP,OAAWtlC,EAAQiiC,eAAiB,IAAM,IAA1C,OAA+Cc,GAG5C,GAAP,OAAUA,GAAV,OAAmB/iC,EAAQiiC,eAAiB,IAAM,GAAlD,KAdJ,CA5KoC5lB,EADxBmoB,EAAiBY,EAAgBZ,EAAgBrB,EAAYoC,kCACXpC,EAAasB,GAEnE,IAAK,OAED,OAiGZ,SAAoBpoB,EAAUmoB,EAAgBpjB,EAAOqjB,GACjD,IAAIx0B,EAAOu0B,EAAev0B,MAAQ,SAC9BjQ,EAAUlS,OAAO+S,OAAO,GAAI2iC,EAAgBgB,GAFSgB,EAI8BpkB,EAAM6iB,eAArEwB,EAJiCD,EAIjDrD,eAAsDuD,EAJLF,EAIZpD,gBAOzCuD,EALe,CACfzB,QAAS,CAAEC,MAAO,KAAMC,SAAUsB,GAAwBtD,EAAiBiC,OAAQ,MACnFC,OAAQ,CAAEH,MAAO,KAAMC,SAAUqB,GAAuBtD,EAAgBkC,OAAQ,KAChFzJ,QAAS,CAAEuJ,MAAO,IAAMC,SAAUsB,GAAwBtD,EAAiBiC,OAAQ,MAE7Dp0B,GAX+B21B,EAajCC,EAAmBxpB,EAAS8oB,OAAQQ,EAASvB,SAAUuB,EAASxB,OAAlF91C,EAbmDu3C,EAanDv3C,MAAOiuC,EAb4CsJ,EAa5CtJ,OAETyG,EAASmC,EAAa,CACtB7oB,SAAUooB,EAAOp2C,GACjBm2C,eAAAA,EACApjB,MAAAA,EACA0kB,SAAU1kB,EAAM2kB,6BAGpB,MAAO,GAAP,OAAUhD,GAAV,OAAmB/iC,EAAQiiC,eAAiB,IAAM,IAAlD,OAAuD3F,GAtB3D,CAjG8BjgB,EADlBmoB,EAAiBY,EAAgBZ,EAAgBrB,EAAY4C,4BACjB5C,EAAasB,GAC7D,IAAK,OAED,OADAD,EAAiBY,EAAgBZ,EAAgBrB,EAAY6C,4BAqJzE,SAAoB3pB,GAChB,IAAI4pB,EAAQ10B,KAAKsK,MAAMQ,EAAS8oB,OAAS,GAAK,IAC1Ce,EAAU30B,KAAKsK,OAAOQ,EAAS8oB,OAAkB,GAARc,EAAa,IAAO,IAC7DE,EAAU50B,KAAKkrB,MAAMpgB,EAAS8oB,OAAkB,GAARc,EAAa,GAAiB,GAAVC,GAChE,MAAO,GAAP,OAAUD,EAAV,YAAoBC,EAAU,GAAM,IAAM,IAA1C,OAA+CA,EAA/C,YAA2DC,EAAU,GAAM,IAAM,IAAjF,OAAsFA,GAJ1F,CApJ8B9pB,GACtB,IAAK,UAED,OA6HZ,SAAuBA,EAAUmoB,EAAgBpjB,GAC7C,IAAIglB,EAAYhlB,EAAMilB,iBAClBrmC,EAAUlS,OAAO+S,OAAO,GAAI2iC,EAAgBgB,GAE5CzB,EAASmC,EAAa,CACtB7oB,SAAAA,EACAmoB,eAAAA,EACApjB,MAAAA,IAEA8gB,EAAUkE,EAAU/pB,EAAS8oB,QAEjC,MAAO,GAAP,OAAUpC,GAAV,OAAmB/iC,EAAQiiC,eAAiB,IAAM,IAAlD,OAAuDC,GAX3D,CA7HiC7lB,EADrBmoB,EAAiBY,EAAgBZ,EAAgBrB,EAAYmD,+BACdnD,GAEnD,QACI,OAAO+B,EAAa,CAChB7oB,SAAAA,EACAmoB,eAAAA,EACAC,OAAAA,KAxBhB,CAd8BpoB,EAAUmoB,EAAgBC,GAGpD,OAFA1B,EAA8BhH,EAARgH,GACS6B,EAsFnC,SAASiB,EAAmBx3C,EAAO+1C,EAAUD,GACzC,IAAI7H,EAAS8H,EAAS,GAClBmC,EAAMh1B,KAAKg1B,IAAIl4C,GAEnB,GAAW81C,GAAPoC,EAAc,CACd,IAAK,IAAIC,EAAQ,EAAGA,EAAQpC,EAASp1C,SAAUw3C,EAAO,CAClD,IAAIC,EAAMl1B,KAAKwK,IAAIooB,EAAOqC,GACtB/rB,EAAMlJ,KAAKwK,IAAIooB,EAAOqC,EAAQ,GAElC,GAAWC,GAAPF,GAAcA,EAAM9rB,EAAK,CACzB6hB,EAAS8H,EAASoC,GAClBn4C,GAAgBo4C,EAChB,OAKJnK,IAAW8H,EAAS,KACpB/1C,GAAgBkjB,KAAKwK,IAAIooB,EAAOC,EAASp1C,OAAS,GAClDstC,EAAS8H,EAASA,EAASp1C,OAAS,IAI5C,MAAO,CAAEX,MAAAA,EAAOiuC,OAAAA,GAiQpB,SAASoK,EAAOnpB,GAEZ,IADA,IAAIt0B,EAAS,GACJ6F,EAAI,EAAGA,EAAIyuB,EAAQzuB,IACxB7F,GAAU,IAGd,OAAOA,EAmDX,SAASmkC,EAAQ/+B,EAAOs4C,EAAxB,GAAkE,IAA/B5C,EAA+B,6BAAlEl2C,EAAAA,EAAsD0jB,KAAKkrB,MACvD,OAAuC,IAAnCpuC,EAAMjE,WAAWygB,QAAQ,KAzCjC,SAAsBxc,EAAOs4C,GACzB,IAAI19C,EAASoF,EAAMjE,WADiBw8C,EAAAA,EAGlB39C,EAAOgvB,MAAM,KAHK4uB,GAG/B52B,EAH+B22B,EAAAA,GAGzBxF,EAHyBwF,EAAAA,GAAAE,EAAAA,EAKE72B,EAAKgI,MAAM,KALb4uB,GAK/BpD,EAL+BqD,EAAAA,GAAAC,EAAAA,EAAAA,GAKf/D,OAAAA,IALe+D,EAKJ,GALIA,EAOpC,GAAW,GAAN3F,EACDn4C,EAASw6C,EAAiBT,EAAW0D,EAAOtF,EAAM4B,EAASh0C,YACxD,CACH,IAAI+sC,EAAS,IAGTA,GADC0H,EAAiB,EACZ,YAAQ1H,GAER,WAAOA,GAGjB,IAAIO,GAAUoK,GAAQtF,EAAM,GAAK7vB,KAAKg1B,IAAI9C,GAAkBT,GAAU5M,OAAO,EAAGuQ,GAC5ErK,EAAOttC,OAAS23C,IAChBrK,GAAUoK,EAAOC,EAAYrK,EAAOttC,SAExC/F,EAAS8yC,EAASO,EAOtB,OAJW,GAAN8E,GAAuB,EAAZuF,IACZ19C,GAAM,WAAQy9C,EAAOC,KAGlB19C,EA7BX,CA0C4BoF,EAAOs4C,GAGrB,IAAIlM,EAAUsJ,GAAiB,UAAI11C,EAAJ,aAAcs4C,IAAgBp1B,KAAKwK,IAAI,GAAI4qB,IAC3EvZ,QAAQuZ,GA6GrB,SAASK,EAAkBjE,EAAQ10C,EAAOo0C,EAAmBrhB,EAAO+a,GAChE,IAAIuF,EAAatgB,EAAM6lB,oBACnBC,EAAoBxF,EAAWC,UACnCxF,EAAmBA,GAAoBuF,EAAW9G,QAClD,IAAIuM,EAAgBzF,EAAWyF,eAAiB,EAE5Cl+C,EAAS85C,EAAO34C,WAChBq5C,EAAiBx6C,EAAOgvB,MAAM,KAAK,GACnC+qB,EAAW/5C,EAAOgvB,MAAM,KAAK,GAC3BmvB,EAAkB/4C,EAAQ,GAAqC,IAAhCo1C,EAAe54B,QAAQ,KAwB5D,OAtBI43B,IACI2E,IAEA3D,EAAiBA,EAAe/zC,MAAM,IAvClD,SAA8BgzC,EAAa1G,GAGvC,IAFA,IAAI/yC,EAAS,GACTo+C,EAAU,EACLv4C,EAAI4zC,EAAiB,EAAJ5zC,EAAOA,IACzBu4C,IAAYrL,IACZ/yC,EAAOgX,QAAQnR,GACfu4C,EAAU,GAEdA,IAGJ,OAAOp+C,EAXX,CA0CqEw6C,EAAez0C,OAAQm4C,GAClDn8C,SAAQ,SAACu3C,EAAU77B,GACjD+8B,EAAiBA,EAAe/zC,MAAM,EAAG6yC,EAAW77B,GAASwgC,EAAoBzD,EAAe/zC,MAAM6yC,EAAW77B,MAGjH0gC,IAEA3D,EAAc,WAAOA,KAIxBT,EAGQS,EAAiBtH,EAAmB6G,EAFpCS,EAiFjB,SAASyB,EAAT,GAA+H,IAAvG7oB,EAAuGirB,EAAvGjrB,SAAUmoB,EAA6F8C,EAA7F9C,eAA6F,IAA7EpjB,MAAAA,OAAAA,IAA6EmmB,EAArEpE,EAAqEoE,EAAxDpL,EAAwDmL,EAAxDnL,iBAAwD,IAAtC2J,SAAAA,OAAAA,IAAsC0B,EAA3BpmB,EAAMqmB,kBAAqBD,EACvHn5C,EAAQguB,EAAS8oB,OAErB,GAAc,IAAV92C,GAAe+yB,EAAMsmB,gBACrB,OAAOtmB,EAAMumB,gBAGjB,IAAK/sB,SAASvsB,GACV,OAAOA,EAAMjE,WAGjB,IApUJw9C,EAA8Bv5C,EAAsCw5C,EAA/BC,EAA+BC,EAC3DC,EAAcC,EACf1qB,EAkUAvd,EAAUlS,OAAO+S,OAAO,GAAI2iC,EAAgBsC,EAAUtB,GAEtD9B,EAAc1iC,EAAQ0iC,YACtBoF,EAA0BpF,EAAc,EAAI1iC,EAAQyjC,eACpDyE,EAAyBloC,EAAQkoC,uBACjCxE,EAAe1jC,EAAQ0jC,aACvBuB,EAAejlC,EAAQilC,aACvBtB,IAAYjB,KAAiBgB,GAAgB1jC,EAAQ2jC,QAGrDwE,EAAoBzF,GAAe,EAAKiB,QAAAA,IAAWa,EAAexB,SAAyB,EAAIhjC,EAAQgjC,SACvGY,GAAmBlB,SAAAA,IAAuB8B,EAAeZ,kBAAwD,IAAvBuE,EAA2BnoC,EAAQ4jC,kBAC7HwE,EAAepoC,EAAQooC,aACvB3F,EAAoBziC,EAAQyiC,kBAC5BR,EAAiBjiC,EAAQiiC,eACzB4B,EAAW7jC,EAAQ6jC,SACnBC,EAAY9jC,EAAQ8jC,UACpBmE,EAAcjoC,EAAQioC,YACtBlE,EAAmB/jC,EAAQ+jC,iBAE3BsE,EAAe,GACnB,GAAI1E,EAAS,CACT,IAAIt7C,EAjZZ,YAA6J,IAAnIgG,EAAmIi6C,EAAnIj6C,MAAOq1C,EAA4H4E,EAA5H5E,aAA4H,IAA9GuB,aAAAA,OAAAA,IAA8GsD,GAAAA,EAAzF3G,EAAyF0G,EAAzF1G,cAAyF,IAA1EK,eAAAA,OAAAA,IAA0EuG,GAAAA,EAAA,IAAlD9F,YAAAA,OAAAA,IAAkD+F,EAApC,EAAoCA,EAAA,IAAjC1E,iBAAAA,OAAAA,IAAiC2E,EAAdn3B,KAAKkrB,MAASiM,EACrJL,EAAe,GACf9B,EAAMh1B,KAAKg1B,IAAIl4C,GACf85C,GAAqB,EA+BzB,GA7BIzE,GAAgB9B,EAAc8B,IAAiBH,EAAOG,IACtD2E,EAAezG,EAAc8B,GAC7Br1C,GAAgBk1C,EAAOG,IAEnB6C,GAAOhD,EAAOvB,UAAaiD,GAA4D,IAA5ClB,EAAiBwC,EAAMhD,EAAOvB,WAEzEqG,EAAezG,EAAcI,SAC7B3zC,GAAgBk1C,EAAOvB,UAChBuE,EAAMhD,EAAOvB,UAAYuE,GAAOhD,EAAOxB,SAAYkD,GAA2D,IAA3ClB,EAAiBwC,EAAMhD,EAAOxB,UAExGsG,EAAezG,EAAcG,QAC7B1zC,GAAgBk1C,EAAOxB,SAChBwE,EAAMhD,EAAOxB,SAAWwE,GAAOhD,EAAOzB,SAAYmD,GAA2D,IAA3ClB,EAAiBwC,EAAMhD,EAAOzB,UAEvGuG,EAAezG,EAAcE,QAC7BzzC,GAAgBk1C,EAAOzB,UAChByE,EAAMhD,EAAOzB,SAAWyE,GAAOhD,EAAO1B,UAAaoD,GAA4D,IAA5ClB,EAAiBwC,EAAMhD,EAAO1B,aAExGwG,EAAezG,EAAcC,SAC7BxzC,GAAgBk1C,EAAO1B,UAO3BwG,EADAA,IAFgBpG,EAAiB,IAAM,IAGRoG,EAG/B3F,EAAa,CACb,IAAIiG,EAAat6C,EAAQ,EACrBo1C,EAAiBp1C,EAAMjE,WAAW6tB,MAAM,KAAK,GAE7C2wB,EAAuBD,EACrBlF,EAAez0C,OAAS,EACxBy0C,EAAez0C,OAErBm5C,EAAoB52B,KAAKkJ,IAAIioB,EAAckG,EAAsB,GAGrE,MAAO,CAAEv6C,MAAAA,EAAOg6C,aAAAA,EAAcF,kBAAAA,GA7ClC,CAiZkC,CACtB95C,MAAAA,EACAq1C,aAAAA,EACAuB,aAAAA,EACArD,cAAexgB,EAAMynB,uBACrB5G,eAAAA,EACA8B,iBAAAA,EACArB,YAAAA,IAGJr0C,EAAQhG,EAAKgG,MACbg6C,GAAgBhgD,EAAKggD,aAEjB3F,IACAyF,EAAoB9/C,EAAK8/C,mBAIjC,GAAIF,EAAa,CACb,IAAIa,GA7WkBz6C,GAA9Bu5C,EA6WsC,CAC1Bv5C,MAAAA,EACAy5C,wBAAAA,IA/WkBz5C,MAAOy5C,OAAAA,KAA+BD,EAAAA,EAA/BC,yBAA0B,EAAKD,EAC3DG,GAD2DD,EAAAA,EAC9B15C,EAAMivC,gBAAgBrlB,MAAM,KADE4uB,IAAAkB,GAC7CE,EAD6CF,EAAAA,GAE5DxqB,GAAUyqB,EAETF,GAOsB,EAEAA,IACvBvqB,GAAkBhM,KAAKwK,IAAI,GAAI+rB,EAHR,GAKvBG,EAA6B,IAD7BA,GAA8BH,EAJP,GAKT,WAAuBG,GAAgBA,GAGlD,CACH55C,MAAOkvB,EACP8qB,aAAY,WAAMJ,KA6VlB55C,EAAQy6C,EAAKz6C,MACbg6C,EAAeS,EAAKT,aAAeA,EAGvC,IAnHgBtF,EAAQ10C,EAAOw1C,EAmH3Bd,EA3QR,SAA8BA,EAAQ10C,EAAOu1C,EAAkB+C,EAAW3uB,EAAM+rB,GAC5E,IAAmB,IAAf4C,EACA,OAAO5D,EAGX,IAAI95C,EAASmkC,EAAQ/+B,EAAOs4C,EAAW5C,GALuDgF,EAAAA,EAM1C9/C,EAAOmB,WAAW6tB,MAAM,KANkB4uB,GAMzFmC,EANyFD,EAAAA,GAAAE,EAAAA,EAAAA,GAMlEC,OAAAA,IANkED,EAMhD,GANgDA,EAQ9F,GAAIC,EAAgB5oC,MAAM,UAAYsjC,GAAoB5rB,GACtD,OAAOgxB,EAGX,IAAIG,EAAoBD,EAAgB5oC,MAAM,OAC9C,OAAI0X,GAAQmxB,EACR,UAAUH,EAAV,YAAmCE,EAAgB9+C,WAAWsF,MAAM,EAAGy5C,EAAkBziC,QAGtFzd,EAAOmB,WAjBlB,CA2QsCiE,EAAMjE,WAAYiE,EAAOu1C,EAAkBuE,EAAmBC,EAAcrE,GAY9G,OAVAhB,EAASiE,EADTjE,EA/OJ,SAAoCA,EAAQ10C,EAAO65C,EAAwBvB,GACvE,IAAI19C,EAAS85C,EADqEqG,EAAAA,EAEnCngD,EAAOmB,WAAW6tB,MAAM,KAFW4uB,GAE7EmC,EAF6EI,EAAAA,GAEtDF,EAFsDE,EAAAA,GAIlF,GAAIJ,EAAsB1oC,MAAM,UAAY4nC,EACxC,OAAKgB,EAIL,UAAUF,EAAsBp5C,QAAQ,IAAK,IAA7C,YAAoDs5C,GAHzCF,EAAsBp5C,QAAQ,IAAK,IAMlD,IAAMw3C,EAAkB/4C,EAAQ,GAA4C,IAAvC26C,EAAsBn+B,QAAQ,KAOnE,GANIu8B,IAEI4B,EAAwBA,EAAsBt5C,MAAM,GACpDzG,EAASA,EAAOyG,MAAM,IAG1Bs5C,EAAsBh6C,OAAS23C,EAE/B,IADA,IAAI0C,EAAe1C,EAAYqC,EAAsBh6C,OAC5CF,EAAI,EAAGA,EAAIu6C,EAAcv6C,IAC9B7F,EAAM,WAAOA,GAQrB,OAJIm+C,IAEAn+C,EAAM,WAAOA,IAEVA,EAAOmB,WA9BlB,CA+OwC24C,EAAQ10C,EAAO65C,EAAwBJ,GACxCz5C,EAAOo0C,EAAmBrhB,EAAO+a,IAEhEwH,GAAWsE,KACXlF,GAAoCsF,IAGpCvE,GAAaz1C,EAAQ,KA3HT00C,EA4HQA,EA5HOc,EA4HQA,EAAnCd,EA3HU,KADU10C,EA4HQA,GA1HrB00C,EAGK,IAAXA,EACMA,EAAOnzC,QAAQ,IAAK,IAGnB,EAARvB,EACA,WAAW00C,GAGE,SAAbc,EACOd,EAGX,WAAWA,EAAOnzC,QAAQ,IAAK,IAA/B,MA8GOmzC,EAUX,SAASqC,EAAgBZ,EAAgB8E,GACrC,IAAK9E,EACD,OAAO8E,EAGX,IAAIhsC,EAAOxP,OAAOwP,KAAKknC,GACvB,OAAoB,IAAhBlnC,EAAKtO,QAA4B,WAAZsO,EAAK,GACnBgsC,EAGJ9E,EAGXnqB,EAAOhgB,QAAU,SAACoqC,GAAD,MAAa,CAC1B/D,OAAQ,sCAAIrkC,EAAJ,yBAAIA,EAAJktC,GAAA1pC,UAAAA,GAAA,OAAa0kC,EAAM5nC,WAAAA,EAAIN,EAAV/J,OAAA,CAAgBmyC,MACrC+E,YAAa,sCAAIntC,EAAJ,yBAAIA,EAAJotC,GAAA5pC,UAAAA,GAAA,OAlqBjB,SAAqBwc,GACjB,IAAIh0B,EAAOuK,EAAMsxC,QACjB,OAAO2B,EAAmBxpB,EAAS8oB,OAAQ98C,EAAK+7C,SAAU/7C,EAAK87C,OAAO7H,QAgqBjC3/B,WAAAA,EAAIN,EAAf/J,OAAA,CAAqBmyC,MAC/CiF,kBAAmB,sCAAIrtC,EAAJ,yBAAIA,EAAJstC,GAAA9pC,UAAAA,GAAA,OA/qBvB,SAA2Bwc,GACvB,IAAIh0B,EAAOuK,EAAM0xC,OACjB,OAAOuB,EAAmBxpB,EAAS8oB,OAAQ98C,EAAK+7C,SAAU/7C,EAAK87C,OAAO7H,QA6qBrB3/B,WAAAA,EAAIN,EAArB/J,OAAA,CAA2BmyC,MAC3DmF,mBAAoB,sCAAIvtC,EAAJ,yBAAIA,EAAJwtC,GAAAhqC,UAAAA,GAAA,OA5rBxB,SAA4Bwc,GACxB,IAAIh0B,EAAOuK,EAAMgoC,QACjB,OAAOiL,EAAmBxpB,EAAS8oB,OAAQ98C,EAAK+7C,SAAU/7C,EAAK87C,OAAO7H,QA0rBnB3/B,WAAAA,EAAIN,EAAtB/J,OAAA,CAA4BmyC,MAC7DW,gBAAAA,KAAAA,CAAAA,gBAAAA,EAAAA,YAAAA,EAAAA,eAAAA,GAAAA,eAAAA,IAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aCzyBJ,IAAM0E,EAAO1G,EAAQ,WACfC,EAAaD,EAAQ,gBACrBE,EAAUF,EAAQ,aAEpBhiB,EAAQ,GAER2oB,OAAAA,EACAC,EAAY,GAEZC,EAAa,KAEbC,EAAiB,GAErB,SAASC,EAAeC,GAAOL,EAAqBK,EAEpD,SAASC,IAAwB,OAAOL,EAAUD,GAOlD3oB,EAAM4oB,UAAY,kBAAMl8C,OAAO+S,OAAO,GAAImpC,IAW1C5oB,EAAMkpB,gBAAkB,kBAAMP,GAO9B3oB,EAAM6iB,aAAe,kBAAMoG,IAAsBz3C,OAAS,IAO1DwuB,EAAMyjB,gBAAkB,kBAAMwF,IAAsBhI,UAOpDjhB,EAAMynB,qBAAuB,kBAAMwB,IAAsBzI,eAOzDxgB,EAAM6lB,kBAAoB,kBAAMoD,IAAsB3I,YAOtDtgB,EAAMilB,eAAiB,kBAAMgE,IAAsBnI,SAYnD9gB,EAAMqmB,gBAAkB,kBAAM35C,OAAO+S,OAAO,GAAIwpC,IAAsBvE,SAAUoE,IAQhF9oB,EAAMklB,4BAA8B,kBAAMx4C,OAAO+S,OAAO,GAAIugB,EAAMqmB,kBAAmB4C,IAAsBE,gBAQ3GnpB,EAAM2kB,yBAA2B,kBAAMj4C,OAAO+S,OAAO,GAAIugB,EAAMqmB,kBAAmB4C,IAAsBG,aAQxGppB,EAAMmkB,+BAAiC,kBAAMz3C,OAAO+S,OAAO,GAAIugB,EAAMqmB,kBAAmB4C,IAAsBI,mBAQ9GrpB,EAAMikB,6BAA+B,kBAAMv3C,OAAO+S,OAAO,GAAIugB,EAAMqmB,kBAAmB4C,IAAsB7H,iBAQ5GphB,EAAM4kB,yBAA2B,kBAAMl4C,OAAO+S,OAAO,GAAIugB,EAAMqmB,kBAAmB4C,IAAsBK,aAOxGtpB,EAAMupB,YAAc,SAACjK,GACjBA,EAAS4C,EAAQoB,YAAYhE,GACzB2C,EAAWsB,eAAejE,KAC1BwJ,EAAiBxJ,IAazBtf,EAAMumB,cAAgB,kBAAMsC,GAO5B7oB,EAAMwpB,cAAgB,SAACtuB,GAAD,OAAY2tB,EAAgC,iBAAZ3tB,EAAuBA,EAAS,MAOtF8E,EAAMsmB,cAAgB,kBAAqB,OAAfuC,GAe5B7oB,EAAMypB,aAAe,SAACT,GAClB,GAAIA,EAAK,CACL,GAAIJ,EAAUI,GACV,OAAOJ,EAAUI,GAErB,MAAM,IAAI3gD,MAAJ,uBAA0B2gD,EAA1B,MAGV,OAAOC,KAYXjpB,EAAM0pB,iBAAmB,SAACziD,GAA8B,IAAxB0iD,EAAwB,wDACpD,IAAK1H,EAAW2H,iBAAiB3iD,GAC7B,MAAM,IAAIoB,MAAM,yBAGpBugD,EAAU3hD,EAAKo5C,aAAep5C,EAE1B0iD,GACAZ,EAAe9hD,EAAKo5C,cAc5BrgB,EAAM6pB,YAAc,SAACb,GAAwC,IAAnCc,EAAmC,uDAArBpB,EAAKrI,YACzC,IAAKuI,EAAUI,GAAM,CACjB,IAAI9N,EAAS8N,EAAInyB,MAAM,KAAK,GAExBkzB,EAAsBr9C,OAAOwP,KAAK0sC,GAAWoB,MAAK,SAAAvjD,GAClD,OAAOwjD,EAAKpzB,MAAM,KAAK,KAAOqkB,KAGlC,OAAK0N,EAAUmB,QAKfhB,EAAegB,QAJXhB,EAAee,GAQvBf,EAAeC,IAGnBhpB,EAAM0pB,iBAAiBhB,GACvBC,EAAqBD,EAAKrI,YAE1BpnB,EAAOhgB,QAAU+mB,GAAAA,CAAAA,UAAAA,EAAAA,YAAAA,EAAAA,eAAAA,KAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aCvNjB/G,EAAOhgB,QAAU,SAACoqC,GAAD,MAAa,CAC1B6G,oBAAqB,SAACC,GAAD,OAhBU9G,EAgB0BA,OAAN8G,EAf9CvgD,SAAQ,SAACo/C,GACV,IAAI/hD,OAAAA,EACJ,IACIA,EAAO+6C,EAAO,uBAAiBgH,IACjC,MAAOviD,GACL4U,QAAQvT,MAARuT,mBAAAA,OAAiC2tC,EAAjC,wCAGA/hD,GACAo8C,EAAOqG,iBAAiBziD,MAVpC,IAAmCo8C,MAAAA,IAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aCPnC,IAAMhK,EAAY2I,EAAQ,gBAgC1B,SAASoI,EAASzwB,EAAG0wB,EAAOhH,GACxB,IAAIp2C,EAAQ,IAAIosC,EAAU1f,EAAEoqB,QACxBuG,EAAaD,EASjB,OAPIhH,EAAOkH,SAASF,KAChBC,EAAaD,EAAMtG,QAGvBuG,EAAa,IAAIjR,EAAUiR,GAE3B3wB,EAAEoqB,OAAS92C,EAAMu9C,MAAMF,GAAYG,WAC5B9wB,EAiFXV,EAAOhgB,QAAU,YAAM,MAAK,CACxBmP,IAAK,SAACuR,EAAG0wB,GAAJ,OAnHOA,EAmHcA,EAnHPhH,EAmHcA,EAlH7Bp2C,EAAQ,IAAIosC,GADP1f,EAmHcA,GAlHKoqB,QACxBuG,EAAaD,EAEbhH,EAAOkH,SAASF,KAChBC,EAAaD,EAAMtG,QAGvBuG,EAAa,IAAIjR,EAAUiR,GAE3B3wB,EAAEoqB,OAAS92C,EAAMy9C,KAAKJ,GAAYG,WAC3B9wB,EAXX,IAAaA,EAAG0wB,EAAOhH,EACfp2C,EACAq9C,GAkHJrM,SAAU,SAACtkB,EAAG0wB,GAAJ,OAAcD,EAASzwB,EAAG0wB,EAAOhH,IAC3CsH,SAAU,SAAChxB,EAAG0wB,GAAJ,OAzEOA,EAyEmBA,EAzEZhH,EAyEmBA,EAxEvCp2C,EAAQ,IAAIosC,GADF1f,EAyEmBA,GAxELoqB,QACxBuG,EAAaD,EAEbhH,EAAOkH,SAASF,KAChBC,EAAaD,EAAMtG,QAGvBuG,EAAa,IAAIjR,EAAUiR,GAE3B3wB,EAAEoqB,OAAS92C,EAAM29C,MAAMN,GAAYG,WAC5B9wB,EAXX,IAAkBA,EAAG0wB,EAAOhH,EACpBp2C,EACAq9C,GAwEJO,OAAQ,SAAClxB,EAAG0wB,GAAJ,OApDOA,EAoDiBA,EApDVhH,EAoDiBA,EAnDnCp2C,EAAQ,IAAIosC,GADJ1f,EAoDiBA,GAnDDoqB,QACxBuG,EAAaD,EAEbhH,EAAOkH,SAASF,KAChBC,EAAaD,EAAMtG,QAGvBuG,EAAa,IAAIjR,EAAUiR,GAE3B3wB,EAAEoqB,OAAS92C,EAAM69C,UAAUR,GAAYG,WAChC9wB,EAXX,IAAgBA,EAAG0wB,EAAOhH,EAClBp2C,EACAq9C,GAmDJrgD,IAAK,SAAC0vB,EAAG0wB,GAAJ,OA/BK1wB,EA+BaA,EA9BnB1sB,EADSo9C,EA+BaA,EAAOhH,EA5BtBkH,SAASF,KAChBp9C,EAAQo9C,EAAMtG,QAGlBpqB,EAAEoqB,OAAS92C,EACJ0sB,EARX,IAAcA,EAAG0wB,EACTp9C,GA+BJ89C,WAAY,SAACpxB,EAAG0wB,GAAJ,OAbOA,EAaqBA,EAXxCD,EADI7yB,GADsB8rB,EAaqBA,GAAV1pB,EAZhBoqB,QACLsG,EAAOhH,GAEhBlzB,KAAKg1B,IAAI5tB,EAAMwsB,QAJ1B,IAAuBsG,EAAOhH,EACtB9rB,GAaJ8hB,UAAWA,KAAAA,CAAAA,eAAAA,IAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,ICnIf,IAEM0I,EAAcC,EAAQ,iBACtBgJ,EAAYhJ,EAAQ,gBACpBiJ,EAASjJ,EAAQ,YAARA,CAAqBqB,GAC9B6H,EAAclJ,EAAQ,kBACxBmJ,EAAYnJ,EAAQ,eAARA,CAAwBqB,GACpC+H,EAAapJ,EAAQ,iBAARA,CAA0BqB,GACrCnB,EAAUF,EAAQ,aAElBqJ,EAAAA,WACF,WAAYlvB,IAAAA,SAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,CAAQ7rB,KAAA+6C,GAChB/6C,KAAKyzC,OAAS5nB,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAGR,OAAOknB,EAAO/yC,KAAKyzC,UAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAAAA,GAET,IAAbZ,EAAa,iCAAJ,GAAM,OAAOgI,EAAU7L,OAAOhvC,KAAM6yC,KAAAA,CAAAA,IAAAA,iBAAAA,MAAAA,SAErC7D,GAMX,MALsB,iBAAXA,IACPA,EAAS4C,EAAQoB,YAAYhE,KAEjCA,EAAS6L,EAAUnH,gBAAgB1E,EAAQyC,EAAYkC,iCAChDtC,OAAS,WACTwJ,EAAU7L,OAAOhvC,KAAMgvC,KAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAAAA,GAGV,IAAbA,EAAa,iCAAJ,GAEhB,OADAA,EAAOqC,OAAS,OACTwJ,EAAU7L,OAAOhvC,KAAMgvC,KAAAA,CAAAA,IAAAA,kBAAAA,MAAAA,WAGd,OAAO6L,EAAU7C,kBAAkBh4C,QAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,WAElC,OAAO66C,EAAU3C,mBAAmBl4C,QAAAA,CAAAA,IAAAA,YAAAA,MAAAA,WAE3C,OAAO66C,EAAU/C,YAAY93C,QAAAA,CAAAA,IAAAA,aAAAA,MAAAA,SAEhC+5C,GAAS,OAAOe,EAAWL,WAAWz6C,KAAM+5C,KAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAEnDA,GAAS,OAAOe,EAAWhjC,IAAI9X,KAAM+5C,KAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAEhCA,GAAS,OAAOe,EAAWnN,SAAS3tC,KAAM+5C,KAAAA,CAAAA,IAAAA,WAAAA,MAAAA,SAE1CA,GAAS,OAAOe,EAAWT,SAASr6C,KAAM+5C,KAAAA,CAAAA,IAAAA,SAAAA,MAAAA,SAE5CA,GAAS,OAAOe,EAAWP,OAAOv6C,KAAM+5C,KAAAA,CAAAA,IAAAA,MAAAA,MAAAA,SAE3Cj0B,GAAS,OAAOg1B,EAAWnhD,IAAIqG,KAAMg7C,EAAel1B,MAAAA,CAAAA,IAAAA,QAAAA,MAAAA,WAE9C,OAAO9lB,KAAKyzC,SAAAA,CAAAA,IAAAA,UAAAA,MAAAA,WAEV,OAAOzzC,KAAKyzC,YAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EA3CtBsH,GAoDN,SAASC,EAAel1B,GACpB,IAAIvuB,EAASuuB,EASb,OARIitB,EAAOkH,SAASn0B,GAChBvuB,EAASuuB,EAAM2tB,OACS,iBAAV3tB,EACdvuB,EAASw7C,EAAOkI,SAASn1B,GAClBo1B,MAAMp1B,KACbvuB,EAAS4jD,KAGN5jD,EAGX,SAASw7C,EAAOjtB,GACZ,OAAO,IAAIi1B,EAAOC,EAAel1B,IAGrCitB,EAAOxoC,QA/ES,QAiFhBwoC,EAAOkH,SAAW,SAASmB,GACvB,OAAOA,aAAkBL,GAO7BhI,EAAOsI,SAAW5J,EAAYmH,gBAC9B7F,EAAOqG,iBAAmB3H,EAAY2H,iBACtCrG,EAAOwG,YAAc9H,EAAY8H,YACjCxG,EAAOuF,UAAY7G,EAAY6G,UAC/BvF,EAAOoG,aAAe1H,EAAY0H,aAClCpG,EAAOwF,WAAa9G,EAAYyH,cAChCnG,EAAO6E,cAAgBnG,EAAYsE,gBACnChD,EAAOkG,YAAcxH,EAAYwH,YACjClG,EAAOuI,sBAAwB7J,EAAYkC,6BAC3CZ,EAAOwI,SAAWb,EAAUa,SAC5BxI,EAAO6G,oBAAsBe,EAAOf,oBACpC7G,EAAOkI,SAAWL,EAAYK,SAC9BlI,EAAOhK,UAAY+R,EAAW/R,UAE9BpgB,EAAOhgB,QAAUoqC,GAAAA,CAAAA,eAAAA,EAAAA,gBAAAA,EAAAA,YAAAA,EAAAA,iBAAAA,EAAAA,YAAAA,EAAAA,iBAAAA,EAAAA,eAAAA,KAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aC8LjBpqB,EAAOhgB,QAAU,CACbqqC,YAzBJ,SAAqBpoB,GAAqB,IAtQrBA,EAAQrzB,EACrBqX,EAgBcgc,EAAQrzB,EACtBqX,EA+F0BrX,EAC1BqX,EAc6BrX,EAE7BqX,EA2CsBrX,EAaHqzB,EAAQrzB,EAmBJqzB,EAAQrzB,EA9CJA,EACzB+5C,EA9E8B/5C,EAaHA,EA2IdqzB,EAAQrzB,EAeCA,EAaHA,EAAa,uDAAJ,GAClC,MAAsB,iBAAXqzB,EACAA,GAxQcrzB,EA2QIA,EA1PHA,EA2PIA,EA1OlC,SAAqBqzB,EAAQrzB,GACzB,IAA6B,IAAzBqzB,EAAOzR,QAAQ,KAAnB,CAKA,IAA6B,IAAzByR,EAAOzR,QAAQ,KAKnB,OAA8B,IAA1ByR,EAAOzR,QAAQ,OACf5hB,EAAO85C,OAAS,OAChB95C,EAAOgnB,KAAO,YAIW,IAAzBqM,EAAOzR,QAAQ,MACf5hB,EAAO85C,OAAS,OAChB95C,EAAOgnB,KAAO,WAKW,IAAzBqM,EAAOzR,QAAQ,MACf5hB,EAAO85C,OAAS,OAChB95C,EAAOgnB,KAAO,YAKW,IAAzBqM,EAAOzR,QAAQ,MAKU,IAAzByR,EAAOzR,QAAQ,OACf5hB,EAAO85C,OAAS,WALhB95C,EAAO85C,OAAS,OAzBhB95C,EAAO85C,OAAS,eALhB95C,EAAO85C,OAAS,WAFxB,CA0OIzmB,GA1PIhc,GADcgc,EA0PlBA,GA1QIhc,GADagc,EA2QIA,GA1QFhc,MAAM,gBAErBrX,EAAO8yC,OAASz7B,EAAM,GACfgc,EAAO5sB,MAAM4Q,EAAM,GAAGtR,SAG1BstB,GAWYhc,MAAM,gBAErBrX,EAAO27C,QAAUtkC,EAAM,GAEhBgc,EAAO5sB,MAAM,GAAI4Q,EAAM,GAAGtR,SAG9BstB,EAoParzB,GA5JUA,EA6JLA,GA5JrBqX,EA4Jagc,EA5JEhc,MAAM,mBAGrBrX,EAAOy5C,aAAepiC,EAAM,IAWCrX,EA+ILA,GA7IxBqX,EA6IgBgc,EA9IQrE,MAAM,KAAK,GACZ3X,MAAM,SAE7BrX,EAAOw6C,eAAiBnjC,EAAM,GAAGtR,QAwFzC,SAAqCstB,EAAQrzB,GACzC,IAA6B,IAAzBqzB,EAAOzR,QAAQ,KAAa,CAC5B,IAAI44B,EAAiBnnB,EAAOrE,MAAM,KAAK,GACvChvB,EAAOi/C,wBAA0D,IAAjCzE,EAAe54B,QAAQ,MAH/D,CAoDgCyR,EAAQrzB,GAnGVA,EAoGLA,GAnGQ,IAmGhBqzB,EAnGFzR,QAAQ,OACf5hB,EAAO06C,SAAAA,GAWoB16C,EAwFLA,GAvFG,KADNqzB,EAwFLA,GAvFPzR,QAAQ,KACf5hB,EAAOy6C,aAAe,YACU,IAAzBpnB,EAAOzR,QAAQ,KACtB5hB,EAAOy6C,aAAe,WACU,IAAzBpnB,EAAOzR,QAAQ,KACtB5hB,EAAOy6C,aAAe,WACU,IAAzBpnB,EAAOzR,QAAQ,OACtB5hB,EAAOy6C,aAAe,YAnD9B,SAAuBpnB,EAAQrzB,GAC3B,IAAI+5C,EAAW1mB,EAAOrE,MAAM,KAAK,GACjC,GAAI+qB,EAAU,CACV,IAAI1iC,EAAQ0iC,EAAS1iC,MAAM,MACvBA,IACArX,EAAO+5C,SAAW1iC,EAAM,GAAGtR,SALvC,CAoIkBstB,EAAQrzB,GAtEaA,EAuELA,GAvEHqzB,EAuELA,GAtEXhc,MAAM,SACbrX,EAAO26C,kBAAAA,EACAtnB,EAAOhc,MAAM,QACpBrX,EAAO26C,kBAAAA,GAlDoB36C,EAsHLA,GArHpB+5C,EAqHY1mB,EArHMrE,MAAM,KAAK,MAE/BhvB,EAAOm/C,cAA0C,IAA3BpF,EAASn4B,QAAQ,MAhFP5hB,EAoMLA,GAnMF,IAmMNqzB,EAnMZzR,QAAQ,OACf5hB,EAAOw5C,mBAAAA,GAWsBx5C,EAwLLA,GAvLC,IAuLTqzB,EAvLTzR,QAAQ,OACf5hB,EAAOg5C,gBAAAA,EACPh5C,EAAO05C,wBAAAA,GAEH15C,EAAO06C,SAAW16C,EAAOy6C,gBACzBz6C,EAAO+6C,4BAAAA,IAqIY/6C,EA8CLA,GA9CHqzB,EA8CLA,GA7CHhc,MAAM,oBACbrX,EAAO46C,SAAW,eAElBvnB,EAAOhc,MAAM,WACbrX,EAAO46C,SAAW,QAUM56C,EAgCLA,EAARqzB,EA/BJhc,MAAM,SACbrX,EAAO66C,WAAAA,GAgCJ76C,MAAAA,IAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aClSX,IAAMikD,EAAc,CAChB,CAACnzC,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,MAAOozC,OAAQ57B,KAAKwK,IAAI,KAAM,IACpC,CAAChiB,IAAK,KAAMozC,OAAQ57B,KAAKwK,IAAI,IAAM,IACnC,CAAChiB,IAAK,IAAKozC,OAAQ,IASvB,SAASC,EAAatgD,GAClB,OAAOA,EAAE8C,QAAQ,wBAAyB,QA2I9C,SAASy9C,EAAcC,EAAa5L,EAApC,WAAiH,IAAjEsD,EAAiE,6BAAjHn3C,EAAAA,EAAiE,GAAIq0C,EAA4C,mBAAjHnnB,OAAA,EAA8EkvB,EAAmC,mBAAjHn7C,OAAA,EAA0F8yC,EAAuB,mBAAjHj4C,OAAA,EAAyG+2C,EAAQ,mBAAjHrM,OAAA,EACI,GAAoB,KAAhBiZ,EAMJ,OAAIA,IAAgBrD,EACT,EApIf,SAASsD,EAAwBD,EAAa5L,EAA9C,WAA2H,IAAjEsD,EAAiE,6BAA3HjqB,EAAAA,EAA2E,GAAImnB,EAA4C,mBAA3HpzC,OAAA,EAAwFm7C,EAAmC,mBAA3HtgD,OAAA,EAAoGi4C,EAAuB,mBAA3HvN,OAAA,EAAmHqM,EAAQ,mBAA3H8M,OAAA,EACI,IAAKZ,OAAOU,GACR,OAAQA,EAGZ,IAAIG,EAAW,GAGXC,EAAWJ,EAAY19C,QAAQ,2BAA4B,UAE/D,GAAI89C,IAAaJ,EACb,OAAQ,EAAIC,EAAwBG,EAAUhM,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,GAKlH,IAAK,IAAI5xC,EAAI,EAAGA,EAAIo+C,EAAYl+C,OAAQF,IAAK,CACzC,IAAIwtC,EAAS4Q,EAAYp+C,GAGzB,IAFA2+C,EAAWH,EAAY19C,QAAQ+9C,OAAM,mBAAarR,EAAOviC,IAApB,OAA8B,SAElDuzC,EACb,OAAOC,EAAwBE,EAAU/L,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,GAAUpE,EAAO6Q,OAQlI,IAFAM,EAAWH,EAAY19C,QAAQ,IAAK,OAEnB09C,EACb,OAAOC,EAAwBE,EAAU/L,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,GAAU,IAKvH,IAAIkN,EAAuBC,WAAWP,GAEtC,IAAIV,MAAMgB,GAAV,CAIA,IAAIE,EAAgB5L,EAAQ0L,GAC5B,GAAIE,GAAmC,MAAlBA,IACjBL,EAAWH,EAAY19C,QAAQ,IAAI+9C,OAAJ,UAAcP,EAAaU,GAA3B,MAA+C,OAE7DR,EACb,OAAOC,EAAwBE,EAAU/L,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,GAMjH,IAAIqN,EAAwB,GAC5BjgD,OAAOwP,KAAKskC,GAAe52C,SAAQ,SAAC+O,GAChCg0C,EAAsBnM,EAAc7nC,IAAQA,KAMhD,IAHA,IAAIi0C,EAAqBlgD,OAAOwP,KAAKywC,GAAuBhkC,OAAOi2B,UAC/DiO,EAAwBD,EAAmBh/C,OAEtCk/C,EAAI,EAAGA,EAAID,EAAuBC,IAAK,CAC5C,IAAI7/C,EAAQ2/C,EAAmBE,GAC3Bn0C,EAAMg0C,EAAsB1/C,GAGhC,IADAo/C,EAAWH,EAAY19C,QAAQvB,EAAO,OACrBi/C,EAAa,CAC1B,IAAIH,OAAAA,EACJ,OAAQpzC,GACJ,IAAK,WACDozC,EAAS57B,KAAKwK,IAAI,GAAI,GACtB,MACJ,IAAK,UACDoxB,EAAS57B,KAAKwK,IAAI,GAAI,GACtB,MACJ,IAAK,UACDoxB,EAAS57B,KAAKwK,IAAI,GAAI,GACtB,MACJ,IAAK,WACDoxB,EAAS57B,KAAKwK,IAAI,GAAI,IAG9B,OAAOwxB,EAAwBE,EAAU/L,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,GAAUyM,KAjF/H,CAgGA,SAAiCG,EAAa5L,EAA9C,GAA+E,IAArBsD,EAAqB,6BAA/En3C,EAAAA,EAA2E,GAGnE4/C,EAAWH,EAAY19C,QAAQo1C,EAAgB,IAUnD,OANAyI,EAAWA,EAAS79C,QAAQ,IAAI+9C,OAAJ,iBAAqBP,EAAa1L,EAAWC,WAA7C,WAAkE,KAAM,SAIhF/xC,QAAQ8xC,EAAW9G,QAAS,KAXpD,CAuCwC0S,EAAa5L,EAAYsD,GACvBtD,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,GAmF1GrmB,EAAOhgB,QAAU,CACbsyC,SAhCJ,SAAkBW,EAAa5M,GAE3B,IAlBIyN,EAEAlI,EACAC,EAeE/C,EAAcC,EAAQ,iBAExB1B,EAAayB,EAAY8D,oBACzBjC,EAAiB7B,EAAY0B,kBAAkBvC,OAC/CJ,EAAUiB,EAAYkD,iBACtB4D,EAAa9G,EAAYwE,gBACzB/F,EAAgBuB,EAAY0F,uBAE5Bx6C,OAAAA,EAEJ,GAA2B,iBAAhBi/C,EAIHj/C,EA1DZ,SAAqBi/C,EAAa5L,GAG9B,GAFiB4L,EAAYziC,QAAQ,MAAiC,MAAzB62B,EAAWC,UAExD,CAIA,IAAIwM,EAAWb,EAAYr1B,MAAM,KACjC,GAAwB,IAApBk2B,EAASn/C,OAAb,CAIA,IAAIi3C,GAASkI,EAAS,GAClBjI,GAAWiI,EAAS,GACpBhI,GAAWgI,EAAS,GAExB,OAAQvB,MAAM3G,KAAW2G,MAAM1G,KAAa0G,MAAMzG,KAhBtD,CAuDwBmH,EAAa5L,IA3B7BuE,IAFAkI,EA8ByBb,EA9BFr1B,MAAM,MAEX,GAClBiuB,GAAWiI,EAAS,IACTA,EAAS,GAEP,GAAKjI,EAAU,KAAOD,GA0BvBoH,EAAcC,EAAa5L,EAAYsD,EAAgB9C,EAAS+H,EAAYrI,EAAelB,OAEpG,IAA2B,iBAAhB4M,EAGd,OAFAj/C,EAAQi/C,EAKZ,QAAI,IAAAj/C,EAIJ,OAAOA,KAAAA,CAAAA,gBAAAA,IAAAA,GAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,aAAAA,SAAAA,EAAAA,GAAAA,OAAAA,SAAAA,GAAAA,GAAAA,MAAAA,QAAAA,GAAAA,CAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,EAAAA,QAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,OAAAA,GAAAA,CAAAA,IAAAA,SAAAA,GAAAA,GAAAA,OAAAA,YAAAA,OAAAA,IAAAA,uBAAAA,OAAAA,UAAAA,SAAAA,KAAAA,GAAAA,OAAAA,MAAAA,KAAAA,GAAAA,CAAAA,IAAAA,WAAAA,MAAAA,IAAAA,UAAAA,mDAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GClQX,IAAIi+C,EAAclJ,EAAQ,kBAGpBgL,EAAc,qDAoEdC,EAAc,CAChBtL,OAAQ,CACJ50B,KAAM,SACNmgC,YArEkB,CACtB,WACA,UACA,OACA,OACA,UACA,WAiEAr+B,KAAM,CACF9B,KAAM,SACNmgC,YAbgB,CACpB,UACA,SACA,WAWIC,YAAa,SAAChxB,EAAQmjB,GAAT,MAAsC,SAAlBA,EAAOqC,QACxC12C,QAAS,yDACTmiD,UAAW,SAAC9N,GAAD,MAA8B,SAAlBA,EAAOqC,SAElCU,eAAgB,CACZt1B,KAAM,SACNogC,YAAa,SAAChxB,GAAD,OAAsB,GAAVA,GACzBlxB,QAAS,0BAEb0vC,OAAQ,SACR6I,QAAS,SACTlB,aAAc,CACVv1B,KAAM,SACNmgC,YA9EwB,CAC5B,WACA,UACA,UACA,aA4EA3K,QAAS,UACTsB,aAAc,CACV92B,KAAM,UACNogC,YAAa,SAAChxB,EAAQmjB,GAAT,WAAoBA,EAAOiD,SACxCt3C,QAAS,yEAEb04C,iBAAkB,CACd52B,KAAM,SACNmgC,YAjFsB,CAC1B,SACA,QACA,YAgFAtJ,eAAgB,SAChBtC,YAAa,CACTv0B,KAAM,SACNsgC,aAAc,CACV,CACIF,YAAa,SAAChxB,GAAD,OAAsB,GAAVA,GACzBlxB,QAAS,0BAEb,CACIkiD,YAAa,SAAChxB,EAAQmjB,GAAT,OAAqBA,EAAOuH,aACzC57C,QAAS,sDAIrB22C,SAAU,CACN70B,KAAM,SACNogC,YAAa,SAAChxB,GAAD,OAAsB,GAAVA,GACzBlxB,QAAS,0BAEbu3C,iBAAkB,UAClBwE,aAAc,UACdrE,iBAAkB,WAClBmE,uBAAwB,UACxBzF,kBAAmB,UACnBR,eAAgB,UAChBU,uBAAwB,UACxBqB,2BAA4B,UAC5BpC,cA5EuB,CACvBzzB,KAAM,SACNugC,SAAU,CACN7M,SAAU,SACVC,QAAS,SACTC,QAAS,SACTC,SAAU,WAuEd6B,SAAU,CACN11B,KAAM,SACNmgC,YA3GoB,CACxB,OACA,gBA2GAxK,UAAW,UACXmE,YAAa,CACT95B,KAAM,WAEVm3B,aAAc,CACVn3B,KAAM,UACNogC,YAAa,SAAChxB,EAAQmjB,GAAT,MAAsC,YAAlBA,EAAOqC,QACxC12C,QAAS,qEAIXsiD,EAAgB,CAClBlN,YAAa,CACTtzB,KAAM,SACNqgC,WAAW,EACXD,YAAa,SAACnE,GACV,OAAOA,EAAI9pC,MAAM8tC,IAErB/hD,QAAS,iGAEbq1C,WAAY,CACRvzB,KAAM,SACNugC,SAAU,CACN/M,UAAW,SACX/G,QAAS,SACTuM,cAAe,UAEnBqH,WAAW,GAEf5M,cArIgC,CAChCzzB,KAAM,SACNugC,SAAU,CACN7M,SAAU,CACN1zB,KAAM,SACNqgC,WAAW,GAEf1M,QAAS,CACL3zB,KAAM,SACNqgC,WAAW,GAEfzM,QAAS,CACL5zB,KAAM,SACNqgC,WAAW,GAEfxM,SAAU,CACN7zB,KAAM,SACNqgC,WAAW,IAGnBA,WAAW,GAkHXvM,eAAgB,UAChBU,uBAAwB,UACxBT,QAAS,CACL/zB,KAAM,WACNqgC,WAAW,GAEf57C,MAAO,CACHub,KAAM,SACNugC,SAAU,CACNvM,eAAgB,SAChBC,gBAAiB,WAGzBC,SAAU,CACNl0B,KAAM,SACNugC,SAAU,CACNpM,OAAQ,SACRC,SAAU,SACVrlC,KAAM,UAEVsxC,WAAW,GAEf1I,SAAU,SACVyE,cAAe,SACfC,WAAY,SACZC,iBAAkB,SAClBjI,eAAgB,SAChBoM,aAAc,SACdhM,QAAS,CACLz0B,KAAM,SACNugC,SAAU,CACN7L,WAAY,CACR10B,KAAM,SACNqgC,WAAW,GAEf1L,oBAAqB,CACjB30B,KAAM,SACNqgC,WAAW,GAEfvL,8BAA+B,CAC3B90B,KAAM,SACNqgC,WAAW,GAEftL,mBAAoB,CAChB/0B,KAAM,SACNqgC,WAAW,MA2B3B,SAASK,EAAcr3B,GAGnB,YAAO,IAFK80B,EAAYK,SAASn1B,GAcrC,SAASs3B,EAAaC,EAAYC,EAAMjT,EAAxC,GAA4E,IAA5BkT,EAA4B,6BAA5EpnD,GAAAA,EACQqnD,EAAUphD,OAAOwP,KAAKyxC,GAAYpiD,KAAI,SAACoN,GACvC,IAAKi1C,EAAKj1C,GAEN,OADA0C,QAAQvT,MAARuT,GAAAA,OAAiBs/B,EAAjB,yBAAwChiC,KAAAA,EAI5C,IAAI1L,EAAQ0gD,EAAWh1C,GACnB1R,EAAO2mD,EAAKj1C,GAMhB,GAJoB,iBAAT1R,IACPA,EAAO,CAAC8lB,KAAM9lB,IAGA,WAAdA,EAAK8lB,MAGL,IAFY2gC,EAAazgD,EAAOggD,EAAR,oBAAkCt0C,EAAlC,SAGpB,OAAO,OAER,GAAIo1C,EAAO9gD,KAAUhG,EAAK8lB,KAE7B,OADA1R,QAAQvT,MAARuT,GAAAA,OAAiBs/B,EAAjB,YAA2BhiC,EAA3B,8BAAoD1R,EAAK8lB,KAAzD,0BAAoF9f,GAApF8gD,gBAAAA,EAIJ,GAAI9mD,EAAKomD,cAAgBpmD,EAAKomD,aAAaz/C,OAEvC,IADA,IAAIA,EAAS3G,EAAKomD,aAAaz/C,OACtBF,EAAI,EAAGA,EAAIE,EAAQF,IAAK,OACAzG,EAAKomD,aAAa3/C,GAA1Cy/C,EADwBa,EACxBb,YAAaliD,EADW+iD,EACX/iD,QAClB,IAAKkiD,EAAYlgD,EAAO0gD,GAEpB,OADAtyC,QAAQvT,MAARuT,GAAAA,OAAiBs/B,EAAjB,YAA2BhiC,EAA3B,2BAAiD1N,KAAAA,EAM7D,OAAIhE,EAAKkmD,cAAgBlmD,EAAKkmD,YAAYlgD,EAAO0gD,IAC7CtyC,QAAQvT,MAARuT,GAAAA,OAAiBs/B,EAAjB,YAA2BhiC,EAA3B,2BAAiD1R,EAAKgE,WAAAA,GAItDhE,EAAKimD,cAAoD,IAArCjmD,EAAKimD,YAAYzjC,QAAQxc,IAC7CoO,QAAQvT,MAARuT,GAAAA,OAAiBs/B,EAAjB,YAA2BhiC,EAA3B,yCAA+DyD,KAAKC,UAAUpV,EAAKimD,aAAnF,cAAqGjgD,EAArG,qBAIAhG,EAAKqmD,WACOI,EAAazgD,EAAOhG,EAAKqmD,SAAb,oBAAoC30C,EAApC,UAiChC,OAvBKk1C,GACDC,EAAQr/C,KAARq/C,MAAAA,EAAOG,EAASvhD,OAAOwP,KAAK0xC,GAAMriD,KAAI,SAACoN,GACnC,IAAI1R,EAAO2mD,EAAKj1C,GAKhB,GAJoB,iBAAT1R,IACPA,EAAO,CAAC8lB,KAAM9lB,IAGdA,EAAKmmD,UAAW,CAChB,IAAIA,EAAYnmD,EAAKmmD,UAKrB,GAJyB,mBAAdA,IACPA,EAAYA,EAAUO,IAGtBP,QAAAA,IAAaO,EAAWh1C,GAExB,OADA0C,QAAQvT,MAARuT,GAAAA,OAAiBs/B,EAAjB,mCAAkDhiC,EAAlD,SAKR,OAAO,OAIRm1C,EAAQI,QAAO,SAACC,EAAK5rB,GACxB,OAAO4rB,GAAO5rB,KAAAA,GAUtB,SAASghB,EAAejE,GACpB,OAAOoO,EAAapO,EAAQ2N,EAAa,qBAa7Ch0B,EAAOhgB,QAAU,CACb4yC,SAtIJ,SAAkBz1B,EAAOkpB,GACrB,IAAI8O,EAAaX,EAAcr3B,GAC3Bi4B,EAAgB9K,EAAejE,GAEnC,OAAO8O,GAAcC,GAmIrB9K,eAAAA,EACAkK,cAAAA,EACA7D,iBARJ,SAA0B+B,GACtB,OAAO+B,EAAa/B,EAAU4B,EAAe,wDVzXjD","sources":["../../../src/index.ts","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction-constants.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js"],"sourcesContent":[null,"import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (this._message) {\n      if (JSON.stringify(this.toJSON()) !== JSON.stringify(this._json)) {\n        throw new Error(\n          'Transaction message mutated after being populated from Message',\n        );\n      }\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: number;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        BufferLayout.ns64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'RequestUnits' | 'RequestHeapFrame';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n\n  /** Additional fee to pay */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport crossFetch from 'cross-fetch';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: typeof crossFetch,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : crossFetch;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: typeof crossFetch;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction({\n        recentBlockhash: originalTx.recentBlockhash,\n        nonceInfo: originalTx.nonceInfo,\n        feePayer: originalTx.feePayer,\n        signatures: [...originalTx.signatures],\n      });\n      transaction.instructions = transactionOrMessage.instructions;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.6\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"],"names":["Wallet","EventEmitter","constructor","provider","_network","Map","e","_injectedProvider","source","window","origin","_providerUrl","_a","_popup","data","method","newPublicKey","PublicKey","params","publicKey","_publicKey","equals","handleDisconnect","_autoApprove","autoApprove","emit","result","error","promises","_responsePromises","get","id","resolve","reject","Error","disconnect","a","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","handleConnect","_handlerAdded","addEventListener","handleMessage","_beforeUnload","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","_nextRequestId","set","jsonrpc","_b","_c","_d","focus","connect","close","sign","display","Uint8Array","response","signature","bs58","signTransaction","transaction","message","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman","toBuffer","arr","Buffer","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","utils","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","endian","start","end","len","k","m","b","d","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","key","Hash","inner","outer","_init","hmac","exports","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","off","_logLevel","_globalLogger","_normalizeError","missing","form","normalize","join","String","fromCharCode","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","MAX_SEED_LENGTH","_bn","undefined","isPublicKeyData","decoded","BN","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","neq25519","set25519","gf1","unpack25519","S","M","Z","pow2523","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","feePayer","nonceInfo","_message","_json","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","_addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","setTimeout","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","ComputeBudgetProgram","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","methods","Request","input","credentials","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","withCredentials","responseType","setRequestHeader","onreadystatechange","readyState","send","polyfill","ponyfill","ctx","module","objToString","objKeys","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","crossFetch","fetchWithMiddleware","modifiedFetchArgs","modifiedUrl","modifiedOptions","RpcClient","agent","too_many_requests_retries","waitTime","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","promiseTimeout","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","round","isNum","alphabet","caseChanged","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","baseOut","div","yL","yz","qc","q","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","coeffToString","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","zeroes","precision","_result$split2","_slicedToArray","_base$split2","_base$split2$","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","validator","loader","unformatter","formatter","manipulate","Numbro","normalizeInput","unformat","isNaN","NaN","object","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","_toConsumableArray","reduce","acc","validInput","isFormatValid"],"sourceRoot":""}