{"version":3,"file":"static/js/344.267b3d15.chunk.js","mappings":"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","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts","app/hooks/usePoolTvl.ts","app/hooks/useMintTotalValue.ts","app/components/poolTVL.tsx","app/constant/index.ts","app/components/poolCardStatus.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/stat.config.ts","app/configs/fee.config.ts","app/configs/route.config.ts","app/configs/index.ts","app/helper/api.ts","app/model/stat.controller.ts","app/page/sideBar/components/poolCard.tsx","app/hooks/useMyLp.ts","app/model/main.controller.ts","app/hooks/pools/useSentrePools.ts","app/hooks/pools/useCommunityPools.ts","app/hooks/pools/useSearchedPools.ts","app/hooks/pools/useListPoolAddress.ts","app/hooks/pools/useFilterPools.ts","app/hooks/pools/useSortedPools.ts","app/page/sideBar/components/poolCardAction.tsx","app/page/sideBar/communityPools/index.tsx","app/page/sideBar/yourPools/listMyPools.tsx","app/hooks/pools/useYourPools.ts","app/page/sideBar/yourPools/index.tsx","shared/antd/numericInput.tsx","app/page/sideBar/newPool/selectPools.tsx","shared/hooks/useMintDecimals.ts","app/page/sideBar/newPool/amountSelect.tsx","app/helper/index.ts","app/hooks/useMintPrice.ts","app/page/sideBar/newPool/index.tsx","app/page/sideBar/sentrePools/index.tsx","app/page/sideBar/depositedPools/index.tsx","app/hooks/pools/useDepositedPools.ts","app/model/settings.controller.ts","app/components/settingsButton.tsx","app/page/sideBar/components/search.tsx","app/page/sideBar/index.tsx","app/components/swapButton.tsx","app/page/poolDetails/poolDetailsHeader.tsx","app/components/poolPrice.tsx","app/page/poolDetails/liquidityPosition/price.tsx","app/components/deposit/summary.tsx","app/components/amount.tsx","app/components/deposit/fullSide.tsx","app/components/deposit/index.tsx","app/components/withdraw/lpt.tsx","app/components/withdraw/info.tsx","app/components/withdraw/index.tsx","app/page/poolDetails/liquidityPosition/liquidityAction.tsx","app/page/poolDetails/liquidityPosition/index.tsx","app/page/poolDetails/management/FeeInput.tsx","app/page/poolDetails/management/fee.tsx","app/page/poolDetails/management/freeze.tsx","app/page/poolDetails/management/transferOwner.tsx","app/page/poolDetails/management/index.tsx","app/components/chart.tsx","app/stat/entities/daily-report.ts","app/stat/logic/daily-report.ts","shared/pdb/ipfs.ts","shared/pdb/index.ts","app/stat/entities/trans-log.ts","app/stat/adapters/solana/client.ts","app/stat/constants/transaction.ts","app/stat/helpers/date.ts","app/stat/logic/pool/poolTranslog.ts","app/stat/logic/translog.ts","app/stat/constants/sol.ts","app/stat/logic/pool/pool.ts","app/page/poolDetails/totalValueLocked.tsx","app/page/poolDetails/volume24h.tsx","app/page/poolDetails/booster/redeem/action.tsx","app/components/caption.tsx","app/components/orderStatus.tsx","app/page/poolDetails/booster/redeem/order.tsx","app/page/poolDetails/booster/redeem/index.tsx","app/hooks/useNextOrderIndex.ts","app/page/poolDetails/booster/reinvestment/confirm.tsx","app/page/poolDetails/booster/reinvestment/form.tsx","app/page/poolDetails/booster/reinvestment/discount.tsx","app/page/poolDetails/booster/reinvestment/index.tsx","app/model/retailers.controller.ts","app/page/poolDetails/booster/admin/newRetailer.tsx","app/page/poolDetails/booster/admin/retailerState.tsx","app/page/poolDetails/booster/admin/column/columnAsk.tsx","app/page/poolDetails/booster/admin/column/columnBid.tsx","app/page/poolDetails/booster/admin/column/confirmOrder.tsx","app/page/poolDetails/booster/admin/column/columnStatus.tsx","app/page/poolDetails/booster/admin/column/index.tsx","app/model/orders.controller.ts","app/page/poolDetails/booster/admin/index.tsx","app/page/poolDetails/booster/index.tsx","app/page/poolDetails/index.tsx","app/components/viewPoolButton.tsx","app/model/lpts.controller.ts","app/components/watcher/lptWatcher.tsx","app/components/watcher/retailerWatcher.tsx","app/components/watcher/orderWatcher.tsx","app/page/index.tsx","app/widget/header.tsx","app/widget/components/lptsPools/itemLPT.tsx","app/widget/components/lptsPools/index.tsx","app/widget/components/pools/itemPool.tsx","app/widget/components/pools/index.tsx","app/widget/index.tsx","shared/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","os/configs/sol.config.ts","os/configs/register.config.ts","os/configs/index.ts","os/providers/tokenProvider/supplementary.ts","os/providers/tokenProvider/index.ts","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n","import { usePool } from 'senhub/providers'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useMintTotalValue } from './useMintTotalValue'\n\nexport const usePoolTvl = (poolAddress?: string) => {\n  const { pools } = usePool()\n  const [tvl, setTvl] = useState(0)\n  const { getMintTotalValue } = useMintTotalValue()\n\n  const getTvl = useCallback(\n    async (poolAddress: string) => {\n      const poolData = pools[poolAddress]\n      if (!poolData) return 0\n      const { reserve_a, reserve_b, mint_a, mint_b } = poolData\n      const totalA = await getMintTotalValue({\n        mintAddress: mint_a,\n        amount: reserve_a,\n      })\n      const totalB = await getMintTotalValue({\n        mintAddress: mint_b,\n        amount: reserve_b,\n      })\n      return totalA + totalB\n    },\n    [getMintTotalValue, pools],\n  )\n\n  const updateTvl = useCallback(\n    async (poolAddress?: string) => {\n      if (!poolAddress) return setTvl(0)\n      const poolTvl = await getTvl(poolAddress)\n      setTvl(poolTvl)\n    },\n    [getTvl],\n  )\n\n  useEffect(() => {\n    updateTvl(poolAddress)\n  }, [updateTvl, poolAddress])\n\n  return { tvl, getTvl }\n}\n","import { useCallback } from 'react'\nimport { Swap, utils } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\nexport const useMintTotalValue = () => {\n  const { tokenProvider, getMint } = useMint()\n  const { pools } = usePool()\n\n  const getTokenUsd = useCallback(\n    async (mintAddress: string, amount: bigint) => {\n      try {\n        const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n        const ticket = tokenInfo?.extensions?.coingeckoId\n        if (!ticket) throw new Error('Cant not find coingeckoId')\n\n        const cgkData = await fetchCGK(ticket)\n        return (\n          Number(utils.undecimalize(amount, tokenInfo.decimals)) * cgkData.price\n        )\n      } catch (error) {\n        return 0\n      }\n    },\n    [tokenProvider],\n  )\n\n  const getMintTotalValue = useCallback(\n    async ({\n      mintAddress,\n      amount,\n    }: {\n      mintAddress: string\n      amount: bigint\n    }) => {\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo) return getTokenUsd(mintAddress, amount)\n\n      // Get Mint Lpt total value\n      const poolData = Object.values(pools).find(\n        (pool) => pool.mint_lpt === mintAddress,\n      )\n      if (!poolData) return 0\n      const { reserve_a, reserve_b, mint_a, mint_b } = poolData\n      if (reserve_a * reserve_b === BigInt(0)) return 0\n      const {\n        [mintAddress]: { supply },\n      } = await getMint({ address: mintAddress })\n      const { deltaA, deltaB } = Swap.oracle.withdraw(\n        amount,\n        supply,\n        reserve_a,\n        reserve_b,\n      )\n      const balanceA: number = await getMintTotalValue({\n        mintAddress: mint_a,\n        amount: deltaA,\n      })\n      const balanceB: number = await getMintTotalValue({\n        mintAddress: mint_b,\n        amount: deltaB,\n      })\n      return balanceA + balanceB\n    },\n    [getMint, getTokenUsd, tokenProvider, pools],\n  )\n  return { getMintTotalValue }\n}\n","import { numeric } from 'shared/util'\nimport { usePoolTvl } from 'app/hooks/usePoolTvl'\n\nconst PoolTVL = ({ poolAddress }: { poolAddress: string }) => {\n  const { tvl } = usePoolTvl(poolAddress)\n  return <span>${numeric(tvl).format('0,0.[00]a')}</span>\n}\n\nexport default PoolTVL\n","export enum PoolStatus {\n  Frozen = 2,\n  Active = 1,\n}\n\nexport enum OrderState {\n  Uninitialized = 0,\n  Open = 1,\n  Approved = 2,\n  Done = 3,\n  Rejected = 4,\n  Canceled = 5,\n}\n\nexport enum PoolTabs {\n  Sentre = 'sentre-pools',\n  Deposited = 'deposited-pools',\n  YourPools = 'your-pools',\n  Community = 'community-pools',\n}\n\nexport enum QueryParams {\n  address = 'poolAddress',\n  category = 'category',\n}\n\nexport const VESTING = [\n  { locktime: 7, discount: 0.05 },\n  { locktime: 30, discount: 0.25 },\n  { locktime: 60, discount: 0.35 },\n  { locktime: 90, discount: 0.4 },\n]\n","import { Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { usePool, useWallet } from 'senhub/providers'\nimport { PoolStatus } from 'app/constant'\n\nconst PoolCardStatus = ({ poolAddress }: { poolAddress: string }) => {\n  const { pools } = usePool()\n  const poolData = pools[poolAddress] || {}\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const isFrozen = poolData.state === PoolStatus.Frozen\n  const isOwner = walletAddress === poolData?.owner\n\n  return (\n    <Space>\n      {isFrozen && <IonIcon name=\"snow-outline\" style={{ fontSize: 16 }} />}\n      {isOwner && <IonIcon name=\"person-outline\" style={{ fontSize: 16 }} />}\n    </Space>\n  )\n}\n\nexport default PoolCardStatus\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Purchasing } from '@senswap/sen-js'\n\nimport { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  // For lp\n  swapAddress: string\n  taxmanAddress: string\n  senOwners: string[]\n  // For purchasing\n  sntrAddress: string\n  purchasingAddress: string\n  spltAddress: string\n  splataAddress: string\n  nodeUrl: string\n  purchasing: Purchasing\n}\n\nconst configs: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    // For lp\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n    senOwners: ['GJLqpmDxxrV9xruee2vFvEoTho7VVQHRtuHH8nfoAE54'],\n    // For purchasing\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    purchasingAddress: 'FHeonxeZFH76K57KGRWgsmE97tiupcHDjvWNKMQDmdVd',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    nodeUrl: 'https://api.devnet.solana.com',\n    get purchasing() {\n      return new Purchasing(\n        this.purchasingAddress,\n        this.spltAddress,\n        this.splataAddress,\n        this.nodeUrl,\n      )\n    },\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    // For lp\n    swapAddress: '',\n    taxmanAddress: '',\n    senOwners: [],\n    // For purchasing\n    sntrAddress: '',\n    purchasingAddress: '',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    nodeUrl: 'https://api.testnet.solana.com',\n    get purchasing() {\n      return new Purchasing(\n        this.purchasingAddress,\n        this.spltAddress,\n        this.splataAddress,\n        this.nodeUrl,\n      )\n    },\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    // For lp\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n    senOwners: ['Cs6jYywHTAgdvjxn8xG4VkJJH8DXXy7zbtatzMUWoCMG'],\n    // For purchasing\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    purchasingAddress: 'Ecw8Vh3cwwwwMsaU63mW6knKMsuaiSakVDvKxB5nyhFC',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    nodeUrl: 'https://api.mainnet-beta.solana.com',\n    get purchasing() {\n      return new Purchasing(\n        this.purchasingAddress,\n        this.spltAddress,\n        this.splataAddress,\n        this.nodeUrl,\n      )\n    },\n  },\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  baseURL: string\n}\n\nconst config: Record<Net, Config> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    baseURL: 'https://stat-dev.sentre.io',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    baseURL: 'https://stat-dev.sentre.io',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    baseURL: 'https://stat.sentre.io',\n  },\n}\n\n/**\n * Module exports\n */\nexport default config\n","import { Env } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  exoticFee: bigint\n  exoticTax: bigint\n  correlatedFee: bigint\n  correlatedTax: bigint\n}\n\nconst config: Record<Env, Config> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    exoticFee: BigInt(2500000),\n    exoticTax: BigInt(0),\n    correlatedFee: BigInt(500000),\n    correlatedTax: BigInt(0),\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    exoticFee: BigInt(2500000),\n    exoticTax: BigInt(0),\n    correlatedFee: BigInt(500000),\n    correlatedTax: BigInt(0),\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    exoticFee: BigInt(2500000),\n    exoticTax: BigInt(0),\n    correlatedFee: BigInt(500000),\n    correlatedTax: BigInt(0),\n  },\n}\n\n/**\n * Module exports\n */\nexport default config\n","import { Env } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Config = {\n  myRoute: string\n  swapRoute: string\n  farmRoute: string\n}\n\nconst config: Record<Env, Config> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    myRoute: '/app/senhub',\n    swapRoute: '/app/sen_swap',\n    farmRoute: '/app/sen_farming',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    myRoute: '/app/sen_lp',\n    swapRoute: '/app/sen_swap',\n    farmRoute: '/app/sen_farming',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    myRoute: '/app/sen_lp',\n    swapRoute: '/app/sen_swap',\n    farmRoute: '/app/sen_farming',\n  },\n}\n\n/**\n * Module exports\n */\nexport default config\n","import { net, env } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport stat from './stat.config'\nimport fee from './fee.config'\nimport route from './route.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  stat: stat[net],\n  fee: fee[env],\n  route: route[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import axios from 'axios'\n\nconst api = {\n  // Authentication header\n  auth: async (auth: boolean | object = false) => {\n    if (typeof auth === 'object') return auth\n    if (!auth) return null\n    const wallet = window.sentre.wallet\n    if (!wallet) throw new Error('Wallet is not connected')\n    const datetime = Number(new Date()) + 10000 // Valid in 10s\n    const msg = datetime.toString() + Math.floor(Math.random() * 10 ** 16)\n    const data = await wallet.signMessage(msg)\n    const authHeader = JSON.stringify(data)\n    return { Authorization: authHeader }\n  },\n  // Create\n  post: async (\n    url: string,\n    params: any = null,\n    auth: boolean | object = false,\n  ) => {\n    const authHeader = await api.auth(auth)\n    try {\n      const { data } = await axios({\n        method: 'post',\n        url: url,\n        data: params,\n        headers: authHeader,\n      })\n      if (data.status === 'ERROR') throw new Error(data.error)\n      return data\n    } catch (er: any) {\n      if (!er.response) throw new Error(er.message)\n      const {\n        response: {\n          data: { error },\n        },\n      } = er\n      throw new Error(error)\n    }\n  },\n  // Read\n  get: async (\n    url: string,\n    params: any = null,\n    auth: boolean | object = false,\n  ) => {\n    const authHeader = await api.auth(auth)\n    try {\n      const { data } = await axios({\n        method: 'get',\n        url: url,\n        params: params,\n        headers: authHeader,\n      })\n      if (data.status === 'ERROR') throw new Error(data.error)\n      return data\n    } catch (er: any) {\n      if (!er.response) throw new Error(er.message)\n      const {\n        response: {\n          data: { error },\n        },\n      } = er\n      throw new Error(error)\n    }\n  },\n  // Update\n  put: async (\n    url: string,\n    params: any = null,\n    auth: boolean | object = false,\n  ) => {\n    const authHeader = await api.auth(auth)\n    try {\n      const { data } = await axios({\n        method: 'put',\n        url: url,\n        data: params,\n        headers: authHeader,\n      })\n      if (data.status === 'ERROR') throw new Error(data.error)\n      return data\n    } catch (er: any) {\n      if (!er.response) throw new Error(er.message)\n      const {\n        response: {\n          data: { error },\n        },\n      } = er\n      throw new Error(error)\n    }\n  },\n  // Delete\n  delete: async (\n    url: string,\n    params: any = null,\n    auth: boolean | object = false,\n  ) => {\n    const authHeader = await api.auth(auth)\n    try {\n      const { data } = await axios({\n        method: 'delete',\n        url: url,\n        data: params,\n        headers: authHeader,\n      })\n      if (data.status === 'ERROR') throw new Error(data.error)\n      return data\n    } catch (er: any) {\n      if (!er.response) throw new Error(er.message)\n      const {\n        response: {\n          data: { error },\n        },\n      } = er\n      throw new Error(error)\n    }\n  },\n}\n\nexport default api\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport config from 'app/configs'\n\nimport api from 'app/helper/api'\n\nexport enum StatPool {\n  endpointDetail = 'public/api/v1/detail/pools',\n}\n\ntype StatDetails = {\n  tvl: number\n  tvl24h: number\n  volume: number\n  volume24h: number\n  fee: number\n  fee24h: number\n  roi: number\n}\n\ntype StatData = {\n  details: StatDetails\n}\n\nconst {\n  stat: { baseURL },\n} = config\n\nexport type State = Record<string, StatData>\n\nconst NAME = 'stat'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const fetchStatPoolData = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/fetchStatPoolData`, async ({ address }, { getState }) => {\n  try {\n    const state = getState()\n    const cacheData = state.stat[address]\n    if (cacheData) return { [address]: cacheData }\n\n    const details = await api.get(\n      `${baseURL}/${StatPool.endpointDetail}/${address}`,\n    )\n\n    return { [address]: { details } }\n  } catch (error) {\n    return {}\n  }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      fetchStatPoolData.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { Fragment, ReactElement, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Row, Col, Card, Space, Typography, Divider, Tooltip } from 'antd'\nimport PoolTVL from 'app/components/poolTVL'\nimport PoolCardStatus from 'app/components/poolCardStatus'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport { AppState } from 'app/model'\nimport { fetchStatPoolData } from 'app/model/stat.controller'\nimport { PoolStatus } from 'app/constant'\nimport { usePool } from 'senhub/providers'\nimport { useMyLp } from 'app/hooks/useMyLp'\n\nconst PoolCard = ({\n  poolAddress,\n  onClick = () => {},\n  action = <Fragment />,\n  selected = false,\n  apy,\n  myLp,\n}: {\n  poolAddress: string\n  onClick?: (poolAddress: string) => void\n  action?: ReactElement\n  selected?: boolean\n  apy?: boolean\n  myLp?: boolean\n}) => {\n  const dispatch = useDispatch()\n  const details = useSelector(\n    (state: AppState) => state.stat[poolAddress]?.details,\n  )\n  const {\n    pools: { [poolAddress]: poolData },\n  } = usePool()\n  const myLpValue = useMyLp(poolAddress)\n\n  const apyValue = useMemo(() => {\n    if (!details) return 0\n    const roi = details.roi || 0\n    return Math.pow(1 + roi / 100, 365) - 1\n  }, [details])\n\n  useEffect(() => {\n    if (!account.isAddress(poolAddress)) return\n    dispatch(fetchStatPoolData({ address: poolAddress }))\n  }, [dispatch, poolAddress])\n\n  const frozen = poolData?.state === PoolStatus.Frozen\n  const cardStyle = selected ? 'card-active lp-card' : 'lp-card'\n\n  return (\n    <Card\n      className={cardStyle}\n      bodyStyle={{ padding: 12, height: 78 }}\n      onClick={() => onClick(poolAddress)}\n      bordered={selected}\n      hoverable\n    >\n      <Row gutter={[12, 12]} wrap={false} align=\"middle\">\n        <Col span={24} flex=\"auto\">\n          <Space direction=\"vertical\">\n            <Space>\n              <MintAvatar mintAddress={poolData?.mint_lpt} size={24} />\n              <Typography.Text type={frozen ? 'secondary' : undefined}>\n                <MintSymbol mintAddress={poolData?.mint_lpt} />\n              </Typography.Text>\n            </Space>\n            <Space>\n              <Tooltip title=\"The Total Value Locked is roughly estimated and perhaps inaccurate because unknown tokens ain't involved in the computation.\">\n                <Typography.Text type=\"secondary\" className=\"caption\">\n                  TVL:\n                </Typography.Text>\n              </Tooltip>\n              <Typography.Text>\n                <PoolTVL poolAddress={poolAddress} />\n              </Typography.Text>\n              {/* Apy */}\n              {apy && (\n                <Fragment>\n                  <Divider type=\"vertical\" style={{ margin: 0 }} />\n                  <Typography.Text type=\"secondary\" className=\"caption\">\n                    APY:\n                  </Typography.Text>\n                  <Typography.Text>\n                    {numeric(apyValue).format('0,0.[00]%')}\n                  </Typography.Text>\n                </Fragment>\n              )}\n              {/* MyLp */}\n              {myLp && (\n                <Fragment>\n                  <Divider type=\"vertical\" style={{ margin: 0 }} />\n                  <Typography.Text type=\"secondary\" className=\"caption\">\n                    My LP:\n                  </Typography.Text>\n                  <Typography.Text>\n                    {numeric(myLpValue.balance).format('0,0.[00]')}\n                  </Typography.Text>\n                </Fragment>\n              )}\n            </Space>\n          </Space>\n        </Col>\n        <Col>\n          <Space size={2}>\n            <PoolCardStatus poolAddress={poolAddress} />\n            {action}\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default PoolCard\n","import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { AppState } from 'app/model'\n\nconst LPT_DECIMALS = 9\n\nexport const useMyLp = (poolAddress: string) => {\n  const { lpts } = useSelector((state: AppState) => state)\n\n  const { amount, balance } = useMemo(() => {\n    const addr =\n      Object.keys(lpts).find((addr) => lpts[addr].pool === poolAddress) || ''\n    const amount = lpts[addr]?.amount || BigInt(0)\n    const balance = Number(utils.undecimalize(amount, LPT_DECIMALS))\n    return { amount, balance }\n  }, [lpts, poolAddress])\n\n  return {\n    amount,\n    balance,\n  }\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  selectedPoolAddress: string\n  visible: boolean\n  selectedCategoryPool: string\n  search: string\n  prevSelectedPool: boolean\n}\n\nconst NAME = 'main'\nconst initialState: State = {\n  selectedPoolAddress: '',\n  visible: false,\n  selectedCategoryPool: '',\n  search: '',\n  prevSelectedPool: false,\n}\n\n/**\n * Actions\n */\n\nexport const selectPool = createAsyncThunk(\n  `${NAME}/selectPool`,\n  async (poolAddress: string) => {\n    return { selectedPoolAddress: poolAddress, selectedLptAddress: '' }\n  },\n)\nexport const selectCategoryPool = createAsyncThunk(\n  `${NAME}/selectCategoryPool`,\n  async (category: string) => {\n    return { selectedCategoryPool: category }\n  },\n)\nexport const handleOpenDrawer = createAsyncThunk(\n  `${NAME}/handleOpenDrawer`,\n  async (condition: boolean) => {\n    return { visible: condition }\n  },\n)\n\nexport const checkPrevSelectedPool = createAsyncThunk(\n  `${NAME}/checkPrevSelectedPool`,\n  async (condition: boolean) => {\n    return { prevSelectedPool: condition }\n  },\n)\n\nexport const onSearch = createAsyncThunk(\n  `${NAME}/onSearch`,\n  async (search: string) => {\n    return { search }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        selectPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        handleOpenDrawer.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        selectCategoryPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        onSearch.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        checkPrevSelectedPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePool } from 'senhub/providers'\nimport configs from 'app/configs'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst {\n  sol: { senOwners },\n} = configs\n\nexport const useSentrePools = () => {\n  const [sentrePools, setSentrePools] = useState<PoolsState>({})\n  const { pools } = usePool()\n\n  const checkSentrePools = useCallback(\n    (poolAddress: string) => senOwners.includes(pools[poolAddress].owner),\n    [pools],\n  )\n\n  const filterSentrePools = useCallback(\n    (pools: PoolsState) => {\n      const newSentrePools: PoolsState = {}\n      for (const poolAddress in pools)\n        if (checkSentrePools(poolAddress))\n          newSentrePools[poolAddress] = pools[poolAddress]\n      return setSentrePools(newSentrePools)\n    },\n    [checkSentrePools],\n  )\n\n  useEffect(() => {\n    filterSentrePools(pools)\n  }, [pools, filterSentrePools])\n\n  return { sentrePools, filterSentrePools, checkSentrePools }\n}\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePool } from 'senhub/providers'\nimport { PoolsState } from 'os/store/pools.reducer'\nimport { useSentrePools } from './useSentrePools'\n\nexport const useCommunityPools = () => {\n  const [communityPools, setCommunityPools] = useState<PoolsState>({})\n  const { pools } = usePool()\n  const { checkSentrePools } = useSentrePools()\n\n  const checkCommunityPools = useCallback(\n    (poolAddress: string) => !checkSentrePools(poolAddress),\n    [checkSentrePools],\n  )\n\n  const filterCommunityPools = useCallback(\n    (pools: PoolsState) => {\n      const newCommunityPools: PoolsState = {}\n      for (const poolAddress in pools)\n        if (checkCommunityPools(poolAddress))\n          newCommunityPools[poolAddress] = pools[poolAddress]\n      return setCommunityPools(newCommunityPools)\n    },\n    [checkCommunityPools],\n  )\n\n  useEffect(() => {\n    filterCommunityPools(pools)\n  }, [pools, filterCommunityPools])\n\n  return { communityPools, filterCommunityPools, checkCommunityPools }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\nimport { forceCheck } from '@senswap/react-lazyload'\n\nimport { PoolsState } from 'os/store/pools.reducer'\nimport { useMint } from 'senhub/providers'\nimport { AppState } from 'app/model'\n\nconst KEYSIZE = 3\nlet timeOutForceCheck: NodeJS.Timeout\n\nexport const useSearchedPools = (pools: PoolsState) => {\n  const { tokenProvider } = useMint()\n  const [searchedPools, setSearchedPools] = useState<PoolsState>({})\n  const {\n    main: { search },\n  } = useSelector((state: AppState) => state)\n\n  const checkPool = useCallback(\n    async (poolAddress: string) => {\n      if (account.isAddress(search) && search === poolAddress) return true\n      const tokenInfos = await tokenProvider.find(search)\n      if (!tokenInfos) return false\n\n      const { mint_a, mint_b } = pools[poolAddress]\n      const mintAddress = tokenInfos.map(({ address }) => address)\n      if (mintAddress.includes(mint_a)) return true\n      if (mintAddress.includes(mint_b)) return true\n      return false\n    },\n    [pools, search, tokenProvider],\n  )\n\n  const searchPools = useCallback(\n    async (pools: PoolsState) => {\n      if (!search || search.length < KEYSIZE) return setSearchedPools(pools)\n      const newSearchedPools: PoolsState = {}\n      for (const poolAddress in pools) {\n        const displayPool = await checkPool(poolAddress)\n        if (displayPool) newSearchedPools[poolAddress] = pools[poolAddress]\n      }\n      return setSearchedPools(newSearchedPools)\n    },\n    [checkPool, search],\n  )\n\n  useEffect(() => {\n    searchPools(pools)\n    if (timeOutForceCheck) clearTimeout(timeOutForceCheck)\n    timeOutForceCheck = setTimeout(forceCheck, 500)\n  }, [pools, searchPools])\n\n  return { searchedPools }\n}\n","import { useMemo } from 'react'\n\nimport { PoolsState } from 'os/store/pools.reducer'\nimport { useFilterPools } from './useFilterPools'\nimport { useSearchedPools } from './useSearchedPools'\nimport { useSortedPools } from './useSortedPools'\n\nexport const useListPoolAddress = (pools: PoolsState) => {\n  const { filteredPools } = useFilterPools(pools)\n  const { searchedPools } = useSearchedPools(filteredPools)\n  const { sortedPools } = useSortedPools(searchedPools)\n  const listPoolAddress = useMemo(() => Object.keys(sortedPools), [sortedPools])\n  return { listPoolAddress }\n}\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { PoolsState } from 'os/store/pools.reducer'\nimport { AppState } from 'app/model'\nimport { useSelector } from 'react-redux'\n\n/**\n * Filter & display Archived Pool with showArchived option\n */\nexport const useFilterPools = (pools: PoolsState) => {\n  const [filteredPools, setFilterPools] = useState<PoolsState>({})\n  const {\n    settings: { showArchived },\n  } = useSelector((state: AppState) => state)\n\n  const checkArchivedPools = useCallback(\n    (poolAddress: string) => {\n      const { reserve_a, reserve_b } = pools[poolAddress] || {}\n      return !reserve_a || !reserve_b\n    },\n    [pools],\n  )\n\n  const filterPools = useCallback(\n    (pools: PoolsState) => {\n      const displayPools: PoolsState = {}\n      for (const poolAddress in pools)\n        if (showArchived || !checkArchivedPools(poolAddress))\n          displayPools[poolAddress] = pools[poolAddress]\n      return setFilterPools(displayPools)\n    },\n    [checkArchivedPools, showArchived],\n  )\n\n  useEffect(() => {\n    filterPools(pools)\n  }, [pools, filterPools])\n\n  return { filteredPools }\n}\n","import { usePoolTvl } from 'app/hooks/usePoolTvl'\nimport { useCallback, useEffect, useState } from 'react'\n\nimport { PoolsState } from 'os/store/pools.reducer'\n\nexport const useSortedPools = (pools: PoolsState) => {\n  const [sortedPools, setSortedPools] = useState<PoolsState>({})\n  const { getTvl } = usePoolTvl()\n\n  const sortPools = useCallback(\n    async (pools: PoolsState) => {\n      let listPoolAddress = Object.keys(pools)\n      const newSortedPools: PoolsState = {}\n      // Get tvl all pools\n      const poolsTvl: Record<string, number> = {}\n      await Promise.all(\n        listPoolAddress.map(\n          async (addr) => (poolsTvl[addr] = await getTvl(addr)),\n        ),\n      )\n      // Sort with Tvl\n      const shortedAddress = listPoolAddress.sort(\n        (first, second) => poolsTvl[second] - poolsTvl[first],\n      )\n      for (const poolAddress of shortedAddress)\n        newSortedPools[poolAddress] = pools[poolAddress]\n      return setSortedPools(newSortedPools)\n    },\n    [getTvl],\n  )\n\n  useEffect(() => {\n    sortPools(pools)\n  }, [pools, sortPools])\n\n  return { sortedPools }\n}\n","import { Button } from 'antd'\nimport configs from 'app/configs'\nimport { PoolTabs, QueryParams } from 'app/constant'\nimport { handleOpenDrawer, selectPool } from 'app/model/main.controller'\nimport { MouseEvent, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst {\n  route: { myRoute },\n} = configs\n\nconst PoolCardAction = ({\n  poolAddress,\n  category,\n}: {\n  poolAddress: string\n  category: PoolTabs\n}) => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const setActivePoolAddress = useCallback(\n    async (address: string) => {\n      await dispatch(selectPool(address))\n      await dispatch(handleOpenDrawer(false))\n      return history.push(\n        `${myRoute}?${QueryParams.address}=${address}&${QueryParams.category}=${category}`,\n      )\n    },\n    [category, dispatch, history],\n  )\n\n  return (\n    <Button\n      type=\"text\"\n      onClick={(e: MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation()\n        setActivePoolAddress(poolAddress)\n      }}\n      icon={\n        <IonIcon\n          name=\"arrow-forward-outline\"\n          style={{ fontSize: 12, color: '#7A7B85' }}\n        />\n      }\n    />\n  )\n}\nexport default PoolCardAction\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Col, Empty, Row } from 'antd'\nimport PoolCard from '../components/poolCard'\n\nimport configs from 'app/configs'\nimport { AppDispatch, AppState } from 'app/model'\nimport {\n  checkPrevSelectedPool,\n  handleOpenDrawer,\n  selectPool,\n} from 'app/model/main.controller'\nimport { PoolTabs, QueryParams } from 'app/constant'\nimport { useCommunityPools } from 'app/hooks/pools/useCommunityPools'\nimport { useListPoolAddress } from 'app/hooks/pools/useListPoolAddress'\nimport PoolCardAction from '../components/poolCardAction'\n\nconst {\n  route: { myRoute },\n} = configs\n\nconst CommunityPools = () => {\n  const history = useHistory()\n  const dispatch = useDispatch<AppDispatch>()\n  const { selectedPoolAddress } = useSelector((state: AppState) => state.main)\n  const { communityPools } = useCommunityPools()\n  const { listPoolAddress } = useListPoolAddress(communityPools)\n\n  const setActivePoolAddress = useCallback(\n    async (address: string) => {\n      await dispatch(selectPool(address))\n      await dispatch(handleOpenDrawer(false))\n      return history.push(\n        `${myRoute}?${QueryParams.address}=${address}&${QueryParams.category}=${PoolTabs.Community}`,\n      )\n    },\n    [dispatch, history],\n  )\n\n  return (\n    <Row gutter={[12, 12]} justify=\"center\">\n      {!listPoolAddress.length ? (\n        <Col>\n          <Empty />\n        </Col>\n      ) : (\n        listPoolAddress.map((poolAddress) => {\n          if (poolAddress === selectedPoolAddress)\n            dispatch(checkPrevSelectedPool(true))\n          return (\n            <Col id={poolAddress} span={24} key={poolAddress}>\n              <LazyLoad height={78} overflow>\n                <PoolCard\n                  poolAddress={poolAddress}\n                  action={\n                    <PoolCardAction\n                      poolAddress={poolAddress}\n                      category={PoolTabs.Community}\n                    />\n                  }\n                  onClick={setActivePoolAddress}\n                  selected={selectedPoolAddress === poolAddress}\n                  apy\n                />\n              </LazyLoad>\n            </Col>\n          )\n        })\n      )}\n    </Row>\n  )\n}\n\nexport default CommunityPools\n","import { ReactElement, Fragment } from 'react'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Empty } from 'antd'\n\nimport PoolCard from '../components/poolCard'\nimport { useYourPools } from 'app/hooks/pools/useYourPools'\nimport { useListPoolAddress } from 'app/hooks/pools/useListPoolAddress'\n\nconst ListMyPools = ({\n  onClick = () => {},\n  selectedPoolAddress,\n  action = () => <Fragment />,\n}: {\n  onClick?: (poolAddress: string) => void\n  selectedPoolAddress?: string\n  action?: (poolAddress: string) => ReactElement\n}) => {\n  const { yourPools } = useYourPools()\n  const { listPoolAddress } = useListPoolAddress(yourPools)\n\n  return (\n    <Row gutter={[12, 12]} justify=\"center\">\n      {!listPoolAddress.length && (\n        <Col>\n          <Empty />\n        </Col>\n      )}\n      {listPoolAddress.map((poolAddress) => (\n        <Col span={24} key={poolAddress}>\n          <LazyLoad height={78} overflow>\n            <PoolCard\n              poolAddress={poolAddress}\n              action={action(poolAddress)}\n              onClick={() => onClick(poolAddress)}\n              selected={selectedPoolAddress === poolAddress}\n              myLp\n            />\n          </LazyLoad>\n        </Col>\n      ))}\n    </Row>\n  )\n}\n\nexport default ListMyPools\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePool, useWallet } from 'senhub/providers'\nimport { PoolsState } from 'os/store/pools.reducer'\nimport { useSelector } from 'react-redux'\nimport { AppState } from 'app/model'\n\nexport const useYourPools = () => {\n  const [yourPools, setYourPools] = useState<PoolsState>({})\n  const lpts = useSelector((state: AppState) => state.lpts)\n  const { wallet } = useWallet()\n  const { pools } = usePool()\n\n  const getYourPools = useCallback(() => {\n    const newYourPools: PoolsState = {}\n    for (const lptAddr in lpts) {\n      const { pool } = lpts[lptAddr]\n      const poolData = pools[pool]\n      if (poolData && poolData.owner === wallet.address)\n        newYourPools[pool] = poolData\n    }\n    return setYourPools(newYourPools)\n  }, [lpts, pools, wallet.address])\n\n  useEffect(() => {\n    getYourPools()\n  }, [getYourPools])\n\n  return { yourPools }\n}\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport { Row, Col, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport ListMyPools from './listMyPools'\n\nimport { handleOpenDrawer, selectPool } from 'app/model/main.controller'\nimport { AppDispatch, AppState } from 'app/model'\nimport configs from 'app/configs'\nimport { PoolTabs, QueryParams } from 'app/constant'\n\nconst {\n  route: { myRoute },\n} = configs\n\nconst YourPools = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    main: { selectedPoolAddress },\n  } = useSelector((state: AppState) => state)\n  const history = useHistory()\n\n  const setActiveAddress = useCallback(\n    (poolAddress: string) => {\n      dispatch(selectPool(poolAddress))\n      dispatch(handleOpenDrawer(false))\n\n      return history.push(\n        `${myRoute}?${QueryParams.address}=${poolAddress}&${QueryParams.category}=${PoolTabs.YourPools}`,\n      )\n    },\n    [dispatch, history],\n  )\n  const action = useCallback(\n    (poolAddress) => (\n      <Button\n        type=\"text\"\n        onClick={() => setActiveAddress(poolAddress)}\n        size=\"small\"\n        icon={\n          <IonIcon\n            name=\"arrow-forward-outline\"\n            style={{ fontSize: 12, color: '#7A7B85' }}\n          />\n        }\n      />\n    ),\n    [setActiveAddress],\n  )\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <ListMyPools\n          action={action}\n          selectedPoolAddress={selectedPoolAddress}\n          onClick={setActiveAddress}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default YourPools\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { Space, Select, Divider, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport Avatar from 'antd/lib/avatar/avatar'\n\nconst DEFAULT_VALUE = 'Select'\n\nconst SelectPools = ({\n  mintAddresses,\n  activeMintAddress,\n  onSelect,\n}: {\n  mintAddresses: string[]\n  activeMintAddress: string\n  onSelect: (mintAddress: string) => void\n}) => {\n  return (\n    <Select\n      onChange={onSelect}\n      value={activeMintAddress || DEFAULT_VALUE}\n      bordered={false}\n      suffixIcon={<Divider type=\"vertical\" style={{ margin: 0 }} />}\n      style={{ marginLeft: -7 }}\n    >\n      <Select.Option value={DEFAULT_VALUE}>\n        <Space>\n          <Avatar>\n            <IonIcon name=\"help-outline\" />\n          </Avatar>\n          <Typography.Text>{DEFAULT_VALUE}</Typography.Text>\n        </Space>\n      </Select.Option>\n      {mintAddresses.map((mintAddress, i) => {\n        return (\n          <Select.Option key={i} value={mintAddress}>\n            <Space>\n              <MintAvatar mintAddress={mintAddress} />\n              <MintSymbol mintAddress={mintAddress} />\n            </Space>\n          </Select.Option>\n        )\n      })}\n    </Select>\n  )\n}\n\nexport default SelectPools\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from 'senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook needs MintProvider for work.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useCallback, useEffect, useState } from 'react'\nimport { useAccount, useWallet } from 'senhub/providers'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Button, Typography, Space } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\nimport SelectPools from './selectPools'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nexport type AmountSelectOnChnage = {\n  amount: bigint\n  mintAddress: string\n}\n\nconst AmountSelect = ({\n  mintAddresses,\n  onChange,\n  suggestion,\n}: {\n  mintAddresses: string[]\n  onChange: ({ amount, mintAddress }: AmountSelectOnChnage) => void\n  suggestion?: number\n}) => {\n  const [amount, setAmount] = useState('')\n  const [activeMintAddress, setActiveMintAddress] = useState<string>('Select')\n  const [accountAddress, setAccountAddress] = useState('')\n  const { accounts } = useAccount()\n  const decimals = useMintDecimals(activeMintAddress) || 0\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const { amount: a } = accounts[accountAddress] || { amount: '0' }\n  const balance = utils.undecimalize(a, decimals) || '0'\n\n  const getAccountAddress = useCallback(async () => {\n    const { splt } = window.sentre\n    if (!account.isAddress(activeMintAddress)) return\n    const address = await splt.deriveAssociatedAddress(\n      walletAddress,\n      activeMintAddress,\n    )\n    return setAccountAddress(address)\n  }, [activeMintAddress, walletAddress])\n\n  const onAmount = useCallback(\n    async (val: string) => {\n      await setAmount(val)\n      if (!account.isAddress(activeMintAddress)) return\n      if (!decimals)\n        return onChange({ amount: BigInt(0), mintAddress: activeMintAddress })\n      return onChange({\n        amount: utils.decimalize(val, decimals),\n        mintAddress: activeMintAddress,\n      })\n    },\n    [onChange, decimals, activeMintAddress],\n  )\n\n  const onSelect = useCallback(\n    async (mintAddress) => {\n      await setActiveMintAddress(mintAddress)\n      // Return amount\n      if (!decimals || !parseFloat(amount))\n        return onChange({ amount: BigInt(0), mintAddress })\n      return onChange({\n        amount: utils.decimalize(amount, decimals),\n        mintAddress,\n      })\n    },\n    [onChange, decimals, amount],\n  )\n\n  useEffect(() => {\n    getAccountAddress()\n  }, [getAccountAddress])\n\n  return (\n    <Row gutter={[4, 4]}>\n      <NumericInput\n        placeholder=\"0\"\n        value={amount}\n        onValue={onAmount}\n        prefix={\n          <SelectPools\n            mintAddresses={mintAddresses}\n            activeMintAddress={activeMintAddress}\n            onSelect={onSelect}\n          />\n        }\n        size=\"large\"\n        suffix={\n          <Button\n            type=\"text\"\n            style={{ marginRight: -7 }}\n            onClick={() => onAmount(balance)}\n          >\n            MAX\n          </Button>\n        }\n        max={balance}\n      />\n      <Col span={24}>\n        <Row gutter={[4, 4]}>\n          <Col span={24} flex=\"auto\">\n            {suggestion ? (\n              <Space size={4}>\n                <Typography.Text type=\"secondary\" className=\"caption\">\n                  Recommend:\n                </Typography.Text>\n                <Typography.Text\n                  type=\"danger\"\n                  className=\"caption\"\n                  onClick={() => onAmount((suggestion || 0).toString())}\n                >\n                  {numeric(suggestion).format('0,0.[0000]a')}\n                </Typography.Text>\n                <Typography.Text type=\"secondary\" className=\"caption\">\n                  <MintSymbol mintAddress={activeMintAddress} />\n                </Typography.Text>\n              </Space>\n            ) : null}\n          </Col>\n          <Col>\n            <Typography.Text type=\"secondary\" className=\"caption\">\n              Available: {numeric(balance).format('0,0.[0000]')}{' '}\n              <MintSymbol mintAddress={activeMintAddress} />\n            </Typography.Text>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default AmountSelect\n","import { PoolData } from '@senswap/sen-js'\nimport { explorer } from 'shared/util'\n\nexport const notifySuccess = (content: string, txId: string) => {\n  return window.notify({\n    type: 'success',\n    description: `${content} successfully. Click to view details.`,\n    onClick: () => window.open(explorer(txId), '_blank'),\n  })\n}\n\nexport const notifyError = (er: any) => {\n  return window.notify({\n    type: 'error',\n    description: er.message,\n  })\n}\n\nexport const extractReserve = (mintAddress: string, poolData: PoolData) => {\n  const { mint_a, mint_b, reserve_a, reserve_b } = poolData\n  if (mintAddress === mint_a) return reserve_a\n  if (mintAddress === mint_b) return reserve_b\n  return BigInt(0)\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\n\nimport { useMint, usePool } from 'senhub/providers'\nimport { fetchCGK } from 'shared/util'\n\n/**\n * @param mintAddress\n * @param strict true: if has token unknown => returns 0\n * @returns\n */\nexport const useMintPrice = (mintAddress: string, strict?: boolean) => {\n  const { tokenProvider, getMint, getDecimals } = useMint()\n  const { pools } = usePool()\n  const [mintPrice, setMintPrice] = useState(0)\n\n  const getTokenPrice = useCallback(\n    async (tokenAddress: string) => {\n      const tokenInfo = await tokenProvider.findByAddress(tokenAddress)\n      const ticket = tokenInfo?.extensions?.coingeckoId\n      if (!ticket) {\n        if (strict) throw new Error('Unknown Token')\n        return 0\n      }\n      const cgkData = await fetchCGK(ticket)\n      const price = cgkData.price\n      if (!price) {\n        if (strict) throw new Error('Not find on Cgk')\n        return 0\n      }\n      return price\n    },\n    [strict, tokenProvider],\n  )\n\n  const getTokenUsd = useCallback(\n    async (mintAddress: string, amountBigint: bigint) => {\n      const mintPrice = await getTokenPrice(mintAddress)\n      const mintDecimals = await getDecimals(mintAddress)\n      const amount = Number(utils.undecimalize(amountBigint, mintDecimals))\n      return amount * mintPrice\n    },\n    [getDecimals, getTokenPrice],\n  )\n\n  const getMintLptPrice = useCallback(\n    async (lptAddress: string) => {\n      const poolData = Object.values(pools).find(\n        (pool) => pool.mint_lpt === lptAddress,\n      )\n      if (!poolData) return 0\n      const { reserve_a, reserve_b, mint_a, mint_b } = poolData\n      if (reserve_a * reserve_b === BigInt(0)) return 0\n      const {\n        [lptAddress]: { supply },\n      } = await getMint({ address: lptAddress })\n      const balanceA: number = await getTokenUsd(mint_a, reserve_a)\n      const balanceB: number = await getTokenUsd(mint_b, reserve_b)\n      return (balanceA + balanceB) / Number(utils.undecimalize(supply, 9))\n    },\n    [getMint, getTokenUsd, pools],\n  )\n\n  const getMintPrice = useCallback(\n    async (mintAddress: string) => {\n      try {\n        const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n        // mint lpt\n        if (!tokenInfo) {\n          const mintLptPrice = await getMintLptPrice(mintAddress)\n          return setMintPrice(mintLptPrice)\n        }\n        // token\n        const ticket = tokenInfo.extensions?.coingeckoId\n        if (!ticket) return setMintPrice(0)\n        const cgkData = await fetchCGK(ticket)\n        return setMintPrice(cgkData.price)\n      } catch (error) {\n        return 0\n      }\n    },\n    [getMintLptPrice, tokenProvider],\n  )\n\n  useEffect(() => {\n    getMintPrice(mintAddress)\n  }, [getMintPrice, mintAddress])\n\n  return mintPrice\n}\n","import { Fragment, useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAccount, usePool, useWallet } from 'senhub/providers'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Modal, Button, Typography, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport AmountSelect, { AmountSelectOnChnage } from './amountSelect'\n\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { AppState } from 'app/model'\nimport configs from 'app/configs'\nimport { useMintPrice } from 'app/hooks/useMintPrice'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst {\n  sol: { taxmanAddress },\n  fee: { exoticFee, exoticTax },\n} = configs\n\nconst NewPool = () => {\n  const [visible, setVisible] = useState(false)\n  const [reserveA, setReserveA] = useState(BigInt(0))\n  const [mintAddressA, setMintAddressA] = useState('')\n  const [reserveB, setReserveB] = useState(BigInt(0))\n  const [mintAddressB, setMintAddressB] = useState('')\n  const [isMintAChanged, setIsMintAChanged] = useState(false)\n  const [suggestions, setSuggestions] = useState([0, 0])\n  const { lpts } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const { pools } = usePool()\n\n  // String combination of mint_a and mint_b\n  const existedPoolKeys = Object.values(pools).map(\n    ({ mint_a, mint_b }) => `${mint_a}${mint_b}`,\n  )\n  // Check the pool whether exists\n  const isExisted =\n    existedPoolKeys.includes(`${mintAddressA}${mintAddressB}`) ||\n    existedPoolKeys.includes(`${mintAddressB}${mintAddressA}`)\n  // Filtered the valid mints (exclude lp tokens)\n  const exclusiveMintAddresses = Object.values(lpts)\n    .map(({ pool }) => pools[pool]?.mint_lpt)\n    .filter((mintAddress) => account.isAddress(mintAddress))\n  const filteredMintAddress = Object.values(accounts)\n    .map(({ mint }) => mint)\n    .filter((mintAddress) => !exclusiveMintAddresses.includes(mintAddress))\n  // Mint info\n  const mintAPrice = useMintPrice(mintAddressA)\n  const decimalsA = useMintDecimals(mintAddressA) || 0\n  const mintBPrice = useMintPrice(mintAddressB)\n  const decimalsB = useMintDecimals(mintAddressB) || 0\n  // Valid to supply\n  const isValid =\n    reserveA &&\n    reserveB &&\n    account.isAddress(mintAddressA) &&\n    account.isAddress(mintAddressB)\n\n  const onSelectMintA = ({ amount, mintAddress }: AmountSelectOnChnage) => {\n    setReserveA(amount)\n    setMintAddressA(mintAddress)\n    setIsMintAChanged(true)\n  }\n\n  const onSelectMintB = ({ amount, mintAddress }: AmountSelectOnChnage) => {\n    setReserveB(amount)\n    setMintAddressB(mintAddress)\n    setIsMintAChanged(false)\n  }\n\n  const onNewPool = async () => {\n    try {\n      const { swap, splt, wallet } = window.sentre\n      if (!wallet || !account.isAddress(walletAddress))\n        throw new Error('Wallet is not connected')\n      if (!account.isAddress(mintAddressA) || !account.isAddress(mintAddressB))\n        throw new Error('Please select both tokens')\n      const mintAddresses = [mintAddressA, mintAddressB]\n      const srcAddresses = await Promise.all(\n        mintAddresses.map((mintAddress) =>\n          splt.deriveAssociatedAddress(walletAddress, mintAddress),\n        ),\n      )\n      const { txId } = await swap.initializePool(\n        reserveA,\n        reserveB,\n        exoticFee,\n        exoticTax,\n        walletAddress,\n        srcAddresses[0],\n        srcAddresses[1],\n        taxmanAddress,\n        wallet,\n      )\n      setVisible(false)\n      return notifySuccess('Create a new pool', txId)\n    } catch (er) {\n      return notifyError(er)\n    }\n  }\n\n  const onClose = () => {\n    setVisible(false)\n    setMintAddressA('')\n    setMintAddressB('')\n    setSuggestions([0, 0])\n  }\n\n  useEffect(() => {\n    if (isMintAChanged && mintBPrice) {\n      const amount =\n        (Number(utils.undecimalize(reserveA, decimalsA)) * mintAPrice) /\n        mintBPrice\n      return setSuggestions([0, amount])\n    }\n    if (!isMintAChanged && mintAPrice) {\n      const amount =\n        (Number(utils.undecimalize(reserveB, decimalsB)) * mintBPrice) /\n        mintAPrice\n      return setSuggestions([amount, 0])\n    }\n    return setSuggestions([0, 0])\n  }, [\n    isMintAChanged,\n    reserveA,\n    mintAPrice,\n    decimalsA,\n    reserveB,\n    mintBPrice,\n    decimalsB,\n  ])\n\n  return (\n    <Fragment>\n      <Button\n        type=\"primary\"\n        icon={<IonIcon name=\"add-outline\" />}\n        onClick={() => setVisible(!visible)}\n      >\n        New\n      </Button>\n      <Modal\n        visible={visible}\n        onCancel={onClose}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <Typography.Title level={4}>New Pool</Typography.Title>\n          </Col>\n          <Col span={24}>\n            <Typography.Text type=\"secondary\">\n              <strong className=\"content\">Liquidity Provider Incentive.</strong>{' '}\n              Liquidity providers earn a 0.25% fee on all trades proportional to\n              their share of the pool. Fees are accrued into the pool and can be\n              claimed by withdrawing your liquidity.\n            </Typography.Text>\n          </Col>\n          <Col span={24}>\n            <AmountSelect\n              mintAddresses={filteredMintAddress}\n              onChange={onSelectMintA}\n              suggestion={suggestions[0]}\n            />\n          </Col>\n          <Col span={24}>\n            <AmountSelect\n              mintAddresses={filteredMintAddress}\n              onChange={onSelectMintB}\n              suggestion={suggestions[1]}\n            />\n          </Col>\n          <Col span={24}>\n            <Row gutter={[16, 16]}>\n              <Col span={24}>\n                <Button\n                  type=\"primary\"\n                  onClick={onNewPool}\n                  disabled={!isValid}\n                  block\n                >\n                  Supply\n                </Button>\n              </Col>\n              {isExisted && (\n                <Col span={24}>\n                  <Space align=\"start\">\n                    <Typography.Text className=\"caption\" type=\"danger\">\n                      <IonIcon name=\"warning-outline\" />\n                    </Typography.Text>\n                    <Typography.Text className=\"caption\" type=\"danger\">\n                      A pool of the desired pair of tokens had already created.\n                      We highly recommend to deposit your liquidity to the pool\n                      instead.\n                    </Typography.Text>\n                  </Space>\n                </Col>\n              )}\n            </Row>\n          </Col>\n        </Row>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default NewPool\n","import { useCallback, useEffect, MouseEvent, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport { Button, Col, Empty, Row } from 'antd'\nimport PoolCard from '../components/poolCard'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport configs from 'app/configs'\nimport { handleOpenDrawer, selectPool } from 'app/model/main.controller'\nimport { AppState } from 'app/model'\nimport { PoolTabs, QueryParams } from 'app/constant'\nimport { useSentrePools } from 'app/hooks/pools/useSentrePools'\nimport { useListPoolAddress } from 'app/hooks/pools/useListPoolAddress'\n\nconst {\n  route: { myRoute },\n} = configs\n\nconst SentrePools = () => {\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const {\n    main: { selectedPoolAddress },\n  } = useSelector((state: AppState) => state)\n  const location = useLocation()\n\n  const { sentrePools } = useSentrePools()\n  const { listPoolAddress } = useListPoolAddress(sentrePools)\n\n  const query = useMemo(\n    () => new URLSearchParams(location.search),\n    [location.search],\n  )\n\n  const setActivePoolAddress = useCallback(\n    async (address: string) => {\n      await dispatch(selectPool(address))\n      await dispatch(handleOpenDrawer(false))\n      query.set(QueryParams.address, address)\n      query.set(QueryParams.category, PoolTabs.Sentre)\n      return history.push(`${myRoute}?${query.toString()}`)\n    },\n    [dispatch, history, query],\n  )\n\n  const onInitSelectPool = useCallback(() => {\n    const poolAddress = query.get(QueryParams.address) || ''\n    if (!listPoolAddress.length || selectedPoolAddress) return\n\n    const addr = account.isAddress(poolAddress)\n      ? poolAddress\n      : listPoolAddress[0]\n    setActivePoolAddress(addr)\n  }, [listPoolAddress, query, selectedPoolAddress, setActivePoolAddress])\n\n  useEffect(() => {\n    onInitSelectPool()\n  }, [onInitSelectPool])\n\n  return (\n    <Row gutter={[12, 12]} justify=\"center\">\n      {!listPoolAddress.length && (\n        <Col>\n          <Empty />\n        </Col>\n      )}\n      {listPoolAddress.map((poolAddress, idx) => {\n        return (\n          <Col span={24} key={poolAddress + idx}>\n            <PoolCard\n              poolAddress={poolAddress}\n              action={\n                <Button\n                  type=\"text\"\n                  onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                    e.stopPropagation()\n                    setActivePoolAddress(poolAddress)\n                  }}\n                  icon={\n                    <IonIcon\n                      name=\"arrow-forward-outline\"\n                      style={{ fontSize: 12, color: '#7A7B85' }}\n                    />\n                  }\n                />\n              }\n              onClick={() => setActivePoolAddress(poolAddress)}\n              selected={selectedPoolAddress === poolAddress}\n              apy\n            />\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n\nexport default SentrePools\n","import { useDispatch, useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Button, Empty } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { handleOpenDrawer, selectPool } from 'app/model/main.controller'\nimport { PoolTabs, QueryParams } from 'app/constant'\nimport configs from 'app/configs'\nimport { useCallback, useMemo } from 'react'\nimport PoolCard from '../components/poolCard'\nimport { useDepositedPools } from 'app/hooks/pools/useDepositedPools'\nimport { useListPoolAddress } from 'app/hooks/pools/useListPoolAddress'\n\nconst {\n  route: { myRoute },\n} = configs\n\nconst DepositedPools = () => {\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const location = useLocation()\n  const query = useMemo(() => new URLSearchParams(location.search), [location])\n  const {\n    main: { selectedPoolAddress },\n  } = useSelector((state: AppState) => state)\n  const { depositedPools } = useDepositedPools()\n  const { listPoolAddress } = useListPoolAddress(depositedPools)\n\n  const setActiveAddress = useCallback(\n    (address: string) => {\n      dispatch(selectPool(address))\n      dispatch(handleOpenDrawer(false))\n      query.set(QueryParams.address, address)\n      query.set(QueryParams.category, PoolTabs.Sentre)\n      return history.push(`${myRoute}?${query.toString()}`)\n    },\n    [dispatch, history, query],\n  )\n\n  const action = useCallback(\n    (poolAddress: string) => {\n      return (\n        <Button\n          type=\"text\"\n          onClick={() => setActiveAddress(poolAddress)}\n          icon={\n            <IonIcon\n              name=\"arrow-forward-outline\"\n              style={{ fontSize: 12, color: '#7A7B85' }}\n            />\n          }\n        />\n      )\n    },\n    [setActiveAddress],\n  )\n\n  return (\n    <Row gutter={[12, 12]} justify=\"center\">\n      {!listPoolAddress.length ? (\n        <Col>\n          <Empty />\n        </Col>\n      ) : (\n        listPoolAddress.map((poolAddress, i) => {\n          return (\n            <Col span={24} key={poolAddress}>\n              <LazyLoad height={78} overflow>\n                <PoolCard\n                  poolAddress={poolAddress}\n                  action={action(poolAddress)}\n                  onClick={() => setActiveAddress(poolAddress)}\n                  selected={selectedPoolAddress === poolAddress}\n                  myLp\n                />\n              </LazyLoad>\n            </Col>\n          )\n        })\n      )}\n    </Row>\n  )\n}\n\nexport default DepositedPools\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePool } from 'senhub/providers'\nimport { PoolsState } from 'os/store/pools.reducer'\nimport { useSelector } from 'react-redux'\nimport { AppState } from 'app/model'\n\nexport const useDepositedPools = () => {\n  const [depositedPools, setDepositedPools] = useState<PoolsState>({})\n  const lpts = useSelector((state: AppState) => state.lpts)\n  const { pools } = usePool()\n\n  const getDepositedPools = useCallback(() => {\n    const newDepositedPools: PoolsState = {}\n    for (const lptAddr in lpts) {\n      const { pool, amount } = lpts[lptAddr]\n      if (amount > BigInt(0)) newDepositedPools[pool] = pools[pool]\n    }\n    return setDepositedPools(newDepositedPools)\n  }, [lpts, pools])\n\n  useEffect(() => {\n    getDepositedPools()\n  }, [getDepositedPools])\n\n  return { depositedPools }\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\nexport type State = {\n  showArchived: boolean\n}\n\nconst NAME = 'settings'\nconst initialState: State = {\n  showArchived: false,\n}\n\n/**\n * Actions\n */\n\nexport const setShowArchived = createAsyncThunk(\n  `${NAME}/setShowArchived`,\n  async (showArchived: boolean) => {\n    return { showArchived }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setShowArchived.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Popover, Space, Switch, Typography, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { RootDispatch } from 'os/store'\nimport { AppState } from 'app/model'\nimport { setShowArchived } from 'app/model/settings.controller'\n\nconst SettingsButton = () => {\n  const dispatch = useDispatch<RootDispatch>()\n  const {\n    settings: { showArchived },\n  } = useSelector((state: AppState) => state)\n\n  return (\n    <Popover\n      zIndex={1000}\n      content={\n        <Row gutter={[8, 8]} style={{ maxWidth: 224 }}>\n          <Col span={24}>\n            <Space size=\"large\">\n              <Switch\n                size=\"small\"\n                checked={showArchived}\n                onChange={(checked) => dispatch(setShowArchived(checked))}\n              />\n              <Typography.Text>Show archived pools</Typography.Text>\n            </Space>\n          </Col>\n        </Row>\n      }\n      trigger=\"click\"\n      placement=\"topRight\"\n    >\n      <Button type=\"text\" icon={<IonIcon name=\"cog-outline\" />} />\n    </Popover>\n  )\n}\n\nexport default SettingsButton\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Card, Input, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { onSearch } from 'app/model/main.controller'\n\nconst Search = () => {\n  const {\n    main: { search },\n  } = useSelector((state: AppState) => state)\n  const dispatch = useDispatch<AppDispatch>()\n\n  return (\n    <Card bodyStyle={{ padding: 8 }} bordered={false} className=\"lp-card\">\n      <Input\n        placeholder=\"Search\"\n        value={search}\n        size=\"small\"\n        bordered={false}\n        prefix={\n          <Button\n            type=\"text\"\n            style={{ marginLeft: -7 }}\n            size=\"small\"\n            onClick={search ? () => dispatch(onSearch('')) : () => {}}\n            icon={\n              <IonIcon name={search ? 'close-outline' : 'search-outline'} />\n            }\n          />\n        }\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          dispatch(onSearch(e.target.value))\n        }\n      />\n    </Card>\n  )\n}\n\nexport default Search\n","import { useEffect, useMemo, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nimport { Col, Row, Select } from 'antd'\nimport CommunityPools from './communityPools'\nimport YourPools from './yourPools'\nimport NewPool from './newPool'\nimport SentrePools from './sentrePools'\nimport DepositedPools from './depositedPools'\n\nimport SettingsButton from 'app/components/settingsButton'\nimport { PoolTabs, QueryParams } from 'app/constant'\nimport Search from './components/search'\nimport { account } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\nimport { AppState } from 'app/model'\n\nconst SideBar = () => {\n  const [selectedTab, setSelectedTab] = useState<PoolTabs>(PoolTabs.Sentre)\n  const { selectedPoolAddress, prevSelectedPool } = useSelector(\n    (state: AppState) => state.main,\n  )\n  const query = new URLSearchParams(useLocation().search)\n  const poolCategory = query.get(QueryParams.category) || ''\n\n  const handleChange = (value: PoolTabs) => {\n    setSelectedTab(value)\n  }\n\n  const poolsSelected = useMemo(() => {\n    if (selectedTab === PoolTabs.Sentre) return <SentrePools />\n    if (selectedTab === PoolTabs.Community) return <CommunityPools />\n    if (selectedTab === PoolTabs.Deposited) return <DepositedPools />\n    return <YourPools />\n  }, [selectedTab])\n\n  const isInViewport = (element: HTMLElement | null) => {\n    if (!element) return\n    const rect = element.getBoundingClientRect()\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <=\n        (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    )\n  }\n\n  useEffect(() => {\n    if (!prevSelectedPool || !account.isAddress(selectedPoolAddress)) return\n    const element = document.getElementById(selectedPoolAddress)\n    if (isInViewport(element) || !element) return // reject when pool card inviewport\n    const container = document.getElementById('scroll-container')\n    if (container && element?.offsetTop) container.scrollTop = element.offsetTop\n  }, [prevSelectedPool, selectedPoolAddress])\n\n  useEffect(() => {\n    if (!poolCategory) return\n    return setSelectedTab(poolCategory as PoolTabs)\n  }, [poolCategory])\n\n  return (\n    <Row gutter={[12, 24]} className=\"side-bar\">\n      <Col span={24}>\n        <Row gutter={[8, 8]} wrap={false}>\n          <Col>\n            <SettingsButton />\n          </Col>\n          <Col flex=\"auto\">\n            <Select\n              value={selectedTab}\n              onChange={handleChange}\n              className=\"header-sidebar\"\n            >\n              <Select.Option value={PoolTabs.Sentre}>\n                Sentre pools\n              </Select.Option>\n              <Select.Option value={PoolTabs.Deposited}>\n                Deposited pools\n              </Select.Option>\n              <Select.Option value={PoolTabs.YourPools}>\n                Your pools\n              </Select.Option>\n              <Select.Option value={PoolTabs.Community}>\n                Community pools\n              </Select.Option>\n            </Select>\n          </Col>\n          <Col>\n            <NewPool />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Search />\n      </Col>\n      <Col span={24} className=\"body-sidebar scrollbar\" id=\"scroll-container\">\n        {poolsSelected}\n      </Col>\n    </Row>\n  )\n}\n\nexport default SideBar\n","import { useHistory } from 'react-router-dom'\n\nimport { Button, Col, Row, Space, Typography, Popover } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport configs from 'app/configs'\nimport { PoolStatus } from 'app/constant'\nimport { usePool } from 'senhub/providers'\n\nconst {\n  route: { swapRoute },\n} = configs\n\nexport const SwapAction = ({ poolAddress }: { poolAddress: string }) => {\n  const history = useHistory()\n  const { pools } = usePool()\n  const frozen = pools?.[poolAddress].state === PoolStatus.Frozen\n\n  const onSwap = (originalRoute: boolean) => {\n    return history.push({\n      pathname: swapRoute,\n      state: { poolAddress, originalRoute },\n    })\n  }\n\n  return (\n    <Row gutter={[24, 12]} style={{ width: 256 }}>\n      <Col span={24}>\n        <Space direction=\"vertical\" size={0}>\n          <Space>\n            <IonIcon style={{ color: '#FA8C16' }} name=\"alert-circle-outline\" />\n            <Typography.Title level={5}>Choose the route</Typography.Title>\n          </Space>\n          <Typography.Text type=\"secondary\">\n            We recommend choosing the best route to optimize the price.\n          </Typography.Text>\n        </Space>\n      </Col>\n      <Col style={{ textAlign: 'right' }} span={24}>\n        <Space>\n          <Button size=\"small\" disabled={frozen} onClick={() => onSwap(true)}>\n            Original route\n          </Button>\n          <Button size=\"small\" onClick={() => onSwap(false)} type=\"primary\">\n            Best route\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nconst SwapButton = ({ poolAddress }: { poolAddress: string }) => {\n  return (\n    <Popover\n      trigger=\"click\"\n      placement=\"bottomLeft\"\n      content={<SwapAction poolAddress={poolAddress} />}\n    >\n      <Button block>Swap</Button>\n    </Popover>\n  )\n}\n\nexport default SwapButton\n","import { useCallback, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport CopyToClipboard from 'react-copy-to-clipboard'\n\nimport { Button, Col, Popover, Row, Space, Tooltip, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport SwapButton from 'app/components/swapButton'\n\nimport { asyncWait } from 'shared/util'\nimport { usePool } from 'senhub/providers'\nimport configs from 'app/configs'\n\nconst {\n  route: { farmRoute },\n} = configs\n\nconst PoolDetailsHeader = ({ poolAddress }: { poolAddress: string }) => {\n  const [copied, setCopied] = useState(false)\n  const history = useHistory()\n  const { pools } = usePool()\n  const { mint_lpt } = pools?.[poolAddress] || {}\n\n  const onCopy = async () => {\n    setCopied(true)\n    await asyncWait(1500)\n    setCopied(false)\n  }\n  const goFarming = useCallback(() => {\n    return history.push(`${farmRoute}?search=${poolAddress}`)\n  }, [history, poolAddress])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col flex=\"auto\">\n        <Space>\n          <Space size={4}>\n            <MintAvatar mintAddress={mint_lpt} size={32} />\n            <Typography.Title level={5}>\n              <MintSymbol mintAddress={mint_lpt} />\n            </Typography.Title>\n          </Space>\n          <Popover\n            placement=\"bottom\"\n            content={\n              <Space align=\"center\">\n                <Tooltip title=\"Copied\" visible={copied} arrowPointAtCenter>\n                  <CopyToClipboard text={poolAddress}>\n                    <Button\n                      type=\"text\"\n                      size=\"small\"\n                      icon={<IonIcon name=\"copy-outline\" />}\n                      onClick={onCopy}\n                    />\n                  </CopyToClipboard>\n                </Tooltip>\n                <Space direction=\"vertical\" size={4}>\n                  <Typography.Text type=\"secondary\">\n                    PoolAddress\n                  </Typography.Text>\n                  <Typography.Text style={{ wordBreak: 'break-all' }}>\n                    {poolAddress}\n                  </Typography.Text>\n                </Space>\n              </Space>\n            }\n          >\n            <Button\n              type=\"text\"\n              icon={<IonIcon name=\"alert-circle-outline\" />}\n            />\n          </Popover>\n        </Space>\n      </Col>\n      <Col>\n        <Space>\n          <SwapButton poolAddress={poolAddress} />\n          <Button onClick={goFarming}>Go Farming</Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\nexport default PoolDetailsHeader\n","import { utils } from '@senswap/sen-js'\n\nimport { Space, Typography } from 'antd'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { usePool } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst PoolPrice = ({\n  poolAddress,\n  reversed = false,\n}: {\n  poolAddress: string\n  reversed?: boolean\n}) => {\n  const { pools } = usePool()\n\n  const { mint_a, mint_b, reserve_a, reserve_b, mint_lpt } =\n    pools[poolAddress] || {}\n  const decimalsA = useMintDecimals(mint_a) || 0\n  const decimalsB = useMintDecimals(mint_b) || 0\n  const amountA = Number(utils.undecimalize(reserve_a, decimalsA))\n  const amountB = Number(utils.undecimalize(reserve_b, decimalsB))\n\n  const price = amountB ? amountA / amountB : 0\n  const reversedPrice = amountA ? amountB / amountA : 0\n\n  return (\n    <Space>\n      <Typography.Text>\n        {numeric(reversed ? reversedPrice : price).format('0,0.[0000]')}\n      </Typography.Text>\n      <MintSymbol mintAddress={mint_lpt} reversed={reversed} separator=\" / \" />\n    </Space>\n  )\n}\n\nexport default PoolPrice\n","import { useState } from 'react'\n\nimport { Button, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar } from 'shared/antd/mint'\n\nimport { usePool } from 'senhub/providers'\nimport PoolPrice from 'app/components/poolPrice'\n\nconst Price = ({ poolAddress }: { poolAddress: string }) => {\n  const { pools } = usePool()\n  const [isReverse, setIsReverse] = useState(true)\n\n  const { mint_lpt } = pools[poolAddress] || {}\n\n  return (\n    <Space>\n      <MintAvatar mintAddress={mint_lpt} reversed={isReverse} />\n      <PoolPrice poolAddress={poolAddress} reversed={isReverse} />\n      <Button\n        type=\"text\"\n        onClick={() => setIsReverse(!isReverse)}\n        icon={<IonIcon name=\"swap-horizontal-outline\" />}\n      />\n    </Space>\n  )\n}\n\nexport default Price\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { Row, Col, Card, Typography, Space, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoolPrice from 'app/components/poolPrice'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\nimport { useMint, usePool } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst Summary = ({\n  value = '0',\n  poolAddress,\n}: {\n  value?: string\n  poolAddress: string\n}) => {\n  const [isReverse, setIsReverse] = useState(false)\n  const [totalLPT, setTotalLPT] = useState('0')\n  const { lpts } = useSelector((state: AppState) => state)\n  const { getMint } = useMint()\n  const { pools } = usePool()\n\n  const { mint_a, mint_b, reserve_a, reserve_b, mint_lpt } =\n    pools[poolAddress] || {}\n  const decimalsA = useMintDecimals(mint_a) || 0\n  const decimalsB = useMintDecimals(mint_b) || 0\n  const reserveA = utils.undecimalize(reserve_a, decimalsA)\n  const reserveB = utils.undecimalize(reserve_b, decimalsB)\n\n  const lptAddress =\n    Object.keys(lpts).find((key) => lpts[key].pool === poolAddress) || ''\n  const { amount } = lpts[lptAddress] || {}\n  const lpt = Number(utils.undecimalize(amount || BigInt(0), 9))\n\n  useEffect(() => {\n    ;(async () => {\n      const {\n        [mint_lpt]: { supply, decimals },\n      } = await getMint({ address: mint_lpt })\n      return setTotalLPT(utils.undecimalize(supply, decimals))\n    })()\n  }, [mint_lpt, getMint])\n\n  return (\n    <Card bordered={false} className=\"deposit-card\">\n      <Row gutter={[12, 12]}>\n        <Col span={24}>\n          <Row gutter={[12, 12]}>\n            <Col flex=\"auto\">\n              <Typography.Text type=\"secondary\">In-Pool Price</Typography.Text>\n            </Col>\n            <Col>\n              <Space>\n                <Button\n                  type=\"text\"\n                  style={{ width: 'auto', height: 'auto' }}\n                  icon={<IonIcon name=\"swap-horizontal-outline\" />}\n                  onClick={() => setIsReverse(!isReverse)}\n                />\n                <PoolPrice poolAddress={poolAddress} reversed={isReverse} />\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[12, 12]}>\n            <Col flex=\"auto\">\n              <Typography.Text type=\"secondary\">\n                Pool Composition\n              </Typography.Text>\n            </Col>\n            <Col>\n              <Space size={4}>\n                <Typography.Text>\n                  {numeric(reserveA).format('0,0.[00]a')}{' '}\n                  <MintSymbol mintAddress={mint_a} />\n                </Typography.Text>\n                <Typography.Title level={5}> + </Typography.Title>\n                <Typography.Text>\n                  {numeric(reserveB).format('0,0.[00]a')}{' '}\n                  <MintSymbol mintAddress={mint_b} />\n                </Typography.Text>\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[12, 12]}>\n            <Col flex=\"auto\">\n              <Typography.Text type=\"secondary\">My Current LP</Typography.Text>\n            </Col>\n            <Col>\n              <Typography.Text>\n                {numeric(lpt).format('0,0.[0000]')} LP\n              </Typography.Text>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[8, 8]}>\n            <Col flex=\"auto\">\n              <Typography.Text type=\"secondary\">Total LP</Typography.Text>\n            </Col>\n            <Col>\n              <Typography.Text>\n                {numeric(totalLPT).format('0,0.[0000]')} LP\n              </Typography.Text>\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[12, 12]}>\n            <Col flex=\"auto\">\n              <Typography.Text type=\"secondary\">\n                You will reveice\n              </Typography.Text>\n            </Col>\n            <Col>\n              <Space size={4}>\n                <Typography.Title level={5}>\n                  {numeric(value).format('0,0.[0000]')}\n                </Typography.Title>\n                <Typography.Title level={5}>LP</Typography.Title>\n              </Space>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Summary\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space, Button, Divider } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { useAccount, useWallet } from 'senhub/providers'\nimport { numeric } from 'shared/util'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\n/**\n * Single amount input\n */\nconst Amount = ({\n  mintAddress,\n  onChange,\n  value,\n}: {\n  mintAddress: string\n  onChange: (value: bigint) => void\n  value: bigint\n}) => {\n  const [amount, setAmount] = useState('')\n  const [associatedAddress, setAssociatedAddress] = useState<string>('')\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  const accountData = accounts?.[associatedAddress]\n\n  const balance = useMemo(() => {\n    const { amount } = accountData || {}\n    if (!amount || !decimals) return '0'\n    return utils.undecimalize(amount, decimals) || '0'\n  }, [accountData, decimals])\n\n  const onAmount = useCallback(\n    async (val: string) => {\n      await setAmount(val)\n      if (!decimals || !parseFloat(val)) return onChange(BigInt(0))\n      return onChange(utils.decimalize(val, decimals))\n    },\n    [decimals, onChange],\n  )\n\n  const setAmountFromProps = useCallback(() => {\n    const newAmount = utils.undecimalize(value, decimals || 0)\n    if (Number(newAmount) === Number(amount)) return\n    setAmount(newAmount)\n    // ignore  'amount' because this function only  call after change 'value' from props\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [decimals, value])\n\n  const fetchAssociatedAddress = useCallback(async () => {\n    const { splt } = window.sentre\n    try {\n      const associatedAddress = await account.deriveAssociatedAddress(\n        walletAddress,\n        mintAddress,\n        splt.spltProgramId.toBase58(),\n        splt.splataProgramId.toBase58(),\n      )\n      setAssociatedAddress(associatedAddress)\n    } catch (er) {}\n  }, [mintAddress, walletAddress])\n\n  useEffect(() => {\n    fetchAssociatedAddress()\n  }, [fetchAssociatedAddress])\n\n  useEffect(() => {\n    setAmountFromProps()\n  }, [setAmountFromProps])\n\n  const notEnoughBalance = Number(amount) > Number(balance)\n\n  return (\n    <Row gutter={[4, 4]}>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={amount}\n          onValue={onAmount}\n          size=\"large\"\n          prefix={\n            <Space style={{ marginLeft: -4, marginRight: 7, lineHeight: 1 }}>\n              <MintAvatar mintAddress={mintAddress} />\n              <Divider type=\"vertical\" style={{ margin: 0 }} />\n            </Space>\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              style={{ marginRight: -7 }}\n              size=\"small\"\n              onClick={() => onAmount(balance)}\n            >\n              MAX\n            </Button>\n          }\n          max={balance}\n        />\n      </Col>\n      <Col flex=\"auto\">\n        {notEnoughBalance && (\n          <Typography.Text style={{ fontSize: 12 }} type=\"danger\">\n            Not enough balance.\n          </Typography.Text>\n        )}\n      </Col>\n      <Col>\n        <Typography.Text style={{ fontSize: 12 }} type=\"secondary\">\n          Available: {numeric(balance).format('0,0.[0000]')}{' '}\n          <MintSymbol mintAddress={mintAddress} />\n        </Typography.Text>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Amount\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { account, Swap, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Button, Radio, Space, Tag, RadioChangeEvent } from 'antd'\nimport Summary from './summary'\nimport Amount from 'app/components/amount'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { explorer } from 'shared/util'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { useAccount, useMint, usePool, useWallet } from 'senhub/providers'\n\nconst FullSide = ({\n  poolAddress,\n  onClose = () => {},\n  onChange = () => {},\n}: {\n  poolAddress: string\n  onClose?: () => void\n  onChange?: (mint: string) => void\n}) => {\n  const [loading, setLoading] = useState(false)\n  const [lpt, setLPT] = useState('')\n  const [amounts, setAmounts] = useState<bigint[]>([BigInt(0), BigInt(0)])\n  const [selectMint, setSelectMint] = useState<string>('all')\n  const [disabled, setDisabled] = useState(true)\n  const { pools } = usePool()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { getMint } = useMint()\n  const { accounts } = useAccount()\n\n  const {\n    mint_a,\n    mint_b,\n    reserve_a,\n    reserve_b,\n    mint_lpt,\n    fee_ratio,\n    tax_ratio,\n  } = pools[poolAddress]\n  const mintAddresses = [mint_a, mint_b]\n  const decimalA = useMintDecimals(mint_a) || 0\n  const decimalB = useMintDecimals(mint_b) || 0\n  const decimals = useMemo(() => {\n    return [decimalA, decimalB]\n  }, [decimalA, decimalB])\n  const ratio = useMemo(() => {\n    return (\n      Number(utils.undecimalize(reserve_a, decimalA)) /\n      Number(utils.undecimalize(reserve_b, decimalB))\n    )\n  }, [decimalA, decimalB, reserve_a, reserve_b])\n\n  const getSuggestMintAmount = useCallback(\n    (amount: bigint, index: number) => {\n      if (!decimals) return BigInt(0)\n      const suggestDecimal = index === 0 ? decimals[1] : decimals[0]\n      const parseAmount = Number(utils.undecimalize(amount, decimals[index]))\n      let suggestAmount = parseAmount * ratio\n      if (index === 0) suggestAmount = parseAmount / ratio\n      return utils.decimalize(suggestAmount, suggestDecimal)\n    },\n    [decimals, ratio],\n  )\n\n  const onAmounts = (mintAddress: string, amount: bigint) => {\n    if (!account.isAddress(mintAddress) || !amount)\n      return setAmounts([BigInt(0), BigInt(0)])\n    const index = mintAddresses.findIndex((mint) => mint === mintAddress)\n    if (index === -1) return\n    let newAmounts = [...amounts]\n    if (selectMint === 'all')\n      newAmounts[0] = newAmounts[1] = getSuggestMintAmount(amount, index)\n    newAmounts[index] = amount\n    setAmounts(newAmounts)\n  }\n\n  const estimateLPT = useCallback(async () => {\n    if (!account.isAddress(walletAddress)) return setLPT('')\n    try {\n      const {\n        [mint_lpt]: { supply },\n      } = await getMint({ address: mint_lpt })\n      const { lpt } = Swap.oracle.sided_deposit(\n        amounts[0],\n        amounts[1],\n        reserve_a,\n        reserve_b,\n        supply,\n        fee_ratio,\n        tax_ratio,\n      )\n      return setLPT(utils.undecimalize(lpt, 9))\n    } catch (er: any) {\n      window.notify({ type: 'error', description: er.message })\n    }\n  }, [\n    amounts,\n    fee_ratio,\n    getMint,\n    mint_lpt,\n    reserve_a,\n    reserve_b,\n    tax_ratio,\n    walletAddress,\n  ])\n\n  const onDeposit = async () => {\n    setLoading(true)\n    const { splt, swap, wallet } = window.sentre\n    const [srcAAddress, srcBAddress] = await Promise.all(\n      mintAddresses.map((mintAddress) =>\n        splt.deriveAssociatedAddress(walletAddress, mintAddress),\n      ),\n    )\n    if (!wallet) return\n    try {\n      const { txId } = await swap.addSidedLiquidity(\n        amounts[0],\n        amounts[1],\n        poolAddress,\n        srcAAddress,\n        srcBAddress,\n        wallet,\n      )\n      onClose()\n      return window.notify({\n        type: 'success',\n        description: 'Deposit liquidity successfully. Click to view details.',\n        onClick: () => window.open(explorer(txId), '_blank'),\n      })\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    estimateLPT()\n  }, [estimateLPT])\n\n  useEffect(() => {\n    setAmounts([BigInt(0), BigInt(0)])\n  }, [selectMint])\n\n  const validateInput = useCallback(async () => {\n    const { splt } = window.sentre\n    // get wallet account mint A\n    const accAddrMintA = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mint_a,\n    )\n    const accMintA = accounts[accAddrMintA]\n    // get wallet account mint B\n    const accAddrMintB = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mint_b,\n    )\n    const accMintB = accounts[accAddrMintB]\n    const amountMintA = accMintA?.amount || 0\n    const amountMintB = accMintB?.amount || 0\n    const disabled = amounts[0] > amountMintA || amounts[1] > amountMintB\n    setDisabled(disabled)\n  }, [accounts, amounts, mint_a, mint_b, walletAddress])\n\n  useEffect(() => {\n    validateInput()\n  }, [validateInput])\n\n  const onSelectMint = (event: RadioChangeEvent) => {\n    setSelectMint(event.target.value)\n    onChange(event.target.value)\n  }\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Radio.Group\n          onChange={(e) => {\n            onSelectMint(e)\n          }}\n          value={selectMint}\n        >\n          <Radio value={'all'}>\n            <Space size={4}>\n              <MintSymbol mintAddress={mint_lpt} separator=\"+\" />\n              <Tag className=\"deposit-tag\">0 Fee</Tag>\n            </Space>\n          </Radio>\n\n          {mintAddresses.map((mintAddress, idx) => (\n            <Radio value={mintAddress} key={mintAddress + idx}>\n              <MintSymbol mintAddress={mintAddress} />\n            </Radio>\n          ))}\n        </Radio.Group>\n      </Col>\n      {mintAddresses.map(\n        (mintAddress, i) =>\n          (mintAddress === selectMint || selectMint === 'all') && (\n            <Col key={mintAddress + i} span={24}>\n              <Amount\n                mintAddress={mintAddress}\n                value={amounts[i]}\n                onChange={(amount) => onAmounts(mintAddress, amount)}\n              />\n            </Col>\n          ),\n      )}\n      <Col span={24}>\n        <Summary value={lpt} poolAddress={poolAddress} />\n      </Col>\n      <Col span={24}>\n        <Button\n          type=\"primary\"\n          onClick={onDeposit}\n          disabled={!Number(lpt) || disabled}\n          block\n          loading={loading}\n        >\n          Deposit\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default FullSide\n","import { utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography } from 'antd'\nimport FullSide from './fullSide'\n\nimport { usePool } from 'senhub/providers'\nimport { useState } from 'react'\n\nconst FEE_DECIMALS_PERCENT = 7\n\nconst Deposit = ({\n  poolAddress,\n  onClose = () => {},\n}: {\n  poolAddress: string\n  onClose?: () => void\n}) => {\n  const { pools } = usePool()\n  const [selectMint, setSelectMint] = useState('all')\n  const { fee_ratio, tax_ratio } = pools[poolAddress] || {}\n  const feeRatio = fee_ratio || BigInt(0)\n  const taxRatio = tax_ratio || BigInt(0)\n\n  const totalRatio = utils.undecimalize(\n    feeRatio + taxRatio,\n    FEE_DECIMALS_PERCENT,\n  )\n  const asymmetric = selectMint !== 'all'\n  const asymmetricColor = asymmetric ? '#F9575E' : 'inherit'\n  const asymmetricType = asymmetric ? undefined : 'secondary'\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Deposit Liquidity</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <Typography.Paragraph type=\"secondary\">\n          <strong>Liquidity provider incentive.</strong> Liquidity providers\n          earn a {totalRatio}% fee on all trades proportional to their share of\n          the pool. Fees are accrued into the pool and can be claimed by\n          withdrawing your liquidity.\n        </Typography.Paragraph>\n        <Typography.Paragraph type={asymmetricType}>\n          <strong style={{ color: asymmetricColor }}>\n            Asymmetric Deposit.\n          </strong>{' '}\n          Instead of depositing amounts of tokens proportionally, Asymmetric\n          Deposit allows you to deposit even one side of token. The pool will\n          automatically re-balance itself.\n        </Typography.Paragraph>\n      </Col>\n      <Col span={24}>\n        <FullSide\n          poolAddress={poolAddress}\n          onClose={onClose}\n          onChange={setSelectMint}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Deposit\n","import { useCallback, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { Row, Col, Typography, Space, Button, Divider } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintAvatar, MintName } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\nimport { usePool } from 'senhub/providers'\nimport { AppState } from 'app/model'\n\n/**\n * Single amount input\n */\nconst LPT = ({\n  lptAddress,\n  onChange,\n}: {\n  lptAddress: string\n  onChange: (value: bigint) => void\n}) => {\n  const [lpt, setLPT] = useState('')\n  const lpts = useSelector((state: AppState) => state.lpts)\n  const { pools } = usePool()\n  const { amount, pool } = lpts?.[lptAddress] || {}\n  const { mint_lpt } = pools?.[pool] || {}\n\n  const balance = useMemo(() => {\n    if (!amount) return '0'\n    return utils.undecimalize(amount, 9) || '0'\n  }, [amount])\n\n  const onLPT = useCallback(\n    async (val: string) => {\n      await setLPT(val)\n      // Return amount\n      if (!parseFloat(val)) return onChange(BigInt(0))\n      return onChange(utils.decimalize(val, 9))\n    },\n    [onChange],\n  )\n  return (\n    <Row gutter={[4, 4]} justify=\"end\">\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"Amount of LP\"\n          value={lpt}\n          onValue={onLPT}\n          size=\"large\"\n          prefix={\n            <Space\n              style={{\n                marginLeft: -7,\n                marginRight: 7,\n                fontSize: 12,\n                lineHeight: 1,\n              }}\n            >\n              <MintAvatar mintAddress={mint_lpt} size={24} />\n              <Typography.Text>\n                <MintName mintAddress={mint_lpt} />\n              </Typography.Text>\n              <Divider type=\"vertical\" style={{ margin: 0 }} />\n            </Space>\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              style={{ marginRight: -7 }}\n              size=\"small\"\n              onClick={() => onLPT(balance)}\n            >\n              MAX\n            </Button>\n          }\n          max={balance}\n        />\n      </Col>\n      <Col>\n        <Typography.Text style={{ fontSize: 12 }} type=\"secondary\">\n          Available: {numeric(balance).format('0,0.[0000]')} LPT\n        </Typography.Text>\n      </Col>\n    </Row>\n  )\n}\n\nexport default LPT\n","import { Row, Col, Card, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { numeric } from 'shared/util'\n\nconst Info = ({\n  mintAddresses,\n  amounts,\n}: {\n  mintAddresses: string[]\n  amounts: string[]\n}) => {\n  return (\n    <Card bordered={false} className=\"deposit-card\">\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Typography.Text>You will receive</Typography.Text>\n        </Col>\n        {mintAddresses.map((mintAddress, i) => (\n          <Col span={24} key={i}>\n            <Row gutter={[8, 8]} justify=\"space-between\" align=\"middle\">\n              <Col>\n                <MintAvatar mintAddress={mintAddress} size={32} />\n              </Col>\n              <Col>\n                <Typography.Title level={5} style={{ margin: 0 }}>\n                  {numeric(amounts[i] || 0).format('0,0.[0000]')}{' '}\n                  <MintSymbol mintAddress={mintAddress} />\n                </Typography.Title>\n              </Col>\n            </Row>\n          </Col>\n        ))}\n      </Row>\n    </Card>\n  )\n}\n\nexport default Info\n","import { useCallback, useEffect, useState } from 'react'\nimport { Swap, utils } from '@senswap/sen-js'\nimport { useSelector } from 'react-redux'\n\nimport { Row, Col, Typography, Button } from 'antd'\nimport LPT from './lpt'\nimport Info from './info'\n\nimport { explorer } from 'shared/util'\nimport { useMint, usePool, useWallet } from 'senhub/providers'\nimport { AppState } from 'app/model'\n\nconst Withdraw = ({\n  poolAddress,\n  onClose = () => {},\n}: {\n  poolAddress: string\n  onClose?: () => void\n}) => {\n  const [lpt, setLPT] = useState(BigInt(0))\n  const [supply, setSupply] = useState<bigint | undefined>()\n  const [amounts, setAmounts] = useState<string[]>([])\n  const [decimals, setDecimals] = useState([0, 0])\n  const [loading, setLoading] = useState(false)\n  const lpts = useSelector((state: AppState) => state.lpts)\n\n  const lptAddress =\n    Object.keys(lpts).find((key) => lpts[key].pool === poolAddress) || ''\n  const lptPoolAddress = lpts?.[lptAddress]?.pool\n\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { pools } = usePool()\n  const { getMint } = useMint()\n\n  const { mint_a, mint_b, mint_lpt, reserve_a, reserve_b } =\n    pools?.[lptPoolAddress] || {}\n  const mintAddresses = [mint_a, mint_b]\n\n  const fetchData = useCallback(async () => {\n    try {\n      const {\n        [mint_lpt]: { supply },\n      } = await getMint({ address: mint_lpt })\n      setSupply(supply)\n    } catch (er) {}\n    try {\n      const {\n        [mint_a]: { decimals: decimalsA },\n      } = await getMint({ address: mint_a })\n      const {\n        [mint_b]: { decimals: decimalsB },\n      } = await getMint({ address: mint_b })\n      setDecimals([decimalsA, decimalsB])\n    } catch (er) {}\n  }, [mint_a, mint_b, mint_lpt, getMint])\n\n  const onWithdraw = async () => {\n    if (!lpt) return\n    setLoading(true)\n    const { swap, wallet, splt } = window.sentre\n    const dstAddresses = await Promise.all(\n      mintAddresses.map((mintAddress) =>\n        splt.deriveAssociatedAddress(walletAddress, mintAddress),\n      ),\n    )\n    if (!wallet) return\n    try {\n      const { txId } = await swap.removeLiquidity(\n        lpt,\n        poolAddress,\n        dstAddresses[0],\n        dstAddresses[1],\n        wallet,\n      )\n      onClose()\n      return window.notify({\n        type: 'success',\n        description: 'Withdraw liquidity successfully. Click to view details.',\n        onClick: () => window.open(explorer(txId), '_blank'),\n      })\n    } catch (er: any) {\n      return window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    if (!supply) {\n      setAmounts([])\n    } else {\n      const { deltaA, deltaB } = Swap.oracle.withdraw(\n        lpt,\n        supply,\n        reserve_a,\n        reserve_b,\n      )\n      const deltas = [deltaA, deltaB]\n      const amounts = deltas.map((delta, i) =>\n        utils.undecimalize(delta, decimals[i]),\n      )\n      setAmounts(amounts)\n    }\n  }, [reserve_a, reserve_b, lpt, supply, decimals])\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Withdraw Liquidity</Typography.Title>\n      </Col>\n      <Col span={24}>\n        <LPT lptAddress={lptAddress} onChange={setLPT} />\n      </Col>\n      <Col span={24}>\n        <Info mintAddresses={mintAddresses} amounts={amounts} />\n      </Col>\n      <Col span={24}>\n        <Button\n          type=\"primary\"\n          onClick={onWithdraw}\n          disabled={!lpt}\n          block\n          loading={loading}\n        >\n          Withdraw\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Withdraw\n","import { useState } from 'react'\n\nimport { Button, Col, Modal, Row } from 'antd'\nimport Deposit from 'app/components/deposit'\nimport Withdraw from 'app/components/withdraw'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst LiquidityAction = ({\n  poolAddress,\n  lpt,\n}: {\n  poolAddress: string\n  lpt?: number\n}) => {\n  const [depositVisible, setDepositVisible] = useState(false)\n  const [withdrawVisible, setWithdrawVisible] = useState(false)\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={12}>\n        <Button\n          onClick={() => setWithdrawVisible(true)}\n          icon={<IonIcon name=\"log-out-outline\" />}\n          disabled={!lpt}\n          block\n        >\n          Withdraw\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button\n          onClick={() => setDepositVisible(true)}\n          type=\"primary\"\n          icon={<IonIcon name=\"log-in-outline\" />}\n          block\n        >\n          Deposit\n        </Button>\n      </Col>\n      <Modal\n        visible={depositVisible}\n        onCancel={() => setDepositVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Deposit\n          poolAddress={poolAddress}\n          onClose={() => setDepositVisible(false)}\n        />\n      </Modal>\n      <Modal\n        visible={withdrawVisible}\n        onCancel={() => setWithdrawVisible(false)}\n        closeIcon={<IonIcon name=\"close\" />}\n        footer={null}\n        destroyOnClose={true}\n        centered={true}\n      >\n        <Withdraw\n          poolAddress={poolAddress}\n          onClose={() => setWithdrawVisible(false)}\n        />\n      </Modal>\n    </Row>\n  )\n}\n\nexport default LiquidityAction\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Card, Col, Row, Space, Typography } from 'antd'\nimport Price from './price'\nimport LiquidityAction from './liquidityAction'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport { useMint, usePool } from 'senhub/providers'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst APY_DATE = 365\n\nconst Content = ({\n  label = 'label',\n  title = '',\n  subTitle = null,\n}: {\n  label?: string\n  title?: string | ReactNode\n  subTitle?: string | null\n}) => {\n  return (\n    <Space direction=\"vertical\" size={4}>\n      <Typography.Text className=\"caption\" type=\"secondary\">\n        {label}\n      </Typography.Text>\n      <span>{title}</span>\n      {subTitle && (\n        <Typography.Text type=\"secondary\">{subTitle}</Typography.Text>\n      )}\n    </Space>\n  )\n}\n\nconst Title = ({\n  value = 0,\n  sub = '',\n  format = '',\n}: {\n  value?: string | number\n  sub?: string | ReactNode\n  format?: string\n}) => {\n  return (\n    <Space size={4} align=\"baseline\">\n      <Typography.Title level={4}>\n        {numeric(value).format(format)}\n      </Typography.Title>\n      {sub && (\n        <Typography.Text className=\"caption\" type=\"secondary\">\n          {sub}\n        </Typography.Text>\n      )}\n    </Space>\n  )\n}\n\nconst LiquidityPosition = ({ poolAddress }: { poolAddress: string }) => {\n  const [supply, setSupply] = useState<number>(0)\n  const lpts = useSelector((state: AppState) => state.lpts)\n  const roi = useSelector(\n    (state: AppState) => state.stat?.[poolAddress]?.details?.roi,\n  )\n  const { getMint } = useMint()\n  const { pools } = usePool()\n\n  const { mint_a, mint_b, reserve_a, reserve_b, mint_lpt } =\n    pools[poolAddress] || {}\n  const decimalsA = useMintDecimals(mint_a) || 0\n  const decimalsB = useMintDecimals(mint_b) || 0\n  const reserveA = utils.undecimalize(reserve_a, decimalsA)\n  const reserveB = utils.undecimalize(reserve_b, decimalsB)\n\n  const lptAddress =\n    Object.keys(lpts).find((key) => lpts[key].pool === poolAddress) || ''\n  const { amount } = lpts[lptAddress] || {}\n  const lpt = Number(utils.undecimalize(amount || BigInt(0), 9))\n\n  const calculateRoi = useCallback(\n    (date: number) => {\n      if (!roi || !date) return 0\n      return Math.pow(roi / 100 + 1, date) - 1\n    },\n    [roi],\n  )\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(mint_lpt)) return 0\n      const {\n        [mint_lpt]: { decimals, supply },\n      } = await getMint({ address: mint_lpt })\n      setSupply(Number(utils.undecimalize(supply, decimals)))\n    })()\n  }, [getMint, mint_lpt])\n\n  return (\n    <Card bordered={false}>\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={4}>Liquidity Position</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[20, 20]}>\n            <Col span={24}>\n              <Content\n                label=\"APY\"\n                title={\n                  <Title value={calculateRoi(APY_DATE)} format=\"0,0.[00]%\" />\n                }\n              />\n            </Col>\n            <Col xs={8}>\n              <Content\n                label=\"My Contribution\"\n                title={<Title value={lpt} sub=\"LP\" format=\"0,0.[0000]a\" />}\n              />\n            </Col>\n            <Col xs={16}>\n              <Content\n                label=\"Pool Composition\"\n                title={\n                  <Space size={4} align=\"baseline\">\n                    <Title\n                      value={reserveA}\n                      sub={<MintSymbol mintAddress={mint_a} />}\n                      format=\"0,0.[00]a\"\n                    />\n                    <Typography.Title level={5}>+</Typography.Title>\n                    <Title\n                      value={reserveB}\n                      sub={<MintSymbol mintAddress={mint_b} />}\n                      format=\"0,0.[00]a\"\n                    />\n                  </Space>\n                }\n              />\n            </Col>\n            <Col xs={8}>\n              <Content\n                label=\"My Portion\"\n                title={<Title value={lpt / supply} format=\"0,0.[00]%\" />}\n                subTitle={`Over ${numeric(supply).format('0,0.[0000]a')} LP`}\n              />\n            </Col>\n            <Col xs={16}>\n              <Content\n                label=\"In-Pool Price\"\n                title={<Price poolAddress={poolAddress} />}\n              />\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <LiquidityAction lpt={lpt} poolAddress={poolAddress} />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default LiquidityPosition\n","import { Row, Col, Typography, Space } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nconst FeeInput = ({\n  title,\n  label,\n  ratio,\n  currentRatio = '0',\n  onChange = () => {},\n}: {\n  title: string\n  label: string\n  ratio: string | number\n  currentRatio: string\n  onChange?: (e: any) => void\n}) => {\n  return (\n    <Row gutter={[4, 4]}>\n      <Col flex=\"auto\">\n        <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      </Col>\n      <Col style={{ fontSize: 12 }}>\n        <Space size={4}>\n          <Typography.Text type=\"secondary\">{label}:</Typography.Text>\n          <Typography.Text>{currentRatio}%</Typography.Text>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          placeholder=\"0\"\n          value={ratio}\n          onValue={onChange}\n          size=\"large\"\n        />\n      </Col>\n    </Row>\n  )\n}\nexport default FeeInput\n","import { useMemo, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\n\nimport { Button, Row, Col } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport FeeInput from './FeeInput'\n\nimport { usePool } from 'senhub/providers'\nimport { explorer } from 'shared/util'\n\n// Fee decimal = 9\n// however feeUI = Fee * 100 (%)\n// -> FEE_DECIMALS_PERCENT = 9 - 2 = 7\nconst FEE_DECIMALS_PERCENT = 7\n\nconst Fee = ({ address: poolAddress }: { address: string }) => {\n  const { pools } = usePool()\n  const [feeRatio, setFeeRatio] = useState<string>('')\n  const [taxRatio, setTaxRatio] = useState<string>('')\n  const [loading, setLoading] = useState(false)\n  const poolData = pools[poolAddress]\n  const { fee_ratio, tax_ratio } = poolData || {}\n\n  const onUpdateFee = async () => {\n    setLoading(true)\n    const feeAmount = utils.decimalize(\n      feeRatio || currentFee,\n      FEE_DECIMALS_PERCENT,\n    )\n    const taxAmount = utils.decimalize(\n      taxRatio || currentTax,\n      FEE_DECIMALS_PERCENT,\n    )\n    // PRECISION\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    const { txId } = await swap.updateFee(\n      feeAmount,\n      taxAmount,\n      poolAddress,\n      wallet,\n    )\n    setLoading(false)\n    if (!txId)\n      return window.notify({\n        type: 'error',\n        description: 'Update fee make failure.',\n      })\n    setFeeRatio('')\n    setTaxRatio('')\n    return window.notify({\n      type: 'success',\n      description: 'Update fee successfully. Click to view details',\n      onClick: () => window.open(explorer(txId), '_blank'),\n    })\n  }\n\n  const currentFee = useMemo(() => {\n    if (!fee_ratio) return '0'\n    return utils.undecimalize(fee_ratio, FEE_DECIMALS_PERCENT)\n  }, [fee_ratio])\n\n  const currentTax = useMemo(() => {\n    if (!tax_ratio) return '0'\n    return utils.undecimalize(tax_ratio, FEE_DECIMALS_PERCENT)\n  }, [tax_ratio])\n\n  return (\n    <Row gutter={[16, 24]}>\n      <Col span={24}>\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <FeeInput\n              title=\"Fee (%)\"\n              label=\"Current fee\"\n              ratio={feeRatio}\n              currentRatio={currentFee}\n              onChange={setFeeRatio}\n            />\n          </Col>\n          <Col span={24}>\n            <FeeInput\n              title=\"Tax (%)\"\n              label=\"Current tax\"\n              ratio={taxRatio}\n              currentRatio={currentTax}\n              onChange={setTaxRatio}\n            />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Button\n          onClick={onUpdateFee}\n          icon={<IonIcon name=\"cash-outline\" />}\n          block\n          loading={loading}\n          disabled={!taxRatio && !feeRatio}\n        >\n          Update Fee\n        </Button>\n      </Col>\n    </Row>\n  )\n}\nexport default Fee\n","import { useMemo, useState } from 'react'\n\nimport { Button, Row, Col, Typography, Badge, Space } from 'antd'\nimport { usePool } from 'senhub/providers'\nimport { explorer } from 'shared/util'\nimport IonIcon from 'shared/antd/ionicon'\n\nenum PoolStatus {\n  Frozen = 2,\n  Active = 1,\n}\n\nconst CardDescription = ({\n  poolStatus,\n  description,\n}: {\n  poolStatus: PoolStatus\n  description: string\n}) => {\n  const status = poolStatus === PoolStatus.Active\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Space size={0}>\n          <Badge status={status ? 'success' : 'error'} />\n          <Typography.Text>\n            Current status: {status ? 'Active' : 'Frozen'}\n          </Typography.Text>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Space size={4} align=\"start\">\n          <IonIcon name=\"information-circle-outline\" />\n          <Space direction=\"vertical\" size={0}>\n            <Typography.Text type=\"secondary\">{description}</Typography.Text>\n          </Space>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nconst Freeze = ({ address }: { address: string }) => {\n  const { pools } = usePool()\n  const [loading, setLoading] = useState(false)\n  const poolData = pools[address]\n\n  const onFreezePool = async () => {\n    setLoading(true)\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    const { txId } = await swap.freezePool(address, wallet)\n    setLoading(false)\n    if (!txId)\n      return window.notify({\n        type: 'error',\n        description: 'Freeze the pool make failure.',\n      })\n    return window.notify({\n      type: 'success',\n      description: 'Freeze the pool successfully. Click to view details',\n      onClick: () => window.open(explorer(txId), '_blank'),\n    })\n  }\n\n  const onThawPool = async () => {\n    setLoading(true)\n    const { swap, wallet } = window.sentre\n    if (!wallet) return\n    const { txId } = await swap.thawPool(address, wallet)\n    setLoading(false)\n    if (!txId)\n      return window.notify({\n        type: 'error',\n        description: 'Thaw the pool make failure.',\n      })\n    return window.notify({\n      type: 'success',\n      description: 'Thaw the pool successfully. Click to view details',\n      onClick: () => window.open(explorer(txId), '_blank'),\n    })\n  }\n\n  const description = useMemo(() => {\n    const state = poolData?.state\n    if (state === PoolStatus.Active)\n      return (\n        <CardDescription\n          poolStatus={state}\n          description=\"Freezing a pool will prevent all actions until the pool has been thawed.\"\n        />\n      )\n\n    if (state === PoolStatus.Frozen)\n      return (\n        <CardDescription\n          poolStatus={state}\n          description=\"Thaw a pool will active all actions\"\n        />\n      )\n    return 'Pool is closed'\n  }, [poolData?.state])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>{description}</Col>\n      <Col span={24}>\n        {poolData?.state === PoolStatus.Active ? (\n          <Button\n            style={{ background: '#40A9FF', color: '#fff' }}\n            onClick={onFreezePool}\n            icon={<IonIcon name=\"snow-outline\" />}\n            block\n            loading={loading}\n          >\n            Freeze Pool\n          </Button>\n        ) : (\n          <Button\n            type=\"primary\"\n            onClick={onThawPool}\n            icon={<IonIcon name=\"sunny-outline\" />}\n            block\n            loading={loading}\n          >\n            Thaw Pool\n          </Button>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default Freeze\n","import { useState } from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport { Button, Row, Col, Input, Card, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { explorer } from 'shared/util'\n\nconst TransferOwner = ({ address: poolAddress }: { address: string }) => {\n  const [newOwner, setNewOwner] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const onTransferOwner = async () => {\n    await setLoading(true)\n    try {\n      const { swap, wallet } = window.sentre\n      if (!wallet) throw new Error('Wallet is not connected.')\n      const { txId } = await swap.transferPoolOwnership(\n        poolAddress,\n        newOwner,\n        wallet,\n      )\n      return window.notify({\n        type: 'success',\n        description: 'Transfer successfully. Click to view details.',\n        onClick: () => window.open(explorer(txId), '_blank'),\n      })\n    } catch (er: any) {\n      return window.notify({\n        type: 'error',\n        description: er.message,\n      })\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Space align=\"start\">\n          <IonIcon name=\"information-circle-outline\" />\n          <Typography.Text>\n            Your current account will lose the pool control when you transfer\n            ownership.\n          </Typography.Text>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <Card\n          bodyStyle={{ padding: 8 }}\n          style={{\n            background: 'transparent',\n            borderRadius: 8,\n            boxShadow: 'none',\n          }}\n        >\n          <Row gutter={[0, 0]}>\n            <Col span={24}>\n              <Typography.Text\n                style={{ marginLeft: 12, fontSize: 12 }}\n                type=\"secondary\"\n              >\n                Transfer to Owner\n              </Typography.Text>\n            </Col>\n            <Col span={24}>\n              <Input\n                placeholder=\"E.g. AgTMC...\"\n                value={newOwner}\n                onChange={(e: any) => setNewOwner(e.target.value)}\n                bordered={false}\n              />\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n      <Col span={24}>\n        <Button\n          onClick={onTransferOwner}\n          icon={<IonIcon name=\"airplane-outline\" />}\n          disabled={!account.isAddress(newOwner)}\n          loading={loading}\n          block\n        >\n          Transfer\n        </Button>\n      </Col>\n    </Row>\n  )\n}\nexport default TransferOwner\n","import { Card, Tabs } from 'antd'\nimport Fee from './fee'\nimport Freeze from './freeze'\nimport TransferOwner from './transferOwner'\n\nconst PoolManagement = ({ poolAddress }: { poolAddress: string }) => {\n  return (\n    <Card\n      style={{ minHeight: 285 }}\n      bodyStyle={{ padding: 0 }}\n      bordered={false}\n    >\n      <Tabs style={{ padding: 24 }}>\n        <Tabs.TabPane key=\"freeze-thaw\" tab=\"Freeze/Thaw\">\n          <Freeze address={poolAddress} />\n        </Tabs.TabPane>\n        <Tabs.TabPane key=\"fee\" tab=\"Fee\">\n          <Fee address={poolAddress}></Fee>\n        </Tabs.TabPane>\n        <Tabs.TabPane key=\"transfer-owner\" tab=\"Transfer Owner\">\n          <TransferOwner address={poolAddress} />\n        </Tabs.TabPane>\n      </Tabs>\n    </Card>\n  )\n}\n\nexport default PoolManagement\n","import { useCallback, useState, useRef, useEffect } from 'react'\nimport Chart from 'chart.js'\nimport isEqual from 'react-fast-compare'\n\nimport { numeric } from 'shared/util'\ninterface Props {\n  labels?: (number | string)[]\n  chartData?: (number | string)[]\n  configs?: { backgroundColor?: string } & object\n  type?: string\n  disableAxe?: boolean\n  chartHeight?: string\n  chartId?: string\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#dadada'\n\nconst SenChart = ({\n  chartData = [],\n  labels = [],\n  type = 'line',\n  configs,\n  disableAxe = false,\n  chartId = 'sen_chart',\n}: Props) => {\n  const { backgroundColor } = configs || {}\n  const [isRebuildChart, setRebuildChart] = useState<boolean>(false)\n\n  const formatData = useCallback(\n    (\n      data: Array<number | number[] | undefined | null | any>,\n      label: Array<string | number>,\n      background?: string | CanvasGradient | undefined,\n    ): Chart.ChartData => ({\n      labels: label,\n      datasets: [{ ...configs, data, backgroundColor: background }],\n    }),\n    [configs],\n  )\n  // use a ref to store the chart instance since it it mutable\n  const chartRef = useRef<Chart | null>(null)\n\n  // callback creates the chart on the canvas element\n  const canvasCallback = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return\n    const ctx = canvas.getContext('2d')\n    if (ctx && !isRebuildChart) {\n      // create new chart\n      chartRef.current = new Chart(ctx, {\n        type: type,\n        data: {\n          labels: [],\n          datasets: [\n            {\n              data: [],\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawBorder: false,\n                  display: false,\n                },\n                ticks: {\n                  display: !disableAxe,\n                  beginAtZero: false,\n                  maxTicksLimit: 8,\n                  callback: function (value, index, values) {\n                    return numeric(value).format('0,0.[0]a')\n                  },\n                },\n              },\n            ],\n          },\n          plugins: {\n            legend: false,\n          },\n          hover: {\n            onHover: (event, elements) => {\n              const target = document.getElementById(chartId)\n              if (!target) return\n              target.style.cursor = elements[0] ? 'pointer' : 'default'\n            },\n          },\n        },\n      })\n      setRebuildChart(true)\n    }\n  }\n\n  const getBackground = useCallback(() => {\n    if (!chartRef || !backgroundColor) return DEFAULT_BACKGROUND_COLOR\n    const ctx = chartRef?.current?.canvas?.getContext('2d')\n    const gradient = ctx?.createLinearGradient(0, 0, 0, 270)\n    gradient?.addColorStop(0, backgroundColor)\n    gradient?.addColorStop(1, `${backgroundColor}00`)\n    const background = type === 'line' ? gradient : backgroundColor\n    return background\n  }, [backgroundColor, type])\n\n  useEffect(() => {\n    const chartInstance = chartRef.current\n    const dataInstace = chartInstance?.data.datasets?.find(({ data }) => data)\n    const compareData = isEqual(dataInstace?.data, chartData)\n    if (chartInstance && !compareData) {\n      chartInstance.data = formatData(chartData, labels, getBackground())\n      chartInstance?.update()\n    }\n  }, [chartData, formatData, getBackground, labels])\n\n  return <canvas id={chartId} height=\"270\" ref={canvasCallback}></canvas>\n}\n\nexport default SenChart\n","export class DailyReport {\n  programId = ''\n  time: number = 0\n  address: string = ''\n  mint: string = ''\n  actionType: string = ''\n  amountIn: bigint = BigInt(0)\n  amountOut: bigint = BigInt(0)\n  totalTrans: number = 0\n}\n","import { PoolData } from '@senswap/sen-js'\nimport { DailyReport } from '../entities/daily-report'\nimport { TransLog } from '../entities/trans-log'\n\nexport default class DailyReportService {\n  parserDailyReport(transLogs: TransLog[]): DailyReport[] {\n    let reports = new Array<DailyReport>()\n    for (const transLog of transLogs) {\n      reports = reports.concat(this.parseDailyReport(transLog))\n    }\n    return this.mergeDailyReport(reports)\n  }\n\n  parseDailyReport(transLog: TransLog): DailyReport[] {\n    const dailyReports = new Array<DailyReport>()\n    const { programId, time, actionType, actionTransfers } = transLog\n    for (const transfer of actionTransfers) {\n      const { source, destination, amount } = transfer\n\n      const report = new DailyReport()\n      report.programId = programId\n      report.time = time\n      report.actionType = actionType\n\n      if (source) {\n        const { mint, address } = source\n        dailyReports.push({\n          ...report,\n          mint: mint,\n          address: address,\n          amountOut: BigInt(amount),\n        })\n      }\n      if (destination) {\n        const { mint, address } = destination\n        dailyReports.push({\n          ...report,\n          mint: mint,\n          address: address,\n          amountIn: BigInt(amount),\n        })\n      }\n    }\n    return dailyReports\n  }\n\n  mergeDailyReport(dailyReports: Array<DailyReport>): Array<DailyReport> {\n    const map = new Map<string, DailyReport>()\n    for (const report of dailyReports) {\n      const key = `${report.time}^${report.address}^${report.mint}^${report.actionType}`\n      if (map.has(key)) {\n        const val = map.get(key)\n        if (val !== undefined) {\n          report.amountIn += val.amountIn\n          report.amountOut += val.amountOut\n          report.totalTrans += val.totalTrans\n        }\n      }\n      map.set(key, report)\n    }\n    const results = new Array<DailyReport>()\n    map.forEach((report) => results.push(report))\n    return results\n  }\n}\n\nexport type MapTreasury = { poolAddress: string; data: PoolData }\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { path: cid } = await ipfs.add(raw)\n    return cid as string\n  }\n}\n\nexport default IPFS\n","import localForage from 'localforage'\nimport { account } from '@senswap/sen-js'\nimport IPFS from './ipfs'\n\n/**\n * Persistent Database\n */\nclass PDB {\n  readonly dbName: string\n  private driver: any\n  private ipfs: IPFS\n\n  constructor(walletAddress: string) {\n    if (!account.isAddress(walletAddress)) throw new Error('Invalid address')\n    this.dbName = walletAddress\n    this.driver = [localForage.WEBSQL, localForage.LOCALSTORAGE]\n    this.ipfs = new IPFS()\n  }\n\n  /**\n   * Local\n   */\n\n  createInstance = (appId: string): LocalForage => {\n    return localForage.createInstance({\n      driver: this.driver,\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  dropInstance = async (appId: string): Promise<void> => {\n    const instance = this.createInstance(appId)\n    await instance.clear()\n    return await localForage.dropInstance({\n      name: this.dbName,\n      storeName: appId,\n    })\n  }\n\n  all = async (): Promise<any> => {\n    let data: any = {}\n    const appIds = (\n      ((await this.createInstance('sentre').getItem('appIds')) as string[]) ||\n      []\n    )\n      .flat()\n      .concat(['sentre'])\n    for (const appId of appIds) {\n      data[appId] = {}\n      const instance = this.createInstance(appId)\n      await instance.iterate((value: string, key: string) => {\n        data[appId][key] = value\n      })\n    }\n    return data\n  }\n\n  /**\n   * Cloud\n   */\n\n  fetch = async (cid: string) => {\n    return await this.ipfs.get(cid)\n  }\n\n  backup = async () => {\n    const data = await this.all()\n    return await this.ipfs.set(data)\n  }\n\n  restore = async (cid: string) => {\n    // Download data\n    const data = await this.fetch(cid)\n    // Apply to storage\n    for (const appId in data) {\n      const instance = await this.createInstance(appId)\n      for (const key in data[appId]) {\n        const value = data[appId][key]\n        await instance.setItem(key, value)\n      }\n    }\n    return data\n  }\n}\n\nexport default PDB\n\n/**\n * High abtraction pdb for app\n */\nexport const createPDB = (walletArress: string, appId: string) => {\n  return account.isAddress(walletArress)\n    ? new PDB(walletArress).createInstance(appId)\n    : undefined\n}\n","export class TransLog {\n  programId: string = ''\n  programInfo: ProgramInfo | undefined\n  signature: string = ''\n  blockTime: number = 0\n  time: number = 0\n  owner: string = ''\n  actionType: string = ''\n  actionTransfers: Array<ActionTransfer> = []\n  programTransfer: Array<ActionTransfer> = []\n}\n\nexport class ActionInfo {\n  address: string = ''\n  mint: string = ''\n  decimals: number = 0\n  preBalance: string = '0'\n  postBalance: string = '0'\n}\n/**\n * Amount is not same postBalance - preBalance\n * @postBalance and @preBalance are balance after all action (transaction)\n * @postBalance = @preBalance +- all @amount (multi amount in transaction)\n * @amount is value in 1 action\n */\nexport class ActionTransfer {\n  source: ActionInfo | undefined\n  destination: ActionInfo | undefined\n  amount: string = '0'\n}\ntype ProgramInfo = {\n  programId: string\n  data: string\n}\n","import {\n  ConfirmedSignatureInfo,\n  ConfirmedSignaturesForAddress2Options,\n  Connection,\n  ParsedConfirmedTransaction,\n  PublicKey,\n} from '@solana/web3.js'\n\nimport { OptionsFetchSignature } from '../../constants/transaction'\n\nconst DEFAULT_LIMIT = 700\nconst TRANSACTION_LIMIT = 200\n\nexport class Solana {\n  private conn: Connection = window.sentre.splt.connection\n\n  //Search for all signatures from last Signature and earlier\n  //So: If new collection (to now) -> last Signature = null\n  private async fetchSignatures(\n    address: PublicKey,\n    lastSignature?: string,\n    limit: number = DEFAULT_LIMIT,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    if (limit > DEFAULT_LIMIT) limit = DEFAULT_LIMIT\n    const options: ConfirmedSignaturesForAddress2Options = {\n      limit: limit,\n      before: lastSignature,\n    }\n    return this.conn.getConfirmedSignaturesForAddress2(address, options)\n  }\n\n  private async fetchConfirmTransaction(signatures: string[]) {\n    let confirmedTransactions: ParsedConfirmedTransaction[] = []\n    let limit = TRANSACTION_LIMIT\n\n    const promiseTransGroup = []\n    for (let offset = 0; offset <= signatures.length / limit; offset++) {\n      const skip = offset * limit\n      const signaturesGroup = signatures.slice(skip, skip + limit)\n      promiseTransGroup.push(\n        this.conn.getParsedConfirmedTransactions(signaturesGroup),\n      )\n    }\n\n    const transGroups = await Promise.all(promiseTransGroup)\n    for (const transGroup of transGroups) {\n      //@ts-ignore\n      confirmedTransactions = confirmedTransactions.concat(transGroup)\n    }\n    return confirmedTransactions\n  }\n\n  async fetchTransactions(\n    programId: string,\n    options: OptionsFetchSignature,\n  ): Promise<ParsedConfirmedTransaction[]> {\n    const currentTime = new Date().getTime() / 1000\n    let { secondFrom, secondTo, lastSignature, limit } = options\n    secondFrom = Math.floor(secondFrom || 0)\n    secondTo = Math.floor(secondTo || currentTime)\n\n    const programPublicKey = new PublicKey(programId)\n    let signatures: string[] = []\n    let isStop = false\n\n    while (!isStop) {\n      const confirmedSignatureInfos: ConfirmedSignatureInfo[] =\n        await this.fetchSignatures(programPublicKey, lastSignature, limit)\n      if (!confirmedSignatureInfos?.length || isStop) break\n      for (const info of confirmedSignatureInfos) {\n        const blockTime = info.blockTime\n        if (!blockTime || blockTime > secondTo) continue\n        if (blockTime < secondFrom) {\n          isStop = true\n          break\n        }\n        lastSignature = info.signature\n        signatures.push(info.signature)\n      }\n\n      if (limit && signatures.length >= limit) break\n      if (confirmedSignatureInfos?.length < DEFAULT_LIMIT) break\n    }\n    const confirmedTransactions = await this.fetchConfirmTransaction(signatures)\n    return confirmedTransactions\n  }\n}\n","export enum ParsedType {\n  Transfer = 'transfer',\n}\n\nexport type ParsedAction = {\n  type: ParsedType\n  info: ParsedInfoTransfer\n}\n\nexport type ParsedInfoTransfer = {\n  source: string\n  destination: string\n  amount: string\n  lamports: number\n}\n\nexport type OptionsFetchSignature = {\n  limit?: number\n  lastSignature?: string\n  secondFrom?: number\n  secondTo?: number\n}\n","import moment from 'moment'\n\nconst SECOND_PER_MILLISECOND = 1000\n\nexport enum TimeFormat {\n  YMD = 'YYYYMMDD',\n  SortableTimePattern = 'YYYY-MM-DD HH:mm:ss',\n}\n\nexport class DateHelper {\n  private milliSeconds: number = new Date().valueOf()\n\n  setMilliSeconds(milliSeconds: number) {\n    this.milliSeconds = milliSeconds\n  }\n\n  static fromSeconds(seconds: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = seconds * SECOND_PER_MILLISECOND\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static fromYmd(ymd: number): DateHelper {\n    const date = new DateHelper()\n    const milliSeconds = moment(ymd, TimeFormat.YMD).valueOf()\n    date.setMilliSeconds(milliSeconds)\n    return date\n  }\n\n  static getListDate(ymdFrom: number, ymdTo: number): number[] {\n    const dates: number[] = []\n    let dateFrom = DateHelper.fromYmd(ymdFrom)\n    const dateTo = DateHelper.fromYmd(ymdTo)\n    while (dateFrom.ymd() <= dateTo.ymd()) {\n      dates.push(dateFrom.ymd())\n      dateFrom = dateFrom.addDay()\n    }\n    return dates\n  }\n\n  format(dateFormat: TimeFormat): string {\n    const date = new Date(this.milliSeconds)\n    return moment(date).format(dateFormat)\n  }\n\n  subtractDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .subtract(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  addDay(dayAmount: number = 1): DateHelper {\n    const milliSeconds = moment(this.milliSeconds)\n      .add(dayAmount, 'days')\n      .valueOf()\n    const date = DateHelper.fromSeconds(milliSeconds / SECOND_PER_MILLISECOND)\n    return date\n  }\n\n  seconds(): number {\n    return (\n      (this.milliSeconds - (this.milliSeconds % SECOND_PER_MILLISECOND)) /\n      SECOND_PER_MILLISECOND\n    )\n  }\n\n  ymd(): number {\n    return Number(this.format(TimeFormat.YMD))\n  }\n\n  static today(format: string = TimeFormat.YMD): string {\n    return moment().format(format)\n  }\n}\n","import base58 from 'bs58'\nimport { TransLog } from './../../entities/trans-log'\nimport { TransLogService } from './../translog'\n\nconst { struct } = require('soprox-abi')\n\nconst TRANSLOG_PROGRAM_DATA_SCHEMA = { key: 'code', type: 'u8' }\n\nexport enum SwapActionType {\n  InitPool = 'INITIALIZE_POOL',\n  AddLiquidity = 'ADD_LIQUIDITY',\n  RemoveLiquidity = 'REMOVE_LIQUIDITY',\n  Swap = 'SWAP',\n  Route = 'SWAP',\n}\n\nconst ACTION_TYPE: Record<number, SwapActionType> = {\n  0: SwapActionType.InitPool,\n  1: SwapActionType.AddLiquidity,\n  2: SwapActionType.RemoveLiquidity,\n  3: SwapActionType.Swap,\n  8: SwapActionType.Route,\n}\n\nexport default class PoolTransLogService extends TransLogService {\n  parseAction = (transLog: TransLog) => {\n    const programDataEncode = transLog.programInfo?.data\n    if (!programDataEncode) return ''\n    const dataBuffer = base58.decode(programDataEncode)\n    const actionLayout = new struct([TRANSLOG_PROGRAM_DATA_SCHEMA])\n    const programDataDecode: { code: number } = actionLayout.fromBuffer(\n      Buffer.from(dataBuffer),\n    )\n    return ACTION_TYPE[programDataDecode.code] || ''\n  }\n}\n","//@ts-ignore\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  ParsedMessageAccount,\n  PartiallyDecodedInstruction,\n  TokenBalance,\n} from '@solana/web3.js'\nimport { account } from '@senswap/sen-js'\n\nimport { ActionInfo, ActionTransfer, TransLog } from '../entities/trans-log'\nimport { Solana } from '../adapters/solana/client'\nimport {\n  OptionsFetchSignature,\n  ParsedAction,\n  ParsedInfoTransfer,\n  ParsedType,\n} from '../constants/transaction'\nimport { DateHelper } from '../helpers/date'\nimport { SOL_ADDRESS, SOL_DECIMALS } from '../constants/sol'\n\ntype InstructionData = ParsedInstruction | PartiallyDecodedInstruction\n\nexport class TransLogService {\n  protected parseAction = (transLog: TransLog) => {\n    return ''\n  }\n\n  async collect(\n    programId: string,\n    configs: OptionsFetchSignature,\n    filterTransLog?: (transLog: TransLog) => Promise<boolean>,\n  ): Promise<TransLog[]> {\n    let { lastSignature, limit } = configs\n    const solana = new Solana()\n    let transLogs: Array<TransLog> = []\n    let lastSignatureTmp = lastSignature\n    let isStop = false\n    let smartLimit = 200\n    while (!isStop) {\n      const confirmedTrans: ParsedConfirmedTransaction[] =\n        await solana.fetchTransactions(programId, {\n          ...configs,\n          lastSignature: lastSignatureTmp,\n          limit: smartLimit,\n        })\n\n      for (const trans of confirmedTrans) {\n        lastSignatureTmp = trans.transaction.signatures[0]\n        const log = this.parseTransLog(trans)\n        if (!log) continue\n        // filter\n        if (filterTransLog) {\n          const checked = await filterTransLog(log)\n          if (!checked) continue\n        }\n        transLogs.push(log)\n\n        if (limit && transLogs.length >= limit) {\n          isStop = true\n          break\n        }\n      }\n      if (limit) smartLimit = (smartLimit * limit) / (transLogs.length || 1)\n      if (!confirmedTrans.length) break\n      if (isStop) break\n    }\n    return transLogs\n  }\n\n  private parseTransLog(\n    confirmedTrans: ParsedConfirmedTransaction,\n  ): TransLog | undefined {\n    const { blockTime, meta, transaction } = confirmedTrans\n    if (!blockTime || !meta) return\n    const { postTokenBalances, preTokenBalances, postBalances, preBalances } =\n      meta\n    const { signatures, message } = transaction\n\n    const innerInstructionData = meta.innerInstructions?.[0]?.instructions || []\n    const instructionData = message.instructions[0] || []\n\n    const transLog = new TransLog()\n    transLog.signature = signatures[0]\n    transLog.blockTime = blockTime\n    transLog.time = DateHelper.fromSeconds(blockTime).ymd()\n    transLog.programId = instructionData.programId.toString()\n\n    const mapAccount = this.parseAccountInfo(\n      message.accountKeys,\n      postTokenBalances || [],\n      preTokenBalances || [],\n      postBalances,\n      preBalances,\n    )\n    // system program transaction\n    if (this.isParsedInstruction(instructionData)) {\n      transLog.programTransfer = this.parseListActionTransfer(\n        [instructionData],\n        mapAccount,\n      )\n      return transLog\n    }\n    // smart contract transaction\n    transLog.actionTransfers = this.parseListActionTransfer(\n      innerInstructionData,\n      mapAccount,\n    )\n    transLog.programInfo = {\n      programId: instructionData.programId.toString(),\n      data: (instructionData as PartiallyDecodedInstruction).data,\n    }\n    transLog.actionType = ''\n    transLog.actionType = this.parseAction(transLog)\n\n    return transLog\n  }\n\n  private isParsedInstruction(instructionData: InstructionData) {\n    return (instructionData as ParsedInstruction).parsed !== undefined\n  }\n\n  private parseListActionTransfer(\n    actions: InstructionData[],\n    mapAccount: Map<string, ActionInfo>,\n  ) {\n    const actionTransfer: ActionTransfer[] = []\n    for (const action of actions) {\n      if (!this.isParsedInstruction(action)) continue\n      const actionParsed: ParsedAction =\n        (action as ParsedInstruction).parsed || {}\n      switch (actionParsed.type) {\n        case ParsedType.Transfer:\n          const info: ParsedInfoTransfer = actionParsed.info\n          const parsedAction = this.parseActionTransfer(info, mapAccount)\n          if (parsedAction) actionTransfer.push(parsedAction)\n          break\n        default:\n          break\n      }\n    }\n    return actionTransfer\n  }\n\n  private parseActionTransfer(\n    parsedTransfer: ParsedInfoTransfer,\n    mapAccount: Map<string, ActionInfo>,\n  ): ActionTransfer | undefined {\n    const { source, destination, amount, lamports } = parsedTransfer\n    const amountTransfer = amount || lamports.toString()\n\n    if (\n      !amountTransfer ||\n      !mapAccount.has(source) ||\n      !mapAccount.has(destination)\n    )\n      return\n\n    const actionTransfer = new ActionTransfer()\n    actionTransfer.source = mapAccount.get(source)\n    actionTransfer.destination = mapAccount.get(destination)\n    actionTransfer.amount = amountTransfer\n    return actionTransfer\n  }\n\n  private parseAccountInfo(\n    accountKeys: Array<ParsedMessageAccount>,\n    postTokenBalances: Array<TokenBalance>,\n    preTokenBalances: Array<TokenBalance>,\n    postBalances: number[],\n    preBalances: number[],\n  ): Map<string, ActionInfo> {\n    const mapAccountInfo = new Map<string, ActionInfo>()\n\n    // Associated Address\n    for (const postBalance of postTokenBalances) {\n      const { accountIndex, mint, uiTokenAmount } = postBalance\n      const info = new ActionInfo()\n      info.address = accountKeys[accountIndex].pubkey.toString()\n      info.postBalance = uiTokenAmount.amount\n      info.mint = mint\n      info.decimals = uiTokenAmount.decimals\n      mapAccountInfo.set(info.address, info)\n    }\n\n    for (const preBalance of preTokenBalances) {\n      const { accountIndex, uiTokenAmount } = preBalance\n      const address = accountKeys[accountIndex].pubkey.toString()\n      const info = mapAccountInfo.get(address) || new ActionInfo()\n      info.preBalance = uiTokenAmount.amount\n      mapAccountInfo.set(info.address, info)\n    }\n\n    // Wallet address\n    accountKeys.forEach((accountData, idx) => {\n      const address = accountData.pubkey.toString()\n      if (!account.isAssociatedAddress(address)) {\n        const info = mapAccountInfo.get(address) || new ActionInfo()\n        info.address = address\n        info.mint = SOL_ADDRESS\n        info.postBalance = String(postBalances[idx] || 0) // lamports\n        info.preBalance = String(preBalances[idx] || 0) // lamports\n        info.decimals = SOL_DECIMALS\n        mapAccountInfo.set(info.address, info)\n      }\n    })\n\n    return mapAccountInfo\n  }\n}\n","export const SOL_ADDRESS = '11111111111111111111111111111111'\n\nexport const SOL_DECIMALS = 9\n","import { PoolData, utils } from '@senswap/sen-js'\n\nimport DailyReportService from '../daily-report'\nimport PDB from 'shared/pdb'\nimport PoolTransLogService, { SwapActionType } from './poolTranslog'\nimport { TransLog } from 'app/stat/entities/trans-log'\n\nimport { fetchCGK } from 'shared/util'\nimport TokenProvider from 'os/providers/tokenProvider'\nimport { TotalSummary } from 'app/stat/constants/summary'\nimport { DailyReport } from 'app/stat/entities/daily-report'\nimport { DateHelper } from 'app/stat/helpers/date'\n\nconst DATE_RANGE = 11\n\nexport default class PoolService {\n  poolAddress: string\n  poolData: PoolData | undefined\n  poolTransLogService = new PoolTransLogService()\n  dailyReportService = new DailyReportService()\n  tokenProvider = new TokenProvider()\n\n  constructor(poolAddress: string) {\n    this.poolAddress = poolAddress\n  }\n\n  getPoolData = async (): Promise<PoolData> => {\n    if (!this.poolData) {\n      const swap = window.sentre.swap\n      this.poolData = await swap.getPoolData(this.poolAddress)\n    }\n    return this.poolData\n  }\n\n  getUsd = async (mint: string, amountBigint: bigint) => {\n    const mintInfo = await this.tokenProvider.findByAddress(mint)\n    if (!mintInfo) return 0\n    const { decimals, extensions } = mintInfo\n    try {\n      const cgkData = await fetchCGK(extensions?.coingeckoId)\n      if (!cgkData?.price) return 0\n      const amount = utils.undecimalize(amountBigint, decimals)\n      return Number(amount) * cgkData.price\n    } catch (error) {\n      return 0\n    }\n  }\n\n  fetchTransLog = async (timeFrom: number, timeTo: number) => {\n    const db = new PDB(this.poolAddress).createInstance('stat')\n    let cacheTransLog: TransLog[] = (await db.getItem('translogs')) || []\n    cacheTransLog = cacheTransLog.sort((a, b) => b.blockTime - a.blockTime)\n    const fistTransLog = cacheTransLog[0]\n    const lastTransLog = cacheTransLog[cacheTransLog.length - 1]\n\n    if (fistTransLog && lastTransLog) {\n      const [beginTransLogs] = await Promise.all([\n        this.poolTransLogService.collect(this.poolAddress, {\n          secondFrom: fistTransLog.blockTime,\n          secondTo: timeTo,\n        }),\n      ])\n      cacheTransLog = cacheTransLog.filter(\n        (trans) => trans.blockTime > timeFrom,\n      )\n      cacheTransLog = [...beginTransLogs, ...cacheTransLog]\n    } else {\n      cacheTransLog = await this.poolTransLogService.collect(this.poolAddress, {\n        secondFrom: timeFrom,\n        secondTo: timeTo,\n      })\n    }\n    await db.setItem('translogs', cacheTransLog)\n    return cacheTransLog\n  }\n  getDailyInfo = async () => {\n    let timeTo = new DateHelper()\n    const timeFrom = new DateHelper().subtractDay(DATE_RANGE)\n    const {\n      mint_a,\n      mint_b,\n      treasury_a,\n      treasury_b,\n      reserve_a,\n      reserve_b,\n      fee_ratio,\n      tax_ratio,\n    } = await this.getPoolData()\n\n    // fetch transLog\n    const transLogs = await this.fetchTransLog(\n      timeFrom.seconds(),\n      timeTo.seconds(),\n    )\n    // parse daily + create map time\n    const dailyReports = this.dailyReportService.parserDailyReport(transLogs)\n    const mapTimeDailyReport: Record<number, DailyReport[]> = {}\n    for (const report of dailyReports) {\n      const { time, address } = report\n      // filter daily report\n      if (address !== treasury_a && address !== treasury_b) continue\n      if (!mapTimeDailyReport[time]) mapTimeDailyReport[time] = []\n      mapTimeDailyReport[time].push(report)\n    }\n    // parse summary\n    const tvlA = await this.getUsd(mint_a, reserve_a)\n    const tvlB = await this.getUsd(mint_b, reserve_b)\n\n    const mapTimeTotal: Record<string, TotalSummary> = {}\n\n    mapTimeTotal[timeTo.ymd()] = {\n      tvl: tvlA + tvlB,\n      fee: 0,\n      volume: 0,\n    }\n\n    while (timeTo.ymd() > timeFrom.ymd()) {\n      const reports = mapTimeDailyReport[timeTo.ymd()] || []\n      const currentReport = mapTimeTotal[timeTo.ymd()]\n      const prevDate = timeTo.subtractDay(1)\n      if (!mapTimeTotal[prevDate.ymd()] && prevDate.ymd() >= timeFrom.ymd()) {\n        mapTimeTotal[prevDate.ymd()] = {\n          tvl: currentReport.tvl,\n          fee: 0,\n          volume: 0,\n        }\n      }\n      for (const report of reports) {\n        const amountOut = await this.getUsd(report.mint, report.amountOut)\n        const amountIn = await this.getUsd(report.mint, report.amountIn)\n        if (mapTimeTotal[prevDate.ymd()]) {\n          mapTimeTotal[prevDate.ymd()].tvl += amountOut - amountIn\n          if (mapTimeTotal[prevDate.ymd()].tvl < 0)\n            mapTimeTotal[prevDate.ymd()].tvl = 0\n        }\n        if (report.actionType === SwapActionType.Swap) {\n          mapTimeTotal[timeTo.ymd()].volume += amountIn + amountOut\n          const fee =\n            Number(utils.undecimalize(fee_ratio + tax_ratio, 9)) * amountOut\n          mapTimeTotal[timeTo.ymd()].fee += fee\n        }\n      }\n      timeTo = timeTo.subtractDay(1)\n    }\n\n    return mapTimeTotal\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Card, Col, Row, Typography, Spin, Space, Button } from 'antd'\nimport SenChart from 'app/components/chart'\nimport PoolTVL from 'app/components/poolTVL'\n\nimport PoolService from 'app/stat/logic/pool/pool'\nimport { AppState } from 'app/model'\nimport { DataLoader } from 'shared/dataloader'\nimport IonIcon from 'shared/antd/ionicon'\nimport { useUI } from 'senhub/providers'\n\nconst CHART_CONFIGS = {\n  color: '#40A9FF',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\nconst TTL_5_MIN = 300000\n\nconst TotalValueLocked = () => {\n  const { selectedPoolAddress } = useSelector((state: AppState) => state.main)\n  const [chartData, setChartData] = useState<{ data: number; label: string }[]>(\n    [],\n  )\n  const [isLoading, setIsLoading] = useState(false)\n  const [visible, setVisible] = useState(true)\n  const {\n    ui: { width },\n  } = useUI()\n\n  const tvlChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n\n  const fetchChart = useCallback(async () => {\n    if (!selectedPoolAddress) return\n    try {\n      setIsLoading(true)\n      const poolService = new PoolService(selectedPoolAddress)\n      const poolStat = await DataLoader.load(\n        'getDailyInfo' + selectedPoolAddress,\n        poolService.getDailyInfo,\n        { cache: { ttl: TTL_5_MIN } },\n      )\n      const chartData = Object.keys(poolStat).map((time) => {\n        return {\n          data: poolStat[time].tvl,\n          label: moment(time, 'YYYYMMDD').format('MM/DD'),\n        }\n      })\n      setChartData(chartData)\n    } catch (error) {\n    } finally {\n      setIsLoading(false)\n    }\n  }, [selectedPoolAddress])\n  useEffect(() => {\n    fetchChart()\n  }, [fetchChart])\n\n  const iconName = visible ? 'chevron-down-outline' : 'chevron-forward-outline'\n  const isMobile = width < 768\n\n  useEffect(() => {\n    if (!isMobile) return setVisible(true)\n    return setVisible(false)\n  }, [isMobile])\n\n  return (\n    <Card bordered={false} style={{ height: 'auto' }}>\n      <Spin tip=\"Loading...\" spinning={isLoading}>\n        <Row gutter={[24, 24]} align=\"middle\">\n          <Col flex=\"auto\">\n            <Typography.Title level={4}>Total Value Locked</Typography.Title>\n          </Col>\n          <Col>\n            <Space size={0}>\n              <Typography.Title level={2}>\n                <PoolTVL poolAddress={selectedPoolAddress} />\n              </Typography.Title>\n              {isMobile && (\n                <Button\n                  type=\"text\"\n                  shape=\"circle\"\n                  icon={<IonIcon name={iconName} />}\n                  onClick={() => setVisible(!visible)}\n                />\n              )}\n            </Space>\n          </Col>\n          {visible && (\n            <Col span={24}>\n              <SenChart\n                chartData={chartData.map((e) => e.data)}\n                labels={chartData.map((e) => e.label)}\n                configs={tvlChartConfigs}\n              />\n            </Col>\n          )}\n        </Row>\n      </Spin>\n    </Card>\n  )\n}\n\nexport default TotalValueLocked\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nimport { Button, Card, Col, Row, Space, Spin, Typography } from 'antd'\nimport SenChart from 'app/components/chart'\n\nimport PoolService from 'app/stat/logic/pool/pool'\nimport { AppState } from 'app/model'\nimport { DataLoader } from 'shared/dataloader'\nimport { numeric } from 'shared/util'\nimport { useUI } from 'senhub/providers'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst CHART_CONFIGS = {\n  color: '#40A9FF',\n  radius: 0,\n  hitRadius: 14,\n  tooltip: 'TVL',\n  transparent: 'transparent',\n}\nconst TTL_5_MIN = 300000\n\nconst Volume24h = () => {\n  const { selectedPoolAddress } = useSelector((state: AppState) => state.main)\n  const [chartData, setChartData] = useState<{ data: number; label: string }[]>(\n    [],\n  )\n  const [loading, setLoading] = useState(false)\n  const [visible, setVisible] = useState(true)\n  const {\n    ui: { width },\n  } = useUI()\n\n  const volumeChartConfigs = {\n    borderColor: CHART_CONFIGS.transparent,\n    borderRadius: CHART_CONFIGS.radius,\n    pointRadius: CHART_CONFIGS.radius,\n    tooltip: CHART_CONFIGS.tooltip,\n    pointHitRadius: CHART_CONFIGS.hitRadius,\n    pointHoverRadius: CHART_CONFIGS.radius,\n    backgroundColor: CHART_CONFIGS.color,\n  }\n\n  const fetchChart = useCallback(async () => {\n    if (!selectedPoolAddress) return\n    try {\n      setLoading(true)\n      const poolService = new PoolService(selectedPoolAddress)\n      const poolStat = await DataLoader.load(\n        'getDailyInfo' + selectedPoolAddress,\n        poolService.getDailyInfo,\n        { cache: { ttl: TTL_5_MIN } },\n      )\n      const chartData = Object.keys(poolStat).map((time) => {\n        return {\n          data: poolStat[time].volume,\n          label: moment(time, 'YYYYMMDD').format('MM/DD'),\n        }\n      })\n      setChartData(chartData)\n    } catch (error) {\n    } finally {\n      setLoading(false)\n    }\n  }, [selectedPoolAddress])\n\n  useEffect(() => {\n    fetchChart()\n  }, [fetchChart])\n\n  const iconName = visible ? 'chevron-down-outline' : 'chevron-forward-outline'\n  const isMobile = width < 768\n\n  useEffect(() => {\n    if (!isMobile) return setVisible(true)\n    return setVisible(false)\n  }, [isMobile])\n\n  const vol24h = useMemo(() => {\n    const today = chartData[chartData.length - 1]?.data || 0\n    const yesterday = chartData[chartData.length - 2]?.data || 0\n    const house = new Date().getHours()\n    return today + (house * yesterday) / 24\n  }, [chartData])\n\n  return (\n    <Card bordered={false}>\n      <Spin tip=\"Loading...\" spinning={loading}>\n        <Row gutter={[24, 24]} align=\"middle\">\n          <Col flex=\"auto\">\n            <Typography.Title level={4}>24h Volume</Typography.Title>\n          </Col>\n          <Col>\n            <Space>\n              <Typography.Title level={2}>\n                ${numeric(vol24h).format('0,0.[0]a')}\n              </Typography.Title>\n              {isMobile && (\n                <Button\n                  type=\"text\"\n                  shape=\"circle\"\n                  icon={<IonIcon name={iconName} />}\n                  onClick={() => setVisible(!visible)}\n                />\n              )}\n            </Space>\n          </Col>\n          {visible && (\n            <Col span={24}>\n              <SenChart\n                type=\"bar\"\n                chartData={chartData.map((e) => e.data)}\n                labels={chartData.map((e) => e.label)}\n                configs={volumeChartConfigs}\n              />\n            </Col>\n          )}\n        </Row>\n      </Spin>\n    </Card>\n  )\n}\n\nexport default Volume24h\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { OrderState } from 'app/constant'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport configs from 'app/configs'\nimport { explorer } from 'shared/util'\n\nconst Action = ({ orderAddress }: { orderAddress: string }) => {\n  const [loading, setLoading] = useState(false)\n  const { orders } = useSelector((state: AppState) => state)\n  const { state, locked_time, updated_at } = orders[orderAddress] || {}\n\n  const onCancel = async () => {\n    try {\n      const { wallet } = window.sentre\n      const {\n        sol: { purchasing },\n      } = configs\n      if (!wallet) throw new Error('Wallet is not connected')\n      await setLoading(true)\n      const { txId } = await purchasing.cancelOrder(orderAddress, wallet)\n      return notifySuccess('Cancel the order', txId)\n    } catch (er: any) {\n      return notifyError(er)\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  const onRedeem = async () => {\n    try {\n      const { wallet } = window.sentre\n      const {\n        sol: { purchasing },\n      } = configs\n      if (!wallet) throw new Error('Wallet is not connected')\n      await setLoading(true)\n      const { txId } = await purchasing.redeemOrder(orderAddress, wallet)\n      return notifySuccess('Redeem the order', txId)\n    } catch (er: any) {\n      return notifyError(er)\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  const onDetail = async () => {\n    return window.open(explorer(orderAddress), '_blank')\n  }\n\n  if (state === OrderState.Open)\n    return (\n      <Button type=\"text\" size=\"small\" loading={loading} onClick={onCancel}>\n        Cancel\n      </Button>\n    )\n  if (state === OrderState.Approved) {\n    const locked = Number(locked_time) > Date.now() / 1000 - Number(updated_at)\n    return (\n      <Button\n        type=\"primary\"\n        size=\"small\"\n        disabled={locked}\n        loading={loading}\n        onClick={onRedeem}\n      >\n        Redeem\n      </Button>\n    )\n  }\n  return (\n    <Button\n      type=\"text\"\n      size=\"small\"\n      icon={<IonIcon name=\"open-outline\" />}\n      onClick={onDetail}\n    >\n      Detail\n    </Button>\n  )\n}\n\nexport default Action\n","import { Typography } from 'antd'\n\nconst Caption = ({ title }: { title: string }) => {\n  return (\n    <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\n      {title}\n    </Typography.Text>\n  )\n}\n\nexport default Caption\n","import { Tag, TagProps } from 'antd'\n\nimport { OrderState } from 'app/constant'\n\nconst BorderlessTag = (props: TagProps) => {\n  return <Tag style={{ border: 'none' }} {...props} />\n}\nconst OrderStatus = ({ state }: { state: number }) => {\n  if (state === OrderState.Open)\n    return <BorderlessTag color=\"gold\">Pending</BorderlessTag>\n  if (state === OrderState.Approved)\n    return <BorderlessTag color=\"cyan\">Approved</BorderlessTag>\n  if (state === OrderState.Done)\n    return <BorderlessTag color=\"green\">Done</BorderlessTag>\n  if (state === OrderState.Rejected)\n    return <BorderlessTag color=\"red\">Rejected</BorderlessTag>\n  if (state === OrderState.Canceled)\n    return <BorderlessTag color=\"volcano\">Canceled</BorderlessTag>\n  return <BorderlessTag>Unknown</BorderlessTag>\n}\n\nexport default OrderStatus\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport moment from 'moment'\n\nimport { Card, Row, Col, Space, Typography, Button, Collapse } from 'antd'\nimport { MintSymbol } from 'shared/antd/mint'\nimport IonIcon from 'shared/antd/ionicon'\nimport Action from './action'\nimport Caption from 'app/components/caption'\nimport OrderStatus from 'app/components/orderStatus'\n\nimport { AppState } from 'app/model'\nimport { numeric, shortenAddress } from 'shared/util'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst Order = ({ orderAddress }: { orderAddress: string }) => {\n  const [visible, setVisible] = useState(false)\n  const { orders, retailers } = useSelector((state: AppState) => state)\n\n  const {\n    retailer,\n    bid_amount,\n    ask_amount,\n    locked_time,\n    state,\n    created_at,\n    updated_at,\n  } = orders[orderAddress] || {}\n  const { mint_bid, mint_ask } = retailers[retailer] || {}\n  const bidDecimals = useMintDecimals(mint_bid) || 0\n  const askDecimals = useMintDecimals(mint_ask) || 0\n  const bidAmount = utils.undecimalize(bid_amount, bidDecimals)\n  const askAmount = utils.undecimalize(ask_amount, askDecimals)\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <Card\n          bordered={false}\n          bodyStyle={{ padding: 12 }}\n          className=\"order-card order-card-bg\"\n        >\n          <Row gutter={[12, 12]}>\n            <Col span={24}>\n              <Row gutter={[12, 12]}>\n                <Col flex=\"auto\">\n                  <Space style={{ fontSize: 12 }}>\n                    <Typography.Text type=\"secondary\">Order ID</Typography.Text>\n                    <Typography.Text>\n                      {shortenAddress(orderAddress)}\n                    </Typography.Text>\n                  </Space>\n                </Col>\n                <Col>\n                  <Button\n                    type=\"text\"\n                    size=\"small\"\n                    icon={\n                      <IonIcon\n                        name={\n                          visible\n                            ? 'chevron-down-outline'\n                            : 'chevron-forward-outline'\n                        }\n                      />\n                    }\n                    onClick={() => setVisible(!visible)}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col span={24}>\n              <Row gutter={[8, 8]} justify=\"space-between\">\n                <Col>\n                  <Space direction=\"vertical\">\n                    <Caption title=\"Payment\" />\n                    <Typography.Text ellipsis>\n                      {numeric(bidAmount).format('0,0.[0000]')} LP\n                    </Typography.Text>\n                  </Space>\n                </Col>\n                <Col>\n                  <Space direction=\"vertical\">\n                    <Caption title=\"Receiving\" />\n                    <Typography.Text style={{ fontWeight: 700 }} ellipsis>\n                      {numeric(askAmount).format('0,0.[0000]')}{' '}\n                      <MintSymbol mintAddress={mint_ask} />\n                    </Typography.Text>\n                  </Space>\n                </Col>\n                <Col>\n                  <Space direction=\"vertical\">\n                    <Caption title=\"Locktime\" />\n                    <Typography.Text>\n                      {Number(locked_time) / (24 * 60 * 60)} days\n                    </Typography.Text>\n                  </Space>\n                </Col>\n                <Col>\n                  <Space direction=\"vertical\">\n                    <Caption title=\"Status\" />\n                    <OrderStatus state={state} />\n                  </Space>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n      <Col span={24}>\n        <Collapse\n          activeKey={visible.toString()}\n          className=\"expand-card expand-card-bg\"\n        >\n          <Collapse.Panel header={null} key={'true'} showArrow={false}>\n            <Row gutter={[8, 8]} justify=\"space-between\" align=\"middle\">\n              <Col>\n                <Space direction=\"vertical\">\n                  <Caption title=\"Created At\" />\n                  <Typography.Text ellipsis>\n                    {moment(Number(created_at) * 1000).format(\n                      'HH:mm DD/MM/YYYY',\n                    )}\n                  </Typography.Text>\n                </Space>\n              </Col>\n              <Col>\n                <Space direction=\"vertical\">\n                  <Caption title=\"Updated At\" />\n                  <Typography.Text ellipsis>\n                    {moment(Number(updated_at) * 1000).format(\n                      'HH:mm DD/MM/YYYY',\n                    )}\n                  </Typography.Text>\n                </Space>\n              </Col>\n              <Col>\n                <Action orderAddress={orderAddress} />\n              </Col>\n            </Row>\n          </Collapse.Panel>\n        </Collapse>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Order\n","import { useSelector } from 'react-redux'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Col, Empty, Row } from 'antd'\nimport Order from './order'\n\nimport { AppState } from 'app/model'\nimport { usePool } from 'senhub/providers'\n\nconst Redeem = ({ poolAddress }: { poolAddress: string }) => {\n  const { orders, retailers } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n\n  const { mint_lpt } = pools[poolAddress] || {}\n  const orderAddresses = Object.keys(orders).filter((orderAddress) => {\n    const { retailer } = orders[orderAddress] || {}\n    const { mint_bid } = retailers[retailer] || {}\n    return mint_bid === mint_lpt\n  })\n\n  return (\n    <Row\n      gutter={[16, 16]}\n      style={{ height: 282 }}\n      className=\"scrollbar\"\n      justify=\"center\"\n      align=\"top\"\n    >\n      {!orderAddresses.length && (\n        <Col>\n          <Empty />\n        </Col>\n      )}\n      {orderAddresses.map((orderAddress) => (\n        <Col span={24} key={orderAddress}>\n          <LazyLoad height={125} overflow>\n            <Order orderAddress={orderAddress} />\n          </LazyLoad>\n        </Col>\n      ))}\n    </Row>\n  )\n}\n\nexport default Redeem\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { AppState } from 'app/model'\nimport { useWallet } from 'senhub/providers'\nimport configs from 'app/configs'\n\nconst LIMIT = 10000\n\nconst useNextOrderIndex = (retailerAddress: string): number => {\n  const [index, setIndex] = useState(0)\n  const { orders } = useSelector((state: AppState) => state)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const orderAddresses = Object.keys(orders)\n  const searchIndex = useCallback(async () => {\n    try {\n      const {\n        sol: { purchasing },\n      } = configs\n      let index = 0\n      while (index < LIMIT) {\n        const orderAddress = await purchasing.deriveOrderAddress(\n          index,\n          walletAddress,\n          retailerAddress,\n        )\n        if (!orderAddresses.includes(orderAddress)) break\n        index = index + 1\n      }\n      return setIndex(index)\n    } catch (er: any) {\n      return setIndex(0)\n    }\n  }, [retailerAddress, orderAddresses, walletAddress])\n\n  useEffect(() => {\n    searchIndex()\n  }, [searchIndex])\n\n  return index\n}\n\nexport default useNextOrderIndex\n","import { Fragment, ReactNode, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\nimport { utils } from '@senswap/sen-js'\n\nimport { Button, Col, Card, Modal, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport configs from 'app/configs'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport useNextOrderIndex from 'app/hooks/useNextOrderIndex'\nimport { useMintPrice } from 'app/hooks/useMintPrice'\nimport { VESTING } from 'app/constant'\nimport './index.less'\n\nconst Content = ({\n  label = '',\n  avatar = <Fragment />,\n  value = '',\n  subValue = '',\n  floatRight = false,\n}: {\n  label?: string\n  avatar?: ReactNode\n  value?: string | number\n  subValue?: string | number | undefined\n  floatRight?: boolean\n}) => {\n  const textAlign = floatRight ? 'right' : 'left'\n  return (\n    <Space size={12} direction=\"vertical\" style={{ textAlign }}>\n      <Typography.Text>{label}</Typography.Text>\n      {avatar}\n      <Typography.Title level={3}>{value}</Typography.Title>\n      {subValue && (\n        <Typography.Title\n          level={5}\n          style={{ textDecoration: 'line-through' }}\n          type=\"secondary\"\n        >\n          {subValue}\n        </Typography.Title>\n      )}\n    </Space>\n  )\n}\n\nconst TimeInfo = ({\n  label = '',\n  value = '',\n}: {\n  label?: string\n  value?: string | number\n}) => {\n  return (\n    <Row gutter={[16, 16]}>\n      <Col flex=\"auto\">\n        <Typography.Text>{label}</Typography.Text>\n      </Col>\n      <Col>\n        <Typography.Title level={5}>{value}</Typography.Title>\n      </Col>\n    </Row>\n  )\n}\n\nconst Confirm = ({\n  retailerAddress,\n  amount,\n  locktime,\n  visible = false,\n  onClose = () => {},\n}: {\n  retailerAddress: string\n  amount: string\n  locktime: number\n  visible?: boolean\n  onClose?: () => void\n}) => {\n  const [loading, setLoading] = useState(false)\n  const {\n    retailers: { [retailerAddress]: retailerData },\n  } = useSelector((state: AppState) => state)\n  const index = useNextOrderIndex(retailerAddress)\n  const bidDecimals = useMintDecimals(retailerData.mint_bid) || 0\n  const askDecimals = useMintDecimals(retailerData.mint_ask) || 0\n  const bidPrice = useMintPrice(retailerData.mint_bid, true)\n  const askPrice = useMintPrice(retailerData.mint_ask, true)\n\n  const lockedTime = BigInt(Math.floor(locktime * 24 * 60 * 60))\n  const discount =\n    VESTING.find(({ locktime: l }) => l === locktime)?.discount || 0\n  // Compute amounts\n  const valuation = parseFloat(amount) * bidPrice\n  const bidAmount = utils.decimalize(amount, bidDecimals)\n  const askAmount = !askPrice\n    ? BigInt(0)\n    : utils.decimalize((valuation * (1 + discount)) / askPrice, askDecimals)\n\n  const onPlaceOrder = async () => {\n    try {\n      const {\n        sol: { purchasing },\n      } = configs\n      const { wallet } = window.sentre\n      if (!wallet) throw new Error('Wallet is not connected')\n      await setLoading(true)\n      // Execute\n      const { txId } = await purchasing.placeOrder(\n        index,\n        bidAmount,\n        askAmount,\n        lockedTime,\n        retailerAddress,\n        wallet,\n      )\n      notifySuccess('Place a new order', txId)\n      return onClose()\n    } catch (er: any) {\n      return notifyError(er)\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  return (\n    <Modal\n      visible={visible}\n      footer={false}\n      closeIcon={<IonIcon name=\"close-outline\" />}\n      onCancel={onClose}\n    >\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Typography.Title level={5}>Confirm</Typography.Title>\n        </Col>\n        <Col span={24}>\n          <Row gutter={[16, 16]}>\n            <Col flex=\"auto\">\n              <Content\n                label=\"Payment\"\n                avatar={\n                  <Space>\n                    <MintAvatar mintAddress={retailerData.mint_bid} />\n                    <Typography.Title level={5}>\n                      <MintSymbol mintAddress={retailerData.mint_bid} />\n                    </Typography.Title>\n                  </Space>\n                }\n                value={`${numeric(amount).format('0,0.[0000]')} LP`}\n              />\n            </Col>\n            <Col>\n              <Content\n                label=\"Receiving\"\n                avatar={\n                  <Space>\n                    <MintAvatar mintAddress={retailerData.mint_ask} />\n                    <Typography.Title level={5}>\n                      <MintSymbol mintAddress={retailerData.mint_ask} />\n                    </Typography.Title>\n                  </Space>\n                }\n                value={numeric(\n                  utils.undecimalize(askAmount, askDecimals),\n                ).format('0,0.[0000]')}\n                subValue={numeric(valuation / askPrice).format('0,0.[0000]')}\n                floatRight\n              />\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24}>\n          <Card\n            className=\"confirm-sub-card\"\n            bodyStyle={{ padding: 16 }}\n            bordered={false}\n          >\n            <Row gutter={[12, 12]}>\n              <Col span={24}>\n                <TimeInfo\n                  label=\"Created At\"\n                  value={moment().format('HH:mm DD/MM/YYYY')}\n                />\n              </Col>\n              <Col span={24}>\n                <TimeInfo label=\"Locked Time\" value={`${locktime} Days`} />\n              </Col>\n              <Col span={24}>\n                <TimeInfo\n                  label=\"Multiplier\"\n                  value={`${(1 + discount) * 100}%`}\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={24}>\n          <Button type=\"primary\" onClick={onPlaceOrder} loading={loading} block>\n            Confirm\n          </Button>\n        </Col>\n      </Row>\n    </Modal>\n  )\n}\nexport default Confirm\n","import { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { Col, Divider, Row, Space, Typography, Button } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { usePool } from 'senhub/providers'\nimport { AppState } from 'app/model'\nimport { numeric } from 'shared/util'\n\nconst Form = ({\n  poolAddress,\n  value,\n  onChange,\n}: {\n  poolAddress: string\n  value: string\n  onChange: (value: string) => void\n}) => {\n  const lpts = useSelector((state: AppState) => state.lpts)\n  const { pools } = usePool()\n\n  const lptAddress =\n    Object.keys(lpts).find((key) => lpts[key].pool === poolAddress) || ''\n  const { amount } = lpts[lptAddress] || {}\n  const lpt = Number(utils.undecimalize(amount || BigInt(0), 9))\n\n  const poolData = pools[poolAddress]\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col flex=\"auto\">\n        <Typography.Text>I want to pay</Typography.Text>\n      </Col>\n      <Col>\n        <Space size={4} className=\"caption\">\n          <Typography.Text type=\"secondary\">Available:</Typography.Text>\n          <Typography.Text type=\"secondary\">\n            {numeric(lpt).format('0,0.[0000]')} LP\n          </Typography.Text>\n        </Space>\n      </Col>\n      <Col span={24}>\n        <NumericInput\n          value={value}\n          onValue={onChange}\n          prefix={\n            <Space size={4}>\n              <MintSymbol mintAddress={poolData?.mint_lpt} />\n              <Divider type=\"vertical\" />\n            </Space>\n          }\n          suffix={\n            <Button\n              type=\"text\"\n              style={{ marginRight: -7 }}\n              size=\"small\"\n              onClick={() => onChange(lpt.toString())}\n            >\n              MAX\n            </Button>\n          }\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Form\n","import { ReactNode } from 'react'\n\nimport { Col, Popover, Row, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { VESTING } from 'app/constant'\n\nconst PriceInfo = ({\n  label = '',\n  value = '',\n  discount = false,\n  description = null,\n}: {\n  label?: string\n  value?: ReactNode | string | number\n  discount?: boolean\n  description?: ReactNode\n}) => {\n  const styles = { color: discount ? '#F9575E' : 'inherit' }\n  return (\n    <Row gutter={[8, 8]} align=\"bottom\">\n      <Col flex=\"auto\">\n        <Space size={4}>\n          <Typography.Text style={styles}>{label}</Typography.Text>\n          {description && (\n            <Popover\n              content={description}\n              placement=\"leftTop\"\n              arrowPointAtCenter\n            >\n              <IonIcon name=\"help-circle\" />\n            </Popover>\n          )}\n        </Space>\n      </Col>\n      <Col>\n        <Typography.Title\n          style={{\n            ...styles,\n            textDecoration: !discount ? 'line-through' : 'unset',\n          }}\n          level={!discount ? 5 : 3}\n        >\n          {value}\n          <small>%</small>\n        </Typography.Title>\n      </Col>\n    </Row>\n  )\n}\n\nconst Discount = ({ locktime }: { locktime: number }) => {\n  const discount =\n    VESTING.find(({ locktime: l }) => l === locktime)?.discount || 0\n  return (\n    <Row gutter={[5, 5]}>\n      <Col span={24}>\n        <PriceInfo\n          label=\"SNTR Buy-back\"\n          value={Math.round((discount + 1) * 100)}\n          discount\n        />\n      </Col>\n      <Col span={24}>\n        <PriceInfo label=\"Market Buy-back\" value=\"100\" />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Discount\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Col, Row, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Confirm from './confirm'\nimport Form from './form'\nimport Discount from './discount'\n\nimport { VESTING } from 'app/constant'\nimport { AppState } from 'app/model'\nimport { usePool } from 'senhub/providers'\nimport { account } from '@senswap/sen-js'\n\nconst LOCKTIMES = VESTING.map(({ locktime }) => locktime)\n\nconst Reinvestment = ({ poolAddress }: { poolAddress: string }) => {\n  const [visible, setVisible] = useState(false)\n  const [amount, setAmount] = useState('')\n  const [locktime, setLocktime] = useState(LOCKTIMES[0])\n  const { retailers } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n\n  const poolData = pools[poolAddress]\n  const retailerIndex = Object.values(retailers).findIndex(\n    ({ mint_bid }) => mint_bid === poolData?.mint_lpt,\n  )\n  const retailerAddress = Object.keys(retailers)[retailerIndex]\n  const noRetailer = !account.isAddress(retailerAddress)\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col xs={24} lg={12}>\n        <Space direction=\"vertical\" size={10}>\n          <Space size={4}>\n            <Typography.Text>Lock Time (Days)</Typography.Text>\n            <IonIcon name=\"alert-circle-outline\" />\n          </Space>\n          <Space size={16}>\n            {LOCKTIMES.map((value) => (\n              <Button\n                key={value}\n                type={locktime === value ? 'primary' : 'default'}\n                icon={value}\n                onClick={() => setLocktime(value)}\n              />\n            ))}\n          </Space>\n        </Space>\n      </Col>\n      <Col xs={24} lg={12}>\n        <Discount locktime={locktime} />\n      </Col>\n      <Col span={24}>\n        <Typography.Text>\n          <span style={{ fontWeight: 700, color: 'inherit' }}>\n            SNTR Buy-back Offering:\n          </span>{' '}\n          Selling your LP tokens with juicy profit. No fee, no slippage. The\n          tokens will be unlocked after the selected period.\n        </Typography.Text>\n      </Col>\n      <Col span={24}>\n        <Form poolAddress={poolAddress} value={amount} onChange={setAmount} />\n      </Col>\n      <Col span={24}>\n        <Button\n          type=\"primary\"\n          icon={\n            <IonIcon name={noRetailer ? 'help-circle-outline' : 'diamond'} />\n          }\n          onClick={() => setVisible(true)}\n          disabled={!parseFloat(amount) || noRetailer}\n          block\n        >\n          {noRetailer ? 'There is no campaign on this pool' : 'Buy SNTR'}\n        </Button>\n      </Col>\n      {!noRetailer && (\n        <Confirm\n          retailerAddress={retailerAddress}\n          amount={amount}\n          locktime={locktime}\n          visible={visible}\n          onClose={() => setVisible(false)}\n        />\n      )}\n    </Row>\n  )\n}\n\nexport default Reinvestment\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, RetailerData } from '@senswap/sen-js'\nimport configs from 'app/configs'\n\n/**\n * Store constructor\n */\n\nexport type State = Record<string, RetailerData>\n\nconst NAME = 'retailers'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getRetailers = createAsyncThunk(\n  `${NAME}/getRetailers`,\n  async () => {\n    const {\n      sol: { purchasing },\n    } = configs\n    // Get all retailers with specific owner\n    const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n      await purchasing.connection.getProgramAccounts(\n        purchasing.purchasingProgramId,\n        {\n          filters: [{ dataSize: 161 }],\n        },\n      )\n    let bulk: State = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = purchasing.parseRetailerData(buf)\n      bulk[address] = data\n    })\n    return bulk\n  },\n)\n\nexport const getRetailer = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getRetailer`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid retailer address')\n  const {\n    sol: { purchasing },\n  } = configs\n  const {\n    retailers: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const raw = await purchasing.getRetailerData(address)\n  return { [address]: raw }\n})\n\nexport const upsetRetailer = createAsyncThunk<\n  State,\n  { address: string; data: RetailerData },\n  { state: any }\n>(`${NAME}/upsetRetailer`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid retailer address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteRetailer = createAsyncThunk(\n  `${NAME}/deleteRetailer`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid retailer address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getRetailers.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getRetailer.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetRetailer.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteRetailer.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { useDispatch } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { Button, Row, Col } from 'antd'\n\nimport configs from 'app/configs'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { AppDispatch } from 'app/model'\nimport { getRetailer } from 'app/model/retailers.controller'\nimport { usePool, useWallet } from 'senhub/providers'\n\nconst NewRetailer = ({ poolAddress }: { poolAddress: string }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { pools } = usePool()\n  const poolData = pools[poolAddress]\n\n  const onNew = async () => {\n    const { wallet } = window.sentre\n    const {\n      sol: { purchasing, sntrAddress },\n    } = configs\n    try {\n      if (!wallet) throw new Error('Wallet is not connected')\n      if (!account.isAddress(poolData?.mint_lpt))\n        throw new Error('Invalid bid mint address')\n      if (!account.isAddress(sntrAddress))\n        throw new Error('Invalid ask mint address')\n      const { txId, retailerAddress } = await purchasing.initializeRetailer(\n        walletAddress,\n        poolData.mint_lpt,\n        sntrAddress,\n        wallet,\n      )\n      await dispatch(getRetailer({ address: retailerAddress })).unwrap()\n      return notifySuccess('Initialize a new retailer', txId)\n    } catch (er: any) {\n      return notifyError(er)\n    }\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Button type=\"primary\" onClick={onNew}>\n          New Retailer\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default NewRetailer\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Space, Button, Typography } from 'antd'\n\nimport { AppState } from 'app/model'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport configs from 'app/configs'\nimport { account } from '@senswap/sen-js'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst RetailerState = ({ retailerAddress }: { retailerAddress: string }) => {\n  const [loading, setLoading] = useState(false)\n  const {\n    retailers: { [retailerAddress]: retailerData },\n  } = useSelector((state: AppState) => state)\n\n  const state = retailerData?.state\n\n  const onFreeze = async () => {\n    try {\n      const {\n        sol: { purchasing },\n      } = configs\n      const { wallet } = window.sentre\n      if (!wallet) throw new Error('Wallet is not connected')\n      if (!account.isAddress(retailerAddress))\n        throw new Error('Invalid retailer address')\n      await setLoading(true)\n      const { txId } = await purchasing.freezeRetailer(retailerAddress, wallet)\n      return notifySuccess(`Freeze the retailer ${retailerAddress}`, txId)\n    } catch (er) {\n      return notifyError(er)\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  const onThaw = async () => {\n    try {\n      const {\n        sol: { purchasing },\n      } = configs\n      const { wallet } = window.sentre\n      if (!wallet) throw new Error('Wallet is not connected')\n      if (!account.isAddress(retailerAddress))\n        throw new Error('Invalid retailer address')\n      await setLoading(true)\n      const { txId } = await purchasing.thawRetailer(retailerAddress, wallet)\n      return notifySuccess(`Thaw the retailer ${retailerAddress}`, txId)\n    } catch (er) {\n      return notifyError(er)\n    } finally {\n      return setLoading(false)\n    }\n  }\n\n  return (\n    <Space>\n      <Typography.Text>Current State:</Typography.Text>\n      <IonIcon name={state === 1 ? 'checkmark-circle-sharp' : 'snow-outline'} />\n      <Typography.Text style={{ fontWeight: 700 }}>\n        {state === 1 ? 'Active' : 'Frozen'}\n      </Typography.Text>\n      <Button\n        size=\"small\"\n        onClick={state === 1 ? onFreeze : onThaw}\n        loading={loading}\n      >\n        {state === 1 ? 'Freeze' : 'Thaw'}\n      </Button>\n    </Space>\n  )\n}\n\nexport default RetailerState\n","import { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { Space, Typography } from 'antd'\n\nimport { AppState } from 'app/model'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { numeric } from 'shared/util'\nimport { MintSymbol } from 'shared/antd/mint'\n\nconst ColumnAsk = ({ orderAddress }: { orderAddress: string }) => {\n  const { retailers, orders } = useSelector((state: AppState) => state)\n  const ordersDetail = orders[orderAddress]\n  const { mint_ask } = retailers[ordersDetail.retailer] || {}\n  const askDecimals = useMintDecimals(mint_ask) || 0\n  const askAmount = utils.undecimalize(ordersDetail.ask_amount, askDecimals)\n\n  return (\n    <Typography.Text style={{ fontWeight: 700 }}>\n      <Space size={4}>\n        {numeric(askAmount).format('0,0.[0000]')}\n        <MintSymbol mintAddress={mint_ask} />\n      </Space>\n    </Typography.Text>\n  )\n}\n\nexport default ColumnAsk\n","import { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { Typography } from 'antd'\n\nimport { AppState } from 'app/model'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { numeric } from 'shared/util'\n\nconst ColumnBid = ({ orderAddress }: { orderAddress: string }) => {\n  const { retailers, orders } = useSelector((state: AppState) => state)\n  const ordersDetail = orders[orderAddress]\n  const { mint_bid } = retailers[ordersDetail.retailer] || {}\n  const bidDecimals = useMintDecimals(mint_bid) || 0\n  const bidAmount = utils.undecimalize(ordersDetail.bid_amount, bidDecimals)\n\n  return (\n    <Typography.Text>\n      {numeric(bidAmount).format('0,0.[0000]')} LP\n    </Typography.Text>\n  )\n}\n\nexport default ColumnBid\n","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport moment from 'moment'\n\nimport { Button, Card, Col, Row, Space, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { shortenAddress } from 'shared/util'\nimport { notifyError, notifySuccess } from 'app/helper'\nimport { VESTING } from 'app/constant'\nimport { AppState } from 'app/model'\nimport { OrderType } from '.'\nimport configs from 'app/configs'\n\nconst FORMAT_DATE = 'DD/MM/YYYY'\n\nconst ConfirmOrder = ({\n  orderData,\n  onClose,\n}: {\n  orderData: OrderType\n  onClose: (visible: boolean) => void\n}) => {\n  const [loadingApprove, setLoadingApprove] = useState(false)\n  const [loadingReject, setLoadingReject] = useState(false)\n\n  const { retailers } = useSelector((state: AppState) => state)\n\n  const { mint_bid, mint_ask } = retailers[orderData.retailer] || {}\n  const bidDecimals = useMintDecimals(mint_bid) || 0\n  const askDecimals = useMintDecimals(mint_ask) || 0\n  const bidAmount = utils.undecimalize(orderData.bid_amount, bidDecimals)\n  const askAmount = utils.undecimalize(orderData.ask_amount, askDecimals)\n\n  const lockTime = Number(orderData.locked_time) / (24 * 60 * 60)\n\n  const discount =\n    VESTING.find(({ locktime: l }) => l === lockTime)?.discount || 0\n\n  const onReject = async () => {\n    try {\n      const { wallet } = window.sentre\n      const {\n        sol: { purchasing },\n      } = configs\n      if (!wallet) throw new Error('Wallet is not connected')\n      await setLoadingReject(true)\n      const { txId } = await purchasing.rejectOrder(orderData.address, wallet)\n      return notifySuccess('Reject the order', txId)\n    } catch (er: any) {\n      return notifyError(er)\n    } finally {\n      return setLoadingReject(false)\n    }\n  }\n\n  const onApprove = async () => {\n    try {\n      const { wallet } = window.sentre\n      const {\n        sol: { purchasing },\n      } = configs\n      if (!wallet) throw new Error('Wallet is not connected')\n      await setLoadingApprove(true)\n      const { txId } = await purchasing.approveOrder(orderData.address, wallet)\n      return notifySuccess('Approve the order', txId)\n    } catch (er: any) {\n      return notifyError(er)\n    } finally {\n      onClose(false)\n      return setLoadingApprove(false)\n    }\n  }\n\n  return (\n    <Row gutter={[16, 24]}>\n      <Col span={24}>\n        <Row align=\"middle\" justify=\"space-between\">\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>Pay</Typography.Text>\n              <Space>\n                <MintAvatar mintAddress={mint_ask} />\n                <Typography.Text>\n                  <MintSymbol mintAddress={mint_ask} />\n                </Typography.Text>\n              </Space>\n              <Typography.Title level={4}>{askAmount}</Typography.Title>\n            </Space>\n          </Col>\n          <Col>\n            <IonIcon name=\"arrow-forward-outline\" style={{ fontSize: 24 }} />\n          </Col>\n          <Col>\n            <Space direction=\"vertical\">\n              <Typography.Text>Receive</Typography.Text>\n              <Space>\n                <MintAvatar mintAddress={mint_bid} />\n                <Typography.Text>\n                  <MintSymbol separator=\" + \" mintAddress={mint_bid} />\n                </Typography.Text>\n              </Space>\n              <Typography.Title level={4}>{bidAmount}</Typography.Title>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col>\n        <Card\n          bordered={false}\n          className=\"confirm-info\"\n          style={{ boxShadow: 'none', borderRadius: 8 }}\n          bodyStyle={{ padding: 16 }}\n        >\n          <Row gutter={[12, 12]}>\n            <Col span={24}>\n              <Row>\n                <Col flex=\"auto\">\n                  <Typography.Text type=\"secondary\">Order ID</Typography.Text>\n                </Col>\n                <Typography.Text>\n                  {shortenAddress(orderData.address)}\n                </Typography.Text>\n              </Row>\n            </Col>\n            <Col span={24}>\n              <Row>\n                <Col flex=\"auto\">\n                  <Typography.Text type=\"secondary\">Start day</Typography.Text>\n                </Col>\n                <Col>\n                  {moment(Number(orderData.created_at) * 1000).format(\n                    FORMAT_DATE,\n                  )}\n                </Col>\n              </Row>\n            </Col>\n            <Col span={24}>\n              <Row>\n                <Col flex=\"auto\">\n                  <Typography.Text type=\"secondary\">\n                    Locked duration\n                  </Typography.Text>\n                </Col>\n                <Col>\n                  <Typography.Text>{lockTime} days</Typography.Text>\n                </Col>\n              </Row>\n            </Col>\n            <Col span={24}>\n              <Row>\n                <Col flex=\"auto\">\n                  <Typography.Text type=\"secondary\">\n                    Purchase rate\n                  </Typography.Text>\n                </Col>\n                <Col>{Math.round((discount + 1) * 100)}%</Col>\n              </Row>\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space size={4}>\n          <Button loading={loadingReject} onClick={onReject}>\n            Reject\n          </Button>\n          <Button loading={loadingApprove} onClick={onApprove} type=\"primary\">\n            Approve\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default ConfirmOrder\n","import { Fragment, useState } from 'react'\n\nimport { Button, Modal, Typography } from 'antd'\nimport OrderStatus from 'app/components/orderStatus'\nimport IonIcon from 'shared/antd/ionicon'\nimport ConfirmOrder from './confirmOrder'\n\nimport { OrderState } from 'app/constant'\nimport { OrderType } from '.'\n\nconst ColumnStatus = ({\n  state,\n  orderData,\n}: {\n  state: number\n  orderData: OrderType\n}) => {\n  const [visible, setVisible] = useState(false)\n  if (state === OrderState.Open)\n    return (\n      <Fragment>\n        <Button size=\"small\" type=\"primary\" onClick={() => setVisible(true)}>\n          Confirm\n        </Button>\n        <Modal\n          title={<Typography.Title level={4}>Confirm order</Typography.Title>}\n          visible={visible}\n          footer={null}\n          onCancel={() => setVisible(false)}\n          closeIcon={<IonIcon name=\"close\" />}\n        >\n          <ConfirmOrder onClose={setVisible} orderData={orderData} />\n        </Modal>\n      </Fragment>\n    )\n  return <OrderStatus state={state} />\n}\n\nexport default ColumnStatus\n","import LazyLoad from '@senswap/react-lazyload'\n\nimport { OrderData } from '@senswap/sen-js'\nimport { Typography } from 'antd'\nimport ColumnAsk from './columnAsk'\nimport ColumnBid from './columnBid'\nimport ColumnStatus from './columnStatus'\n\nconst ROW_HEIGHT = 52\n\nexport type OrderType = OrderData & {\n  address: string\n}\n\nexport const ADMIN_COLUMNS = [\n  {\n    title: 'PAY',\n    dataIndex: 'ask_amount',\n    key: 'ask_amount',\n    render: (ask_amount: bigint, record: OrderType) => (\n      <LazyLoad height={ROW_HEIGHT} overflow>\n        <ColumnAsk orderAddress={record.address} />\n      </LazyLoad>\n    ),\n  },\n  {\n    title: 'RECEIVE',\n    dataIndex: 'bid_amount',\n    key: 'bid_amount',\n    render: (bid_amount: bigint, record: OrderType) => (\n      <LazyLoad height={ROW_HEIGHT} overflow>\n        <ColumnBid orderAddress={record.address} />\n      </LazyLoad>\n    ),\n  },\n  {\n    title: 'LOCKED',\n    dataIndex: 'locked_time',\n    key: 'locked_time',\n    width: 100,\n    render: (locked_time: bigint) => (\n      <LazyLoad height={ROW_HEIGHT} overflow>\n        <Typography.Text>\n          {Number(locked_time) / (24 * 60 * 60)} days\n        </Typography.Text>\n      </LazyLoad>\n    ),\n  },\n  {\n    title: 'ACTIONS',\n    key: 'state',\n    dataIndex: 'state',\n    width: 100,\n    render: (state: number, record: OrderType) => (\n      <LazyLoad height={ROW_HEIGHT} overflow>\n        <ColumnStatus state={state} orderData={record} />\n      </LazyLoad>\n    ),\n  },\n]\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, OrderData } from '@senswap/sen-js'\nimport configs from 'app/configs'\n\n/**\n * Store constructor\n */\n\nexport type State = Record<string, OrderData>\n\nconst NAME = 'orders'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getOrders = createAsyncThunk(\n  `${NAME}/getOrders`,\n  async ({ owner, retailer }: { owner?: string; retailer?: string }) => {\n    const {\n      sol: { purchasing },\n    } = configs\n    // Get all retailers with specific owner\n    let bulk: State = {}\n    let opts = []\n    if (account.isAddress(owner))\n      opts.push({ memcmp: { bytes: owner, offset: 0 } })\n    if (account.isAddress(retailer))\n      opts.push({ memcmp: { bytes: retailer, offset: 33 } })\n    const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n      await purchasing.connection.getProgramAccounts(\n        purchasing.purchasingProgramId,\n        {\n          filters: [{ dataSize: 105 }, ...opts],\n        },\n      )\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = purchasing.parseOrderData(buf)\n      bulk[address] = data\n    })\n    return bulk\n  },\n)\n\nexport const getOrder = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getOrder`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid order address')\n  const {\n    sol: { purchasing },\n  } = configs\n  const {\n    retailers: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const raw = await purchasing.getOrderData(address)\n  return { [address]: raw }\n})\n\nexport const upsetOrder = createAsyncThunk<\n  State,\n  { address: string; data: OrderData },\n  { state: any }\n>(`${NAME}/upsetOrder`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid order address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteOrder = createAsyncThunk(\n  `${NAME}/deleteOrder`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid order address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        getOrders.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        getOrder.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetOrder.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteOrder.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\nimport { forceCheck } from '@senswap/react-lazyload'\n\nimport { Row, Col, Space, Typography, Switch, Table, Button } from 'antd'\nimport NewRetailer from './newRetailer'\nimport RetailerState from './retailerState'\nimport { ADMIN_COLUMNS } from './column'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { usePool, useWallet } from 'senhub/providers'\nimport { getOrders } from 'app/model/orders.controller'\n\nimport './index.less'\n\nconst AMOUNT_ROW = 6\n\nconst Admin = ({ poolAddress }: { poolAddress: string }) => {\n  const [lite, setLite] = useState(true)\n  const [amountRow, setAmountRow] = useState(AMOUNT_ROW)\n  const dispatch = useDispatch<AppDispatch>()\n  const { retailers, orders } = useSelector((state: AppState) => state)\n  const { pools } = usePool()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const poolData = pools[poolAddress]\n  const myRetailerAddresses = Object.keys(retailers).filter(\n    (retailerAddress) => {\n      const { owner } = retailers[retailerAddress]\n      return owner === walletAddress\n    },\n  )\n  const retailerAddress = myRetailerAddresses.find((retailerAddress) => {\n    const { mint_bid } = retailers[retailerAddress]\n    return mint_bid === poolData?.mint_lpt\n  })\n\n  const listOrder = useMemo(\n    () =>\n      Object.keys(orders).map((address) => {\n        return { ...orders[address], address }\n      }),\n    [orders],\n  )\n\n  // const orderAddresses = Object.keys(orders).filter((orderAddress) => {\n  //   const { retailer, state } = orders[orderAddress]\n  //   let cond = retailer === retailerAddress\n  //   if (lite) cond = cond && state === OrderState.Open\n  //   return cond\n  // })\n\n  const fetchOrders = useCallback(async () => {\n    await dispatch(getOrders({ retailer: walletAddress }))\n  }, [dispatch, walletAddress])\n\n  useEffect(() => {\n    fetchOrders()\n  }, [fetchOrders])\n\n  useEffect(() => {\n    // fix lazyload\n    setTimeout(() => {\n      forceCheck()\n    }, 500)\n  }, [])\n\n  return (\n    <Row gutter={[24, 12]} justify=\"center\">\n      <Col span={24}>\n        {!account.isAddress(retailerAddress) ? (\n          <NewRetailer poolAddress={poolAddress} />\n        ) : (\n          <Row gutter={[24, 24]} wrap={false}>\n            <Col flex=\"auto\">\n              <RetailerState retailerAddress={retailerAddress} />\n            </Col>\n            <Col>\n              <Space>\n                <Typography.Text type=\"secondary\">Filtered?</Typography.Text>\n                <Switch checked={lite} onChange={setLite} size=\"small\" />\n              </Space>\n            </Col>\n          </Row>\n        )}\n      </Col>\n      <Col span={24}>\n        <Table\n          className=\"scrollbar\"\n          columns={ADMIN_COLUMNS}\n          dataSource={listOrder.slice(0, amountRow)}\n          rowClassName={(record, index) => (index % 2 ? 'odd-row' : 'even-row')}\n          pagination={false}\n          scroll={{ y: 155, x: 500 }}\n          rowKey={(record) => Number(record.created_at)}\n        />\n      </Col>\n      <Col>\n        <Button\n          onClick={() => setAmountRow(amountRow + AMOUNT_ROW)}\n          disabled={amountRow >= listOrder.length}\n          type=\"text\"\n        >\n          View more\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Admin\n","import { Card, Tabs } from 'antd'\nimport Redeem from './redeem'\nimport Reinvestment from './reinvestment'\nimport Admin from './admin'\n\nimport { usePool, useWallet } from 'senhub/providers'\n\nconst Booster = ({ poolAddress }: { poolAddress: string }) => {\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { pools } = usePool()\n\n  const isOwner = walletAddress === pools[poolAddress]?.owner\n\n  return (\n    <Card bordered={false} bodyStyle={{ padding: 0, minHeight: 384 }}>\n      <Tabs style={{ padding: '16px 24px 24px 24px' }}>\n        <Tabs.TabPane key=\"reinvestmnet\" tab=\"Reinvestment\">\n          <Reinvestment poolAddress={poolAddress} />\n        </Tabs.TabPane>\n        <Tabs.TabPane key=\"redeem\" tab=\"Redeem\">\n          <Redeem poolAddress={poolAddress} />\n        </Tabs.TabPane>\n        {isOwner ? (\n          <Tabs.TabPane key=\"admin\" tab=\"Admin\">\n            <Admin poolAddress={poolAddress} />\n          </Tabs.TabPane>\n        ) : null}\n      </Tabs>\n    </Card>\n  )\n}\n\nexport default Booster\n","import { useSelector } from 'react-redux'\n\nimport { Col, Row } from 'antd'\nimport PoolDetailsHeader from './poolDetailsHeader'\nimport LiquidityPosition from './liquidityPosition'\nimport PoolManagement from './management'\nimport TotalValueLocked from './totalValueLocked'\nimport Volume24h from './volume24h'\nimport Booster from './booster'\n\nimport { AppState } from 'app/model'\nimport { usePool, useWallet } from 'senhub/providers'\n\nconst PoolDetails = () => {\n  const { selectedPoolAddress } = useSelector((state: AppState) => state.main)\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { pools } = usePool()\n  const { owner } = pools?.[selectedPoolAddress] || {}\n\n  const ownerPool = walletAddress === owner\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <PoolDetailsHeader poolAddress={selectedPoolAddress} />\n      </Col>\n      <Col xs={{ span: 24, order: 1 }} md={{ span: 12, order: 1 }}>\n        <TotalValueLocked />\n      </Col>\n      <Col xs={{ span: 24, order: 3 }} md={{ span: 12, order: 2 }}>\n        <LiquidityPosition poolAddress={selectedPoolAddress} />\n      </Col>\n      <Col xs={{ span: 24, order: 2 }} md={{ span: 12, order: 3 }}>\n        <Volume24h />\n      </Col>\n      <Col xs={{ span: 24, order: 4 }} md={12}>\n        <Booster poolAddress={selectedPoolAddress} />\n      </Col>\n      {ownerPool && (\n        <Col xs={{ span: 24, order: 5 }} md={12}>\n          <PoolManagement poolAddress={selectedPoolAddress} />\n        </Col>\n      )}\n    </Row>\n  )\n}\n\nexport default PoolDetails\n","import { useDispatch } from 'react-redux'\n\nimport { Affix, Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { handleOpenDrawer } from 'app/model/main.controller'\nimport { useUI } from 'senhub/providers'\n\nconst ViewPoolButton = () => {\n  const dispatch = useDispatch()\n  const {\n    ui: { width },\n  } = useUI()\n\n  if (width >= 1200) return null\n  return (\n    <Affix style={{ position: 'fixed', bottom: 16, right: 16, zIndex: 9999 }}>\n      <Button\n        type=\"primary\"\n        onClick={() => dispatch(handleOpenDrawer(true))}\n        icon={<IonIcon name=\"list-outline\" />}\n        size=\"large\"\n      >\n        Pools List\n      </Button>\n    </Affix>\n  )\n}\nexport default ViewPoolButton\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData, utils } from '@senswap/sen-js'\n\n/**\n * Store constructor\n */\nexport type LPTData = AccountData & {\n  pool: string\n  selectedPoolAddress?: string\n  selectedLPTAddress?: string\n}\nexport type State = Record<string, LPTData>\n\nconst NAME = 'lpts'\nconst initialState: State = {}\n\n/**\n * Actions\n */\n\nexport const getLPTs = createAsyncThunk(\n  `${NAME}/getLPTs`,\n  async ({\n    accounts,\n  }: {\n    accounts: Array<AccountData & { address: string }>\n  }) => {\n    const { splt, swap } = window.sentre\n    // Get the corresponding mint list\n    const mintAddresses = accounts.map(({ mint: mintAddress }) => mintAddress)\n    const mintPublicKeys = mintAddresses.map((mintAddress) =>\n      account.fromAddress(mintAddress),\n    )\n    // Validate whether lp mint or normal mint\n    const mintData = (\n      await utils.wrappedGetMultipleAccountsInfo(\n        splt.connection,\n        mintPublicKeys,\n      )\n    ).map((re) => {\n      if (!re?.data) return null\n      return splt.parseMintData(re.data)\n    })\n    if (!mintData?.length) return {}\n    const poolAddresses = await Promise.all(\n      mintData.map(async (re) => {\n        try {\n          const { mint_authority, freeze_authority } = re || {}\n          if (\n            !account.isAddress(mint_authority) ||\n            !account.isAddress(freeze_authority)\n          )\n            return undefined\n          return await swap.derivePoolAddress(mint_authority, freeze_authority)\n        } catch (er) {\n          return undefined\n        }\n      }),\n    )\n    // Filter lpt accounts\n    let bulk: State = {}\n    accounts.forEach(({ address, ...data }, index) => {\n      const poolAddress = poolAddresses[index]\n      if (account.isAddress(poolAddress))\n        bulk[address] = { ...data, pool: poolAddress }\n    })\n    return bulk\n  },\n)\n\nexport const getLPT = createAsyncThunk<\n  State,\n  { address: string },\n  { state: any }\n>(`${NAME}/getLPT`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    lpts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getLPTData(address)\n  return { [address]: raw }\n})\n\nexport const upsetLPT = createAsyncThunk<\n  State,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetLPT`, async ({ address, data }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  const {\n    lpts: { [address]: lptData },\n  } = getState()\n  const { pool } = lptData || {}\n  if (account.isAddress(pool)) return { [address]: { ...data, pool } }\n  // To make sure the new account is an lpt account\n  const { swap } = window.sentre\n  const raw = await swap.getLPTData(address)\n  return { [address]: raw }\n})\n\nexport const deleteLPT = createAsyncThunk(\n  `${NAME}/deleteLPT`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getLPTs.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getLPT.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetLPT.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteLPT.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { Fragment, useCallback, useEffect, useMemo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { notifyError } from 'app/helper'\nimport { AppDispatch } from 'app/model'\nimport { getLPTs, upsetLPT } from 'app/model/lpts.controller'\nimport { useAccount, useWallet } from 'senhub/providers'\n\n// Watch id\nlet watchId = 0\n\nconst LptWatcher = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const { accounts } = useAccount()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  // First-time fetching\n  const accountData = useMemo(\n    () =>\n      Object.keys(accounts).map((accountAddress) => ({\n        address: accountAddress,\n        ...accounts[accountAddress],\n      })),\n    [accounts],\n  )\n  const fetchData = useCallback(async () => {\n    try {\n      if (!account.isAddress(walletAddress)) return\n      await dispatch(getLPTs({ accounts: accountData })).unwrap()\n    } catch (er) {\n      await notifyError(er)\n    }\n  }, [dispatch, accountData, walletAddress])\n  // Watch account changes\n  const watchData = useCallback(async () => {\n    if (watchId) return console.warn('Already watched')\n    const callback = (er: string | null, re: any) => {\n      if (er) return console.error(er)\n      const { address, data } = re\n      return dispatch(upsetLPT({ address, data }))\n    }\n    const filters = [{ memcmp: { bytes: walletAddress, offset: 32 } }]\n    watchId = window.sentre.splt.watch(callback, filters)\n  }, [dispatch, walletAddress])\n\n  useEffect(() => {\n    fetchData()\n    watchData()\n    // Unwatch (cancel socket)\n    return () => {\n      ;(async () => {\n        try {\n          await window.sentre.splt.unwatch(watchId)\n        } catch (er) {}\n      })()\n      watchId = 0\n    }\n  }, [fetchData, watchData])\n\n  return <Fragment />\n}\n\nexport default LptWatcher\n","import { Fragment, useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { notifyError } from 'app/helper'\nimport { AppDispatch } from 'app/model'\nimport { getRetailers, upsetRetailer } from 'app/model/retailers.controller'\nimport { useWallet } from 'senhub/providers'\nimport configs from 'app/configs'\n\nconst {\n  sol: { purchasing },\n} = configs\n\n// Watch id\nlet watchId = 0\n\nconst RetailerWatcher = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  // First-time fetching\n  const fetchData = useCallback(async () => {\n    try {\n      if (!account.isAddress(walletAddress)) return\n      await dispatch(getRetailers()).unwrap()\n    } catch (er) {\n      await notifyError(er)\n    }\n  }, [dispatch, walletAddress])\n  // Watch account changes\n  const watchData = useCallback(async () => {\n    if (watchId) return console.warn('Already watched')\n    const callback = (er: string | null, re: any) => {\n      if (er) return console.error(er)\n      const { address, data } = re\n      return dispatch(upsetRetailer({ address, data }))\n    }\n    const filters = [{ dataSize: 161 }]\n    watchId = purchasing.watch(callback, filters)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchData()\n    watchData()\n    // Unwatch (cancel socket)\n    return () => {\n      ;(async () => {\n        try {\n          await purchasing.unwatch(watchId)\n        } catch (er) {}\n      })()\n      watchId = 0\n    }\n  }, [fetchData, watchData])\n\n  return <Fragment />\n}\n\nexport default RetailerWatcher\n","import { Fragment, useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { account } from '@senswap/sen-js'\n\nimport { notifyError } from 'app/helper'\nimport { AppDispatch } from 'app/model'\nimport { getOrders, upsetOrder } from 'app/model/orders.controller'\nimport { useWallet } from 'senhub/providers'\nimport configs from 'app/configs'\n\nconst {\n  sol: { purchasing },\n} = configs\n\n// Watch id\nlet watchId = 0\n\nconst OrderWatcher = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  // First-time fetching\n  const fetchData = useCallback(async () => {\n    try {\n      if (!account.isAddress(walletAddress)) return\n      await dispatch(getOrders({ owner: walletAddress })).unwrap()\n    } catch (er) {\n      await notifyError(er)\n    }\n  }, [dispatch, walletAddress])\n  // Watch account changes\n  const watchData = useCallback(async () => {\n    if (watchId) return console.warn('Already watched')\n    const callback = (er: string | null, re: any) => {\n      if (er) return console.error(er)\n      const { address, data } = re\n      return dispatch(upsetOrder({ address, data }))\n    }\n    const filters = [{ dataSize: 105 }]\n    watchId = purchasing.watch(callback, filters)\n  }, [dispatch])\n\n  useEffect(() => {\n    fetchData()\n    watchData()\n    // Unwatch (cancel socket)\n    return () => {\n      ;(async () => {\n        try {\n          await purchasing.unwatch(watchId)\n        } catch (er) {}\n      })()\n      watchId = 0\n    }\n  }, [fetchData, watchData])\n\n  return <Fragment />\n}\n\nexport default OrderWatcher\n","import { useCallback, useEffect, useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { account } from '@senswap/sen-js'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Row, Col, Modal, Typography, Card } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport SideBar from './sideBar'\nimport PoolDetails from './poolDetails'\nimport ViewPoolButton from 'app/components/viewPoolButton'\nimport LptWatcher from 'app/components/watcher/lptWatcher'\nimport RetailerWatcher from 'app/components/watcher/retailerWatcher'\nimport OrderWatcher from 'app/components/watcher/orderWatcher'\n\nimport { usePool, useUI } from 'senhub/providers'\nimport { AppState } from 'app/model'\nimport { handleOpenDrawer, selectPool } from 'app/model/main.controller'\nimport configs from 'app/configs'\nimport { QueryParams } from 'app/constant'\n\nconst Page = () => {\n  const dispatch = useDispatch()\n  const {\n    main: { visible },\n  } = useSelector((state: AppState) => state)\n  const {\n    ui: { width },\n  } = useUI()\n  const { pools } = usePool()\n  const { selectedPoolAddress } = useSelector((state: AppState) => state.main)\n  const query = new URLSearchParams(useLocation().search)\n  const poolAddress = query.get(QueryParams.address) || ''\n  const senOwner = configs.sol.senOwners\n\n  const listSentrePools = Object.keys(pools).filter((poolAddr) => {\n    const poolData = pools?.[poolAddr]\n    const { owner } = poolData\n    return senOwner.includes(owner)\n  })\n\n  const sortedPools = useMemo(() => {\n    if (!Object.keys(pools).length) return\n    return Object.keys(pools)\n      .map((address) => ({ address, ...pools[address] }))\n      .sort(\n        (\n          { reserve_a: firstRa, reserve_b: firstRb },\n          { reserve_a: secondRa, reserve_b: secondRb },\n        ) => {\n          const firstK = firstRa * firstRb\n          const secondK = secondRa * secondRb\n          if (firstK > secondK) return -1\n          if (firstK < secondK) return 1\n          return 0\n        },\n      )\n  }, [pools])\n\n  const onInit = useCallback(() => {\n    if (account.isAddress(selectedPoolAddress)) return\n    if (account.isAddress(poolAddress)) return dispatch(selectPool(poolAddress))\n    const poolAddressDefault = sortedPools?.[0]?.address\n    const sentrePoolAddrDefault = listSentrePools?.[0]\n    if (account.isAddress(sentrePoolAddrDefault))\n      return dispatch(selectPool(sentrePoolAddrDefault))\n    if (account.isAddress(poolAddressDefault))\n      dispatch(selectPool(poolAddressDefault))\n  }, [dispatch, listSentrePools, poolAddress, selectedPoolAddress, sortedPools])\n\n  useEffect(() => {\n    onInit()\n  }, [onInit])\n\n  return (\n    <Row gutter={[24, 24]} style={{ paddingBottom: 12 }}>\n      {width >= 1200 ? (\n        <Col lg={8} xl={6}>\n          <Card bodyStyle={{ padding: 0 }} bordered={false}>\n            <SideBar />\n          </Card>\n        </Col>\n      ) : (\n        <Modal\n          visible={visible}\n          onCancel={() => dispatch(handleOpenDrawer(false))}\n          closeIcon={<IonIcon name=\"close-outline\" />}\n          footer={null}\n          title={<Typography.Title level={4}>Pool Selection</Typography.Title>}\n          bodyStyle={{ padding: 0 }}\n          centered\n        >\n          <SideBar />\n        </Modal>\n      )}\n      <Col xs={24} lg={24} xl={18}>\n        <PoolDetails />\n      </Col>\n      <ViewPoolButton />\n      <LptWatcher />\n      <RetailerWatcher />\n      <OrderWatcher />\n    </Row>\n  )\n}\n\nexport default Page\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Col, Select, Row, Typography } from 'antd'\n\nimport { AppDispatch } from 'app/model'\nimport { selectCategoryPool } from 'app/model/main.controller'\nimport { PoolTabs } from 'app/constant'\n\nconst Header = () => {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const handleChange = (value: string) => {\n    dispatch(selectCategoryPool(value))\n  }\n\n  useEffect(() => {\n    dispatch(selectCategoryPool(PoolTabs.Sentre))\n  }, [dispatch])\n\n  return (\n    <Row gutter={24} align=\"middle\" className=\"header-widget\">\n      <Col flex=\"auto\">\n        <Typography.Text style={{ color: '#e9e9eb ' }}>\n          Pools list by\n        </Typography.Text>\n      </Col>\n      <Col>\n        <Select\n          defaultValue={PoolTabs.Sentre}\n          onChange={handleChange}\n          className=\"header-select\"\n        >\n          <Select.Option value={PoolTabs.Sentre}>Sentre</Select.Option>\n          <Select.Option value={PoolTabs.Community}>Community</Select.Option>\n          <Select.Option value={PoolTabs.Deposited}>Deposited</Select.Option>\n          <Select.Option value={PoolTabs.YourPools}>Your pools</Select.Option>\n        </Select>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Header\n","import { Fragment, ReactElement, useState } from 'react'\nimport { utils } from '@senswap/sen-js'\n\nimport {\n  Row,\n  Col,\n  Card,\n  Space,\n  Typography,\n  Divider,\n  Tooltip,\n  Collapse,\n  Button,\n} from 'antd'\nimport PoolTVL from 'app/components/poolTVL'\nimport IonIcon from 'shared/antd/ionicon'\nimport PoolCardStatus from 'app/components/poolCardStatus'\nimport SwapButton from 'app/components/swapButton'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\n\nimport { LPTData } from 'app/model/lpts.controller'\nimport { PoolStatus } from 'app/constant'\nimport { numeric } from 'shared/util'\nimport { usePool } from 'senhub/providers'\n\nconst DECIMAL = 9\n\nconst ItemLPT = ({\n  data,\n  onClick = () => {},\n  action = <Fragment />,\n  keyExpand,\n}: {\n  data: LPTData\n  onClick?: () => void\n  action: ReactElement\n  keyExpand: number\n}) => {\n  const { pool: poolAddress, amount } = data\n  const [isActive, setIsActive] = useState(false)\n  const lp = utils.undecimalize(amount, DECIMAL)\n  const { pools } = usePool()\n\n  const isFrozen = pools?.[poolAddress].state === PoolStatus.Frozen\n  const mintLptAddress = pools?.[poolAddress]?.mint_lpt || ''\n  const expandClass = isActive ? '' : 'expandHidden'\n  const defaultKey = keyExpand.toString()\n  return (\n    <Card\n      bodyStyle={{ padding: 12, minHeight: 78 }}\n      bordered={false}\n      className=\"lp-card\"\n    >\n      <Row gutter={[12, 12]} align=\"top\">\n        <Col flex=\"auto\">\n          <Space direction=\"vertical\">\n            <Space>\n              <MintAvatar mintAddress={mintLptAddress} size={24} />\n              <Typography.Text type={isFrozen ? 'secondary' : undefined}>\n                <MintSymbol mintAddress={mintLptAddress} />\n              </Typography.Text>\n            </Space>\n            <Space>\n              <Tooltip title=\"The Total Value Locked is roughly estimated and perhaps inaccurate because unknown tokens ain't involved in the computation.\">\n                <Typography.Text type=\"secondary\" className=\"caption\">\n                  TVL:\n                </Typography.Text>\n              </Tooltip>\n              <Typography.Text>\n                <PoolTVL poolAddress={poolAddress} />\n              </Typography.Text>\n              <Divider type=\"vertical\" style={{ margin: 0 }} />\n              <Typography.Text type=\"secondary\" className=\"caption\">\n                My LP:\n              </Typography.Text>\n              <Typography.Text>\n                {numeric(lp).format('0,0.[00]')}\n              </Typography.Text>\n            </Space>\n          </Space>\n        </Col>\n        <Col>\n          <Space size={2}>\n            <PoolCardStatus poolAddress={poolAddress} />\n            {action}\n            <Button\n              size=\"small\"\n              type=\"text\"\n              icon={\n                <IonIcon\n                  name={\n                    isActive\n                      ? 'chevron-down-outline'\n                      : 'chevron-forward-outline'\n                  }\n                />\n              }\n              onClick={() => setIsActive(!isActive)}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Collapse\n        className={expandClass}\n        style={{ marginTop: 16 }}\n        ghost={true}\n        activeKey={defaultKey}\n        bordered={false}\n      >\n        <Collapse.Panel header=\"\" key={defaultKey}>\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <SwapButton poolAddress={poolAddress} />\n            </Col>\n            <Col span={12}>\n              <Button onClick={onClick} block type=\"primary\">\n                Detail\n              </Button>\n            </Col>\n          </Row>\n        </Collapse.Panel>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default ItemLPT\n","import { ReactElement, Fragment, useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Empty } from 'antd'\nimport ItemLPT from './itemLPT'\n\nimport { AppState } from 'app/model'\nimport { usePool, useWallet } from 'senhub/providers'\n\nconst LptsPools = ({\n  onInit = () => {},\n  onClick = () => {},\n  action = () => <Fragment />,\n}: {\n  onInit?: (poolAddress: string) => void\n  onClick?: (poolAddress: string) => void\n  action?: (lptAddress: string, poolAddress: string) => ReactElement\n}) => {\n  const lpts = useSelector((state: AppState) => state.lpts)\n  const selectedCategoryPool = useSelector(\n    (state: AppState) => state.main.selectedCategoryPool,\n  )\n  const { pools } = usePool()\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  const lptAddresses = useMemo(\n    () =>\n      Object.keys(lpts).filter((lptAddress) => {\n        const { pool: poolAddress, amount } = lpts[lptAddress]\n        if (selectedCategoryPool === 'deposited' && amount !== BigInt(0))\n          return pools[poolAddress]\n        else if (\n          selectedCategoryPool === 'your-pools' &&\n          pools?.[poolAddress]?.owner === walletAddress\n        )\n          return pools[poolAddress]\n        return null\n      }),\n    [pools, lpts, walletAddress, selectedCategoryPool],\n  )\n\n  useEffect(() => {\n    if (!lptAddresses.length) return\n    onInit(lptAddresses[0])\n  }, [onInit, lptAddresses, lpts])\n\n  return (\n    <Row gutter={[12, 12]} justify=\"center\">\n      {!lptAddresses.length && (\n        <Col>\n          <Empty />\n        </Col>\n      )}\n      {lptAddresses.map((lptAddress, i) => {\n        const { pool: poolAddress } = lpts[lptAddress]\n        return (\n          <Col span={24} key={lptAddress + i}>\n            <LazyLoad height={78} overflow>\n              <ItemLPT\n                keyExpand={i + 1}\n                data={lpts[lptAddress]}\n                action={action(lptAddress, poolAddress)}\n                onClick={() => onClick(poolAddress)}\n              />\n            </LazyLoad>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n\nexport default LptsPools\n","import { Fragment, ReactElement, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  Row,\n  Col,\n  Card,\n  Space,\n  Typography,\n  Divider,\n  Tooltip,\n  Collapse,\n  Button,\n} from 'antd'\nimport PoolTVL from 'app/components/poolTVL'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport PoolCardStatus from 'app/components/poolCardStatus'\nimport SwapButton from 'app/components/swapButton'\n\nimport { numeric } from 'shared/util'\nimport { AppState } from 'app/model'\nimport { fetchStatPoolData } from 'app/model/stat.controller'\nimport { PoolStatus } from 'app/constant'\nimport { usePool } from 'senhub/providers'\n\nconst ItemPool = ({\n  poolAddress,\n  onClick = () => {},\n  action = <Fragment />,\n  keyExpand,\n}: {\n  poolAddress: string\n  onClick?: () => void\n  action?: ReactElement\n  keyExpand: number\n}) => {\n  const dispatch = useDispatch()\n  const [isActive, setIsActive] = useState(false)\n  const { pools } = usePool()\n  const details = useSelector(\n    (state: AppState) => state.stat[poolAddress]?.details,\n  )\n  const poolData = pools?.[poolAddress] || {}\n  const { mint_lpt: mintLptAddress, state: poolState } = poolData\n\n  const apy = useMemo(() => {\n    if (!details || !details.roi) return 0\n    const roi = details.roi\n    return Math.pow(1 + Number(roi) / 100, 365) - 1\n  }, [details])\n\n  useEffect(() => {\n    if (!poolAddress) return\n    dispatch(fetchStatPoolData({ address: poolAddress }))\n  }, [dispatch, poolAddress])\n\n  const isFrozen = poolState === PoolStatus.Frozen\n  const expandClass = isActive ? '' : 'expandHidden'\n  const defaultKey = keyExpand.toString()\n\n  return (\n    <Card\n      bodyStyle={{ padding: 12, minHeight: 78 }}\n      bordered={false}\n      className=\"lp-card\"\n    >\n      <Row gutter={[12, 12]} align=\"top\">\n        <Col flex=\"auto\">\n          <Space direction=\"vertical\">\n            <Space>\n              <MintAvatar mintAddress={mintLptAddress} size={24} />\n              <Typography.Text type={isFrozen ? 'secondary' : undefined}>\n                <MintSymbol mintAddress={mintLptAddress} />\n              </Typography.Text>\n            </Space>\n            <Space>\n              <Tooltip title=\"The Total Value Locked is roughly estimated and perhaps inaccurate because unknown tokens ain't involved in the computation.\">\n                <Typography.Text type=\"secondary\" className=\"caption\">\n                  TVL:\n                </Typography.Text>\n              </Tooltip>\n              <Typography.Text>\n                <PoolTVL poolAddress={poolAddress} />\n              </Typography.Text>\n              <Divider type=\"vertical\" style={{ margin: 0 }} />\n              <Typography.Text type=\"secondary\" className=\"caption\">\n                APY:\n              </Typography.Text>\n              <Typography.Text>\n                {numeric(apy).format('0,0.[00]%')}\n              </Typography.Text>\n            </Space>\n          </Space>\n        </Col>\n        <Col>\n          <Space size={2}>\n            <PoolCardStatus poolAddress={poolAddress} />\n            {action}\n            <Button\n              size=\"small\"\n              type=\"text\"\n              icon={\n                <IonIcon\n                  name={\n                    isActive\n                      ? 'chevron-down-outline'\n                      : 'chevron-forward-outline'\n                  }\n                />\n              }\n              onClick={() => setIsActive(!isActive)}\n            />\n          </Space>\n        </Col>\n      </Row>\n      <Collapse\n        className={expandClass}\n        style={{ marginTop: 16 }}\n        ghost={true}\n        activeKey={defaultKey}\n        bordered={false}\n      >\n        <Collapse.Panel header=\"\" key={defaultKey}>\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <SwapButton poolAddress={poolAddress} />\n            </Col>\n            <Col span={12}>\n              <Button onClick={onClick} block type=\"primary\">\n                Detail\n              </Button>\n            </Col>\n          </Row>\n        </Collapse.Panel>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default ItemPool\n","import { ReactElement, useMemo, useEffect, Fragment } from 'react'\nimport { useSelector } from 'react-redux'\nimport LazyLoad from '@senswap/react-lazyload'\n\nimport { Row, Col, Empty } from 'antd'\nimport ItemPool from './itemPool'\n\nimport { AppState } from 'app/model'\nimport { PoolTabs } from 'app/constant'\nimport { useSentrePools } from 'app/hooks/pools/useSentrePools'\nimport { useListPoolAddress } from 'app/hooks/pools/useListPoolAddress'\nimport { useCommunityPools } from 'app/hooks/pools/useCommunityPools'\n\nconst SentrePools = ({\n  onClick = () => {},\n  action = () => <Fragment />,\n}: {\n  onClick?: (poolAddress: string) => void\n  action?: (poolAddress: string) => ReactElement\n}) => {\n  const { sentrePools } = useSentrePools()\n  const { listPoolAddress } = useListPoolAddress(sentrePools)\n\n  return (\n    <Fragment>\n      {!listPoolAddress.length && (\n        <Col>\n          <Empty />\n        </Col>\n      )}\n      {listPoolAddress.map((poolAddress, i) => (\n        <Col span={24} key={poolAddress}>\n          <LazyLoad height={78} overflow>\n            <ItemPool\n              poolAddress={poolAddress}\n              action={action(poolAddress)}\n              onClick={() => onClick(poolAddress)}\n              keyExpand={i + 1}\n            />\n          </LazyLoad>\n        </Col>\n      ))}\n    </Fragment>\n  )\n}\n\nconst CommunityPool = ({\n  onInit = () => {},\n  onClick = () => {},\n  action = () => <Fragment />,\n}: {\n  onInit?: (poolAddress: string) => void\n  onClick?: (poolAddress: string) => void\n  action?: (poolAddress: string) => ReactElement\n}) => {\n  const { communityPools } = useCommunityPools()\n  const { listPoolAddress } = useListPoolAddress(communityPools)\n\n  useEffect(() => {\n    if (!listPoolAddress.length) return\n    onInit(listPoolAddress[0])\n  }, [onInit, listPoolAddress])\n\n  return (\n    <Fragment>\n      {listPoolAddress.map((poolAddress, i) => (\n        <Col span={24} key={poolAddress}>\n          <LazyLoad height={78} overflow>\n            <ItemPool\n              poolAddress={poolAddress}\n              action={action(poolAddress)}\n              onClick={() => onClick(poolAddress)}\n              keyExpand={i + 1}\n            />\n          </LazyLoad>\n        </Col>\n      ))}\n    </Fragment>\n  )\n}\n\nconst ListPools = ({\n  onInit = () => {},\n  onClick = () => {},\n  action = () => <Fragment />,\n}: {\n  onInit?: (poolAddress: string) => void\n  onClick?: (poolAddress: string) => void\n  action?: (poolAddress: string) => ReactElement\n}) => {\n  const selectedCategoryPool = useSelector(\n    (state: AppState) => state.main.selectedCategoryPool,\n  )\n  const isSentrePools = useMemo(\n    () => selectedCategoryPool === PoolTabs.Sentre,\n    [selectedCategoryPool],\n  )\n\n  return (\n    <Row gutter={[12, 12]} justify=\"center\">\n      {isSentrePools ? (\n        <SentrePools onClick={onClick} action={action} />\n      ) : (\n        <CommunityPool onInit={onInit} onClick={onClick} action={action} />\n      )}\n    </Row>\n  )\n}\n\nexport default ListPools\n","import { useCallback } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Col, Row } from 'antd'\nimport Header from './header'\nimport LptWatcher from 'app/components/watcher/lptWatcher'\nimport RetailerWatcher from 'app/components/watcher/retailerWatcher'\nimport OrderWatcher from 'app/components/watcher/orderWatcher'\nimport LptsPools from './components/lptsPools'\nimport ListPools from './components/pools'\n\nimport configs from 'app/configs'\nimport { AppDispatch, AppState } from 'app/model'\nimport { handleOpenDrawer, selectPool } from 'app/model/main.controller'\nimport { PoolTabs } from 'app/constant'\n\nconst Widget = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const selectedCategoryPool = useSelector(\n    (state: AppState) => state.main.selectedCategoryPool,\n  )\n  const history = useHistory()\n  const {\n    manifest: { appId },\n  } = configs\n\n  const setActiveAddress = useCallback(\n    (address: string) => {\n      dispatch(selectPool(address))\n      dispatch(handleOpenDrawer(false))\n      history.push(`app/${appId}`)\n    },\n    [dispatch, history, appId],\n  )\n  return (\n    <Row className=\"widget\">\n      <Col span={24}>\n        <Header />\n      </Col>\n      <Col span={24} className=\"body-widget\">\n        {selectedCategoryPool === PoolTabs.Sentre ||\n        selectedCategoryPool === PoolTabs.Community ? (\n          <ListPools onClick={setActiveAddress} />\n        ) : (\n          <LptsPools onClick={setActiveAddress} />\n        )}\n      </Col>\n      <Col span={24} style={{ height: 16 }} />\n      <LptWatcher />\n      <RetailerWatcher />\n      <OrderWatcher />\n    </Row>\n  )\n}\n\nexport default Widget\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from 'app/model/main.controller'\nimport stat from 'app/model/stat.controller'\nimport lpts from 'app/model/lpts.controller'\nimport retailers from 'app/model/retailers.controller'\nimport orders from 'app/model/orders.controller'\nimport settings from 'app/model/settings.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    main,\n    stat,\n    lpts,\n    retailers,\n    orders,\n    settings,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  WalletProvider,\n  UIProvider,\n  AccountProvider,\n  PoolProvider,\n  MintProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\n\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/dark.less'\nimport 'app/static/styles/index.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <MintProvider>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </MintProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <MintProvider>\n      <UIProvider appId={appId} antd>\n        <PoolProvider>\n          <AccountProvider>\n            <WalletProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </WalletProvider>\n          </AccountProvider>\n        </PoolProvider>\n      </UIProvider>\n    </MintProvider>\n  )\n}\n","import { Net } from 'shared/runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  sntrAddress: string\n  sntrPoolAddress: string\n  swapAddress: string\n  taxmanAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    sntrAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    sntrPoolAddress: '3EUPL7YQLbU6DNU5LZeQeHPXTf1MigJ2yASXA9rH5Ku4',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    sntrAddress: '',\n    sntrPoolAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    sntrAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    sntrPoolAddress: 'Aa3WZX7Xunfebp2MuAcz9CNw8TYTDL7mVrmb11rjyVm6',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_NAME !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error(\n    'Please add REACT_APP_ID, REACT_APP_NAME, REACT_APP_URL in .env.local!',\n  )\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  defaultAppId: string\n  extra: SenReg\n  senreg: string\n}\n\nconst DEFAULT_APP_ID = 'senhub'\nconst devApp = {\n  [process.env.REACT_APP_ID]: {\n    url: process.env.REACT_APP_URL,\n    appId: process.env.REACT_APP_ID,\n    name: process.env.REACT_APP_NAME,\n    author: {\n      name: process.env.REACT_APP_AUTHOR_NAME || '',\n      email: process.env.REACT_APP_AUTHOR_EMAIL || '',\n    },\n    supportedViews: (process.env.REACT_APP_SUPPORTED_VIEWS || '')\n      .split(',')\n      .map((view) => view.trim())\n      .filter((view) => ['page', 'widget'].includes(view)) as Array<\n      'widget' | 'page'\n    >,\n    tags: (process.env.REACT_APP_TAGS || '')\n      .split(',')\n      .map((tag) => tag.trim()),\n    description: process.env.REACT_APP_DESCRIPTION || '',\n    verified: false,\n  },\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: devApp,\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    defaultAppId: DEFAULT_APP_ID,\n    extra: {},\n    senreg: 'https://descartesnetwork.github.io/senreg/register.json',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { net, env } from 'shared/runtime'\nimport sol from './sol.config'\nimport register from './register.config'\n\nconst configs = {\n  sol: sol[net],\n  register: register[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for testnet and mainnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import { Document } from 'flexsearch'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net } from 'shared/runtime'\nimport configs from 'os/configs'\nimport supplementary, { sntr, sol } from './supplementary'\n\nconst {\n  sol: { chainId },\n} = configs\nconst DELIMITER = /[\\W_]+/g\nconst PRESET = {\n  tokenize: 'full',\n  context: true,\n  minlength: 3,\n}\nconst DOCUMENT = {\n  document: {\n    id: 'address',\n    index: [\n      { field: 'symbol', ...PRESET },\n      { field: 'name', ...PRESET },\n    ],\n  },\n}\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: typeof Document | undefined\n  readonly chainId: typeof chainId\n  readonly cluster: typeof net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, any]> => {\n    if (this.tokenMap.size) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = new Document(DOCUMENT)\n      this.tokenMap.forEach(({ address, ...doc }) =>\n        this.engine.add(address, doc),\n      )\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit?: 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    keyword.split(DELIMITER).forEach((key) => {\n      const raw: Array<{ result: string[] }> = engine.search(key, limit)\n      return raw.forEach(({ result }) => {\n        return result.forEach((id: string) => {\n          if (tokens.findIndex(({ address }) => address === id) < 0) {\n            const token = tokenMap.get(id)\n            if (token) tokens.push(token)\n          }\n        })\n      })\n    })\n    return tokens\n  }\n}\n\nexport default TokenProvider\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["CUSTOM_ICONS","forwardRef","name","className","props","ref","cln","src","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","constructor","key","resolveQueue","rejectQueue","this","add","resolve","reject","push","resolves","data","length","shift","rejects","error","SingleFlightCache","value","configs","mapCache","set","setTimeout","delete","get","Map","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","Object","assign","cacheData","Promise","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","asyncWait","ms","shortenAddress","address","num","delimiter","substring","explorer","addressOrTxId","account","net","numeric","numbro","fetchCGK","async","ticket","utils","usePoolTvl","poolAddress","pools","usePool","tvl","setTvl","useState","getMintTotalValue","tokenProvider","getMint","useMint","getTokenUsd","useCallback","mintAddress","amount","tokenInfo","findByAddress","extensions","coingeckoId","Error","cgkData","Number","decimals","price","poolData","values","find","pool","mint_lpt","reserve_a","reserve_b","mint_a","mint_b","BigInt","supply","deltaA","deltaB","Swap","useMintTotalValue","getTvl","updateTvl","poolTvl","useEffect","format","PoolStatus","OrderState","PoolTabs","QueryParams","VESTING","locktime","discount","wallet","walletAddress","useWallet","isFrozen","state","Frozen","isOwner","owner","Space","style","fontSize","DEFAULT_AVATARS","undefined","size","icon","reversed","avatars","setAvatars","deriveAvatar","token","logoURI","deriveAvatars","all","map","reverse","avatar","Avatar","backgroundColor","border","display","whiteSpace","i","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","deriveSymbols","symbols","shared","appId","process","url","senhub","development","staging","production","devnet","swapAddress","taxmanAddress","senOwners","sntrAddress","purchasingAddress","spltAddress","splataAddress","nodeUrl","purchasing","Purchasing","testnet","mainnet","baseURL","exoticFee","exoticTax","correlatedFee","correlatedTax","myRoute","swapRoute","farmRoute","manifest","env","sol","stat","fee","route","api","auth","window","sentre","msg","toString","Math","floor","random","signMessage","Authorization","post","params","authHeader","axios","method","headers","status","er","message","put","StatPool","NAME","fetchStatPoolData","createAsyncThunk","getState","details","endpointDetail","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","payload","onClick","action","Fragment","selected","apy","myLp","dispatch","useDispatch","useSelector","myLpValue","lpts","balance","useMemo","addr","keys","useMyLp","apyValue","roi","pow","frozen","cardStyle","Card","bodyStyle","padding","height","bordered","hoverable","Row","gutter","wrap","align","Col","span","flex","direction","Typography","type","Tooltip","title","Divider","margin","selectPool","selectedPoolAddress","selectedLptAddress","selectCategoryPool","selectedCategoryPool","category","handleOpenDrawer","visible","condition","checkPrevSelectedPool","prevSelectedPool","onSearch","search","useSentrePools","sentrePools","setSentrePools","checkSentrePools","includes","filterSentrePools","newSentrePools","useCommunityPools","communityPools","setCommunityPools","checkCommunityPools","filterCommunityPools","newCommunityPools","timeOutForceCheck","useListPoolAddress","filteredPools","setFilterPools","settings","showArchived","checkArchivedPools","filterPools","displayPools","useFilterPools","searchedPools","setSearchedPools","main","checkPool","tokenInfos","searchPools","newSearchedPools","clearTimeout","forceCheck","useSearchedPools","sortedPools","setSortedPools","sortPools","listPoolAddress","newSortedPools","poolsTvl","shortedAddress","sort","first","second","useSortedPools","history","useHistory","setActivePoolAddress","Button","e","stopPropagation","color","Community","justify","id","overflow","Empty","yourPools","setYourPools","getYourPools","newYourPools","lptAddr","useYourPools","setActiveAddress","YourPools","timeoutId","max","onValue","onChange","setError","cursor","setCursor","innerRef","useRef","onAmount","val","onError","test","parseFloat","current","setSelectionRange","Input","target","selectionStart","DEFAULT_VALUE","mintAddresses","activeMintAddress","onSelect","Select","suffixIcon","marginLeft","setDecimals","getDecimals","fetchDecimals","suggestion","setAmount","setActiveMintAddress","accountAddress","setAccountAddress","accounts","useAccount","useMintDecimals","a","getAccountAddress","splt","deriveAssociatedAddress","placeholder","prefix","suffix","marginRight","notifySuccess","content","txId","notify","description","open","notifyError","useMintPrice","strict","mintPrice","setMintPrice","getTokenPrice","tokenAddress","amountBigint","mintDecimals","getMintLptPrice","lptAddress","getMintPrice","mintLptPrice","setVisible","reserveA","setReserveA","mintAddressA","setMintAddressA","reserveB","setReserveB","mintAddressB","setMintAddressB","isMintAChanged","setIsMintAChanged","suggestions","setSuggestions","existedPoolKeys","isExisted","exclusiveMintAddresses","filter","filteredMintAddress","mint","mintAPrice","decimalsA","mintBPrice","decimalsB","isValid","Modal","onCancel","closeIcon","footer","destroyOnClose","centered","level","swap","srcAddresses","initializePool","disabled","block","location","useLocation","query","URLSearchParams","Sentre","onInitSelectPool","idx","depositedPools","setDepositedPools","getDepositedPools","newDepositedPools","useDepositedPools","setShowArchived","Popover","zIndex","maxWidth","Switch","checked","trigger","placement","selectedTab","setSelectedTab","poolCategory","poolsSelected","Deposited","element","document","getElementById","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","isInViewport","container","offsetTop","scrollTop","SwapAction","onSwap","originalRoute","pathname","width","textAlign","copied","setCopied","goFarming","arrowPointAtCenter","text","wordBreak","amountA","amountB","reversedPrice","isReverse","setIsReverse","totalLPT","setTotalLPT","lpt","associatedAddress","setAssociatedAddress","accountData","setAmountFromProps","newAmount","fetchAssociatedAddress","spltProgramId","toBase58","splataProgramId","notEnoughBalance","lineHeight","onClose","loading","setLoading","setLPT","amounts","setAmounts","selectMint","setSelectMint","setDisabled","fee_ratio","tax_ratio","decimalA","decimalB","ratio","getSuggestMintAmount","index","suggestDecimal","parseAmount","suggestAmount","estimateLPT","validateInput","accAddrMintA","accMintA","accAddrMintB","accMintB","amountMintA","amountMintB","Radio","event","Tag","findIndex","newAmounts","onAmounts","srcAAddress","srcBAddress","addSidedLiquidity","feeRatio","taxRatio","totalRatio","asymmetric","asymmetricColor","asymmetricType","onLPT","setSupply","lptPoolAddress","fetchData","delta","dstAddresses","removeLiquidity","depositVisible","setDepositVisible","withdrawVisible","setWithdrawVisible","Content","label","subTitle","Title","sub","calculateRoi","date","xs","currentRatio","setFeeRatio","setTaxRatio","currentFee","currentTax","feeAmount","taxAmount","updateFee","CardDescription","poolStatus","Active","Badge","background","freezePool","thawPool","newOwner","setNewOwner","borderRadius","boxShadow","transferPoolOwnership","minHeight","Tabs","tab","chartData","labels","disableAxe","chartId","isRebuildChart","setRebuildChart","formatData","datasets","chartRef","getBackground","ctx","canvas","getContext","gradient","createLinearGradient","addColorStop","chartInstance","dataInstace","compareData","isEqual","update","Chart","options","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawBorder","ticks","yAxes","beginAtZero","maxTicksLimit","plugins","legend","hover","onHover","elements","DailyReport","programId","actionType","amountIn","amountOut","totalTrans","DailyReportService","parserDailyReport","transLogs","reports","Array","transLog","concat","parseDailyReport","mergeDailyReport","dailyReports","actionTransfers","transfer","source","destination","report","results","forEach","IPFS","_ipfs","ipfs","create","isCID","cid","stream","cat","raw","chunk","Buffer","from","parse","path","isIPFS","PDB","dbName","driver","createInstance","localForage","storeName","dropInstance","clear","appIds","getItem","flat","iterate","backup","restore","setItem","TransLog","programInfo","signature","blockTime","programTransfer","ActionInfo","preBalance","postBalance","ActionTransfer","DEFAULT_LIMIT","Solana","conn","connection","lastSignature","before","getConfirmedSignaturesForAddress2","signatures","confirmedTransactions","promiseTransGroup","offset","skip","signaturesGroup","slice","getParsedConfirmedTransactions","transGroups","transGroup","currentTime","secondFrom","secondTo","programPublicKey","PublicKey","isStop","confirmedSignatureInfos","fetchSignatures","info","fetchConfirmTransaction","ParsedType","SECOND_PER_MILLISECOND","TimeFormat","DateHelper","milliSeconds","valueOf","setMilliSeconds","seconds","ymd","moment","YMD","ymdFrom","ymdTo","dates","dateFrom","fromYmd","dateTo","addDay","dateFormat","subtractDay","dayAmount","subtract","fromSeconds","struct","require","TRANSLOG_PROGRAM_DATA_SCHEMA","SwapActionType","ACTION_TYPE","InitPool","AddLiquidity","RemoveLiquidity","Route","PoolTransLogService","parseAction","filterTransLog","solana","lastSignatureTmp","smartLimit","confirmedTrans","fetchTransactions","trans","transaction","log","parseTransLog","meta","postTokenBalances","preTokenBalances","postBalances","preBalances","innerInstructionData","innerInstructions","instructions","instructionData","mapAccount","parseAccountInfo","accountKeys","isParsedInstruction","parseListActionTransfer","parsed","actions","actionTransfer","actionParsed","Transfer","parsedAction","parseActionTransfer","parsedTransfer","lamports","amountTransfer","mapAccountInfo","accountIndex","uiTokenAmount","pubkey","String","programDataEncode","dataBuffer","base58","programDataDecode","fromBuffer","code","PoolService","poolTransLogService","dailyReportService","TokenProvider","getPoolData","getUsd","mintInfo","fetchTransLog","timeFrom","timeTo","db","cacheTransLog","b","fistTransLog","lastTransLog","beginTransLogs","collect","getDailyInfo","treasury_a","treasury_b","mapTimeDailyReport","tvlA","tvlB","mapTimeTotal","volume","currentReport","prevDate","CHART_CONFIGS","setChartData","isLoading","setIsLoading","ui","useUI","tvlChartConfigs","borderColor","pointRadius","tooltip","pointHitRadius","pointHoverRadius","fetchChart","poolService","poolStat","iconName","isMobile","Spin","tip","spinning","shape","volumeChartConfigs","vol24h","today","yesterday","getHours","orderAddress","orders","locked_time","updated_at","onRedeem","redeemOrder","Open","cancelOrder","Approved","locked","BorderlessTag","Done","Rejected","Canceled","retailers","retailer","bid_amount","ask_amount","created_at","mint_bid","mint_ask","bidDecimals","askDecimals","bidAmount","askAmount","ellipsis","fontWeight","Collapse","activeKey","header","showArrow","orderAddresses","retailerAddress","setIndex","searchIndex","deriveOrderAddress","subValue","floatRight","textDecoration","TimeInfo","retailerData","useNextOrderIndex","bidPrice","askPrice","lockedTime","l","valuation","placeOrder","PriceInfo","styles","round","LOCKTIMES","setLocktime","retailerIndex","noRetailer","lg","getRetailers","getProgramAccounts","purchasingProgramId","filters","dataSize","bulk","buf","parseRetailerData","getRetailer","getRetailerData","upsetRetailer","deleteRetailer","initializeRetailer","unwrap","freezeRetailer","thawRetailer","ordersDetail","orderData","loadingApprove","setLoadingApprove","loadingReject","setLoadingReject","lockTime","rejectOrder","approveOrder","ADMIN_COLUMNS","dataIndex","render","record","getOrders","opts","memcmp","bytes","parseOrderData","getOrder","getOrderData","upsetOrder","deleteOrder","lite","setLite","amountRow","setAmountRow","myRetailerAddresses","listOrder","fetchOrders","Table","columns","dataSource","rowClassName","pagination","scroll","y","x","rowKey","ownerPool","order","md","Affix","position","getLPTs","mintPublicKeys","mintData","re","parseMintData","poolAddresses","mint_authority","freeze_authority","derivePoolAddress","getLPT","getLPTData","upsetLPT","lptData","deleteLPT","watchId","watchData","console","warn","watch","unwatch","senOwner","listSentrePools","poolAddr","firstRa","firstRb","secondRa","secondRb","firstK","secondK","onInit","poolAddressDefault","sentrePoolAddrDefault","paddingBottom","xl","defaultValue","keyExpand","isActive","setIsActive","lp","mintLptAddress","expandClass","defaultKey","marginTop","ghost","lptAddresses","poolState","SentrePools","CommunityPool","isSentrePools","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","isArray","obj","proto","getPrototypeOf","isPlainObject","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","MintProvider","PoolProvider","AccountProvider","WalletProvider","Provider","store","model","widgetConfig","Widget","SOLVARS","node","chainId","sntrPoolAddress","DEFAULT_APP_ID","devApp","author","email","supportedViews","split","view","trim","tags","tag","verified","defaultAppId","extra","senreg","register","sntr","DELIMITER","PRESET","tokenize","context","minlength","DOCUMENT","field","tokenMap","engine","cluster","queue","_init","tokenList","TokenListProvider","filterByChainId","getList","supplementary","Document","doc","keyword","tokens","result","storage","getNetwork","KEY","localStorage","convert"],"sourceRoot":""}