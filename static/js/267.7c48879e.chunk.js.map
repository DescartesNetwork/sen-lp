{"version":3,"file":"static/js/267.7c48879e.chunk.js","mappings":"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","sources":["../../../src/index.ts","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/util/promise-timeout.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js"],"sourcesContent":[null,"import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch infor for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.5\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"],"names":["Wallet","EventEmitter","constructor","provider","_network","Map","e","_injectedProvider","source","window","origin","_providerUrl","_a","_popup","data","method","newPublicKey","PublicKey","params","publicKey","_publicKey","equals","handleDisconnect","_autoApprove","autoApprove","emit","result","error","promises","_responsePromises","get","id","resolve","reject","Error","disconnect","a","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","handleConnect","_handlerAdded","addEventListener","handleMessage","_beforeUnload","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","_nextRequestId","set","jsonrpc","_b","_c","_d","focus","connect","close","sign","display","Uint8Array","response","signature","bs58","signTransaction","transaction","message","serializeMessage","addSignature","signAllTransactions","transactions","messages","map","tx","signatures","s","idx","diffieHellman","toBuffer","arr","Buffer","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","push","parseInt","p","c","endian","start","end","len","k","m","b","d","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","utils","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","common","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","require$$4","sum32_3","RIPEMD160","j","K","Kh","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","key","Hash","inner","outer","_init","hmac","exports","sha","ripemd","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","off","_logLevel","_globalLogger","_normalizeError","missing","form","normalize","join","String","fromCharCode","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","defineProperty","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","throwError","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","MAX_SEED_LENGTH","_bn","undefined","isPublicKeyData","decoded","BN","eq","toBase58","toBytes","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","address","nonce","seedsWithNonce","createProgramAddress","err","pubkey","default","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","signDataLayout","Layout","signData","byteArray","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","feePayer","nonceInfo","add","items","item","compileMessage","nonceInstruction","accountMetas","accountMeta","includes","isSigner","isWritable","sort","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","_addSignature","sigpair","verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","from","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","async","sendAndConfirmTransaction","connection","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","sleep","ms","setTimeout","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","next","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","DataView","_bodyArrayBuffer","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","hasOwnProperty","callback","thisArg","methods","Request","input","url","credentials","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","stack","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","withCredentials","responseType","setRequestHeader","onreadystatechange","readyState","send","polyfill","ponyfill","ctx","module","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","fetchWithMiddleware","RpcClient","agent","too_many_requests_retries","waitTime","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","configOrCommitment","extra","encoding","filters","decodedSignature","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","timeoutMs","timeoutId","timeoutPromise","race","clearTimeout","promiseTimeout","removeSignatureListener","duration","toFixed","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","getRecentBlockhashAndContext","_buildArgsAtLeastConfirmed","getBlock","endSlot","transactionDetails","getTransaction","firstAvailableBlock","getFirstAvailableBlock","block","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","getRecentBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","_recentBlockhash","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","sub","rpcMethod","rpcArgs","unsubscribeId","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_subscribe","mentions","notification","onAccountChange","subInfo","_unsubscribe","accountId","onProgramAccountChange","onLogs","onSlotChange","onSlotUpdate","override","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","round","isNum","alphabet","caseChanged","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","baseOut","div","yL","yz","qc","q","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","coeffToString","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","precision","_result$split2","_slicedToArray","_base$split2","_base$split2$","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","validator","loader","unformatter","formatter","manipulate","Numbro","normalizeInput","unformat","isNaN","NaN","object","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","_toConsumableArray","reduce","acc","validInput","isFormatValid"],"sourceRoot":""}